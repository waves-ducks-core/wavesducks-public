{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}


func tryGetInteger(key: String) = {
  match getInteger(this, key) {
      case b:Int => b
      case _ => 0
  }
}

#func keyBoughtBoosterLevel(addressStr: String) = "address_" + addressStr + "_boughtBoosterLevel"
func keyDuckPlayUnlockTime(assetId: ByteVector) = "duck_" + assetId.toBase58String() + "_unlockTime"
func keyDuckFinishUnlockTime(assetId: ByteVector) = "duck_" + assetId.toBase58String() + "finish_unlockTime"
func keyDuckOwner(assetId: ByteVector) = "duck_" + assetId.toBase58String() + "_owner"
func keySpotsBought(addressStr: String) = "address_" + addressStr + "_spotsBought"
func keySpotsBusy(addressStr: String) = "address_" + addressStr + "_spotsBusy"
func keyLockedDuckStatus(addressStr: String, assetIdStr: String) = "address_" + addressStr + "_lockedDuck_" + assetIdStr + "_status"
func keyDuckV2(addressStr: String, assetIdStr: String) = "address_" + addressStr + "_lockedDuck_" + assetIdStr + "_v2"

func getDuckDetails(assetId: ByteVector) = {
  let assetName = assetInfo(assetId).value().name.value()
  let assetNameParts = assetName.split("")
  let isJackpot = assetNameParts[assetNameParts.size() - 2] == "J"
  let assetColor = if isJackpot then "B" else assetNameParts[assetNameParts.size() - 1]
  (
    assetColor, isJackpot
  )
}

func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}

func tryGetBoolean(key: String) = {
    match getBoolean(key) {
        case b:Boolean => b
        case _ => false
    }

}

func tryGetString(key: String) = {
    tryGetStringExternal(this,key)
}

func staticKey_oracleAddress() = "static_oracleAddress"
func staticKey_eggAssetId() = "static_eggAssetId"
func staticKey_incubatorAddress() = "static_incubatorAddress"
func staticKey_breederAddress() = "static_breederAddress"
func staticKey_farmingAddress() = "static_farmingAddress"
func staticKey_rentingAddress() = "static_rentingAddress"
func staticKey_shortGameName() = "static_shortGameName"
func staticKey_longGameName() = "static_longGameName"
func staticKey_nftName() = "static_nftName"
func staticKey_backendPubKey() = "static_backendPubKey"
func staticKey_accessItemAssetId() = "static_accessItemAssetId"
func staticKey_accessItemPrice() = "static_accessItemPrice"
func staticKey_minLockDuration() = "static_minLockDuration"
func staticKey_UnlockDuration() = "static_UnlockDuration"
func staticKey_boosterBuyAssetId() = "static_boosterBuyAssetId"
func staticKey_extraFee() = "static_extraFee"
func staticKey_feeAggregator() = "static_feeAggregator"
func staticKey_boosterPriceLevel(level: String) = "static_boosterPriceLevel_"+level
func staticKey_boosterName(level: String) = "static_boosterName_"+level
func staticKey_burnAddress() = "static_burnAddress"

#CUSTOM SETTINGS CONFIGURED BY ORACLE SETUP
func getOracle() = Address(tryGetString(staticKey_oracleAddress()).fromBase58String())
func getGameName() = getString(staticKey_shortGameName()).valueOrErrorMessage("3GGN: There is no game name defined!")
func getLongGameName() = getString(staticKey_longGameName()).valueOrErrorMessage("3GLGN: There is no long game name defined!")
func getNFTName() = getString(staticKey_nftName()).valueOrErrorMessage("3GNN: There is no nft name defined!")

#GENERIC SETTINGS READ FROM ORACLE
func getIncubatorAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_incubatorAddress()).fromBase58String()) #base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
func getBreederAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_breederAddress()).fromBase58String()) #base58'3PDVuU45H7Eh5dmtNbnRNRStGwULA7NY6Hb'
func getRentingAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_rentingAddress()).fromBase58String())
func getFarmingAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_farmingAddress()).fromBase58String())
func getEggAssetId() = tryGetStringExternal(getOracle(),staticKey_eggAssetId()).fromBase58String() #base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'
func getBackendPubKey() = tryGetStringExternal(getOracle(),staticKey_backendPubKey()).fromBase58String()
func getFeeAggregator() = Address(tryGetStringExternal(getOracle(),staticKey_feeAggregator()).fromBase58String())
func getBurnAddress() = Address(tryGetStringExternal(getOracle(),staticKey_burnAddress()).fromBase58String())

#GENERIC SETTINGS THAT NEED TO BE CONFIGURED MANUALLY
func getAccessItemAssetId() = tryGetString(staticKey_accessItemAssetId()).fromBase58String()
func getAccessItemPrice() = tryGetInteger(staticKey_accessItemPrice())
func getMinLockDuration() = tryGetInteger(staticKey_minLockDuration())
func getUnlockDuration() = tryGetInteger(staticKey_UnlockDuration())
func getBosterBuyAssetId() = tryGetString(staticKey_boosterBuyAssetId()).fromBase58String()



# DON'T USE tryGetInteger because it can return 0 as price for booster
func getBosterPriceForLevel(level: Int) = getInteger(staticKey_boosterPriceLevel(level.toString())).valueOrErrorMessage("3GBPFL: There is no price value for this level of booster")
func getBosterNameForLevel(level: Int) = getString(staticKey_boosterName(level.toString())).valueOrErrorMessage("3GBNFL: There is no such booster")

func checkAdditionalPayment(payment: AttachedPayment)= {
  if isDefined(payment.assetId) then throw("RCAP: Please attach waves") else
  let feeAmount = getIntegerValue(getOracle(),staticKey_extraFee())
  if payment.amount != feeAmount then throw("RCAP: Please attach exactly "+feeAmount.toString()+" amount of wavelets") else
  [ScriptTransfer(getFeeAggregator(), feeAmount, unit)]

}

func asString(value: Any) = match value {
  case string: String => string
  case _ => throw("3AS: wrong type, expected: String")
}

func lockDuckInternal(addressStr:String,takeSpotsFrom:String, pmt: AttachedPayment)={
  let assetId = pmt.assetId.value()
  let assetIssuer = assetInfo(assetId).value().issuer
  let tDuckDetails = getDuckDetails(assetId)
  let assetColor = tDuckDetails._1
  let isJackpot = tDuckDetails._2
  # let assetRarity = getAssetFarmingPower(assetId)._2

  let kSpotsBusy = keySpotsBusy(takeSpotsFrom)
  let spotsBusy = tryGetInteger(kSpotsBusy)
  let kSpotsBought = keySpotsBought(takeSpotsFrom)

  let addressSpotsAvailable = tryGetInteger(kSpotsBought) - spotsBusy

  if (pmt.amount != 1) then throw("NFT is not attached") else 
  if (assetIssuer != getIncubatorAddress() && assetIssuer != getBreederAddress()) then { throw("ivalid NFT attached") } 
  else if (addressSpotsAvailable <= 0) then { throw("No spots available in hunt for: "+takeSpotsFrom) }
  else {
    let kPerchesAvailable = "address_" + this.toString() + "_perchesAvailable_" + assetColor
    strict perchesAvailable = match getInteger(getFarmingAddress(), kPerchesAvailable) {
      case b:Int => b
      case _ => 0
    }

    let eggAssetId = getEggAssetId()

    #strict inv1 = if (perchesAvailable > 0) then { unit } else {
    #  invoke(getFarmingAddress(), "buyPerch", [assetColor, ""], [AttachedPayment(eggAssetId, 1_0000_0000)])
    #}

    #strict inv2 = if isJackpot == false then 
    #  invoke(getFarmingAddress(), "stakeNFT", [], [AttachedPayment(assetId, 1)])  else
    #  invoke(getFarmingAddress(), "stakeJackpot", [assetColor], [AttachedPayment(assetId, 1)])

    [
      IntegerEntry(kSpotsBusy, spotsBusy + 1),
      StringEntry(keyDuckOwner(assetId), addressStr),
      BooleanEntry(keyLockedDuckStatus(addressStr, assetId.toBase58String()), true),
      IntegerEntry(keyDuckPlayUnlockTime(assetId), lastBlock.timestamp + getMinLockDuration()),
      BooleanEntry(keyDuckV2(addressStr, assetId.toBase58String()), true)
    ]
  }
}

func initUnlockDuck(assetIdStr: String,addressStr: String)={
    let assetId = assetIdStr.fromBase58String()

  let tDuckDetails = getDuckDetails(assetId)
  let assetColor = tDuckDetails._1
  let isJackpot = tDuckDetails._2

  let kSpotsBusy = keySpotsBusy(addressStr)
  let kDuckOwner = keyDuckOwner(assetId)

  let remainingForUnlock = tryGetInteger(keyDuckPlayUnlockTime(assetId)) - lastBlock.timestamp

  if (tryGetString(kDuckOwner) != addressStr) then {throw("3IULD: The duck is not yours")} 
  else if (remainingForUnlock > 0) then {throw("3IUL: You need to wait to unlock " + (remainingForUnlock / 1000).toString() + " seconds")}
  else {
    [
            IntegerEntry(keyDuckFinishUnlockTime(assetId), lastBlock.timestamp + getUnlockDuration())

    ]
  }
}

func unstakeDuck(assetIdStr: String, addressStr: String,addSpotsTowards: String)={
  let assetId = assetIdStr.fromBase58String()

  let tDuckDetails = getDuckDetails(assetId)
  let assetColor = tDuckDetails._1
  let isJackpot = tDuckDetails._2

  let kSpotsBusy = keySpotsBusy(addSpotsTowards)
  let kDuckOwner = keyDuckOwner(assetId)

  let remainingForUnlock = tryGetInteger(keyDuckFinishUnlockTime(assetId)) - lastBlock.timestamp

  if (tryGetString(kDuckOwner) != addressStr) then {throw("3UD: The duck is not yours")} 
  else if (remainingForUnlock > 0) then {throw("3UD: You need to wait to unlock " + (remainingForUnlock / 1000).toString() + " seconds")}
  else {
    let isV2 = tryGetBoolean(keyDuckV2(addressStr, assetIdStr))
    strict doUnstake = if isV2 then [] else
      let unstakeFuncName = if isJackpot == true then "unstakeJackpotWithoutClaimEgg" else "unstakeNFTWithoutClaim" 
      strict inv1 = invoke(getFarmingAddress(), unstakeFuncName, [assetIdStr], [])  # TODO: jackpot unstaking
      []
    [
      ScriptTransfer(Address(addressStr.fromBase58String()), 1, assetId),
      DeleteEntry(keyLockedDuckStatus(addressStr, assetIdStr)), 
      DeleteEntry(kDuckOwner), 
      IntegerEntry(kSpotsBusy, tryGetInteger(kSpotsBusy) - 1)
    ]
  }
}

# func updateSettingInternal(i: Invocation, key: String, value: Int | String | Boolean | ByteVector) = {
#   if (i.caller != this) then throw("Only administrator can call this method") else {
#     match (value) {
#         case int: Int => [IntegerEntry(key, int)]
#         case s: String => [StringEntry(key, s)]
#         case b: Boolean => [BooleanEntry(key, b)]
#         case bv: ByteVector => [BinaryEntry(key, bv)]
#         case _ => throw("Bad value type")
#       }
#   }
# }

# @Callable(i)
# func updateSettingInt(key: String, value: Int) = {
#   updateSettingInternal(i,key, value)
# }

# @Callable(i)
# func updateSettingStr(key: String, value: String) = {
#   updateSettingInternal(i,key, value)
# }

# @Callable(i)
# func updateSettingBoolean(key: String, value: Boolean) = {
#   updateSettingInternal(i,key, value)
# }

# @Callable(i)
# func updateSettingByteVector(key: String, value: ByteVector) = {
#   updateSettingInternal(i,key, value)
# }

@Callable(i)
func buyAccessItemInternal(addressStr:String)= {
    if i.caller != this then throw("3BAII: internal use only") else 
    let issueAccessItem = Issue("ACCESS-"+getGameName(), "[Access] "+getLongGameName()+" access NFT for "+getNFTName(), 1, 0, false)
    let accessRaceAssetId = issueAccessItem.calculateAssetId().toBase58String()
    let kSpotsBought = keySpotsBought(addressStr)
    ([
      issueAccessItem,
      StringEntry("accessItem_" + accessRaceAssetId + "_owner", addressStr),
      StringEntry("address_" + addressStr + "_owning", accessRaceAssetId),
      IntegerEntry(kSpotsBought, tryGetInteger(kSpotsBought) + 1)
    ],
    accessRaceAssetId)
  
}

@Callable(i)
func configureOracle(oracle: String, shortname: String, longname: String, nftName: String) = {
  if i.caller != this then throw("3CO: admin only") else 
  [
    StringEntry("static_oracleAddress",oracle),
    StringEntry("static_shortGameName",shortname),
    StringEntry("static_longGameName",longname),
    StringEntry("static_nftName",nftName)
  ]

}



@Callable(i)
func deleteSetting(key: String) = {
    if (i.caller != this) then throw("3DS: Only administrator can call this method")
    else [DeleteEntry(key)]
}

# @Callable(i)
# func buyBooster() = {
#   let kBoughtLevel = keyBoughtBoosterLevel(i.caller.toString())
#   let boughtBoosterLevel = tryGetInteger(kBoughtLevel)
#   let newLevel = boughtBoosterLevel + 1
#   let pmt = i.payments[0].value()
#   let price = getBosterPriceForLevel(newLevel)
#   let expectedAssetId = getBosterBuyAssetId()
#   if (pmt.amount != price) then throw("3BB: Bad price, it should be: " + price.toString()) else 
#   if (pmt.assetId != expectedAssetId) then throw("3BB: Bad payment attached, it should be: " + expectedAssetId.toBase58String())
#   else {
#     let name = getBosterNameForLevel(newLevel)
#     let boosterItem = Issue(getGameName()+"-" + name, "[Booster] "+getLongGameName()+" booster for the game, level = " + newLevel.toString(), 1, 0, false)
#     let boosterItemAssetId = boosterItem.calculateAssetId()
#     [
#       boosterItem,
#       IntegerEntry(kBoughtLevel, newLevel),
#       ScriptTransfer(i.caller, 1, boosterItemAssetId)
#     ]
#   }

# }

@Callable(i)
func buyAccessItemAndLockDuck()={
  let eggPayment = i.payments[0].value()
  let duckPayment = i.payments[1].value()
  let addressStr = i.originCaller.toString()
  if (eggPayment.assetId != getAccessItemAssetId()) then {throw("3BAI: Wrong asset attached")} else 
  if (eggPayment.amount != getAccessItemPrice()) then {throw("3BAI: Wrong amount of assets attached")} else
  strict accessItemData = invoke(this, "buyAccessItemInternal", [addressStr], []).asString()
  strict burnCall = invoke(getBurnAddress(), "burnAttachedPayments", [],[AttachedPayment(getEggAssetId(),eggPayment.amount)])
  strict validPayment = if i.caller == getRentingAddress() then [] else  checkAdditionalPayment(i.payments[2])
  let lockData = lockDuckInternal(addressStr, addressStr,duckPayment)++validPayment

  (lockData, accessItemData)
}

@Callable(i)
func buyAccessItem() = {
  let addressStr = i.originCaller.toString()
  let eggPayment = i.payments[0].value()
  if (eggPayment.assetId != getAccessItemAssetId()) then {throw("3BAI: Wrong asset attached "+ getAccessItemAssetId().toBase58String())} else 
  if (eggPayment.amount != getAccessItemPrice()) then {throw("3BAI: Wrong amount of assets attached")} else
  strict accessItemData = invoke(this, "buyAccessItemInternal", [addressStr], []).asString()
  strict burnCall = invoke(getBurnAddress(), "burnAttachedPayments", [],[AttachedPayment(getEggAssetId(),eggPayment.amount)])
  strict validPayment = if i.caller == getRentingAddress() then [] else checkAdditionalPayment(i.payments[1])

  (validPayment, accessItemData)

}

@Callable(i)
func buyAccessItemOther(addressOther: String) = {
  let eggPayment = i.payments[0].value()
  if (eggPayment.assetId != getAccessItemAssetId()) then {throw("3BAI: Wrong asset attached")} else 
  if (eggPayment.amount != getAccessItemPrice()) then {throw("3BAI: Wrong amount of assets attached")} else
  strict accessItemData = invoke(this, "buyAccessItemInternal", [addressOther], []).asString()
  strict burnCall = invoke(getBurnAddress(), "burnAttachedPayments", [],[AttachedPayment(getEggAssetId(),eggPayment.amount)])
  ([], accessItemData)

}

@Callable(i)
func lockDuck() = {
  let addressStr = i.originCaller.toString()
  let duckPayment = i.payments[0].value()
  strict validPayment = checkAdditionalPayment(i.payments[1])
  lockDuckInternal(addressStr,addressStr,duckPayment)++validPayment
}



@Callable(i)
func initUnlock(assetIdStr: String)={
  let addressStr = i.caller.toString()
  strict validPayment = checkAdditionalPayment(i.payments[0])
  initUnlockDuck(assetIdStr, addressStr)++validPayment
}

#New methods to support renting person and spots owner to be different
@Callable(i)
func lockDuckRenting(addressTakeSpotsFrom: String) = {
  if i.caller != getRentingAddress() then throw("3UDO: Renting only!") else
    let addressStr = i.caller.toString()
    let duckPayment = i.payments[0].value()
    lockDuckInternal(addressStr,addressTakeSpotsFrom,duckPayment)
}

#New methods to support renting person and spots owner to be different
@Callable(i)
func unlockDuckRenting(assetIdStr: String,addSpotsTowards: String) = {
  if i.caller != getRentingAddress() then throw("3UDO: Renting only!") else
    let addressStr = i.caller.toString()
    unstakeDuck(assetIdStr, addressStr,addSpotsTowards)
}

@Callable(i)
func unlockDuckOther(assetIdStr: String)={
  if i.caller != this then throw("3UDO: Admin only!") else
  let ownerKey = tryGetString(keyDuckOwner(assetIdStr.fromBase58String()))
  unstakeDuck(assetIdStr, ownerKey, ownerKey)


}

@Callable(i)
func unlockDuck(assetIdStr: String, ts: Int, allowed: Boolean, signature: String) = {
  #TODO: add method signature
  if allowed != true then throw("3UD: Not allowed to unlock the duck!")else
  let MSINHOUR = 3_600_000
  let currentTs = lastBlock.timestamp
  if currentTs > ts+MSINHOUR then throw("3UD: Outdated signature!") else
  let addressStr = i.caller.toString()
  let text = makeString([assetIdStr,ts.toString(),allowed.toString()],";")
  if (!sigVerify_8Kb(text.toBytes(), signature.fromBase58String(), getBackendPubKey())) then throw("3UD: Invalid proof from backend key"+getBackendPubKey().toBase58String()+" "+text) else 
  strict validPayment = checkAdditionalPayment(i.payments[0])

  unstakeDuck(assetIdStr, addressStr, addressStr)++validPayment
  
}
        
