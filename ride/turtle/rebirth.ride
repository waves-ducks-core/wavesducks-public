{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}

func tryGetInteger(key: String) = {
    match getInteger(this, key) {
        case b:Int => b
        case _ => 0
    }
}

func tryGetString(key: String) = {
    tryGetStringExternal(this,key)
}

func asInt(value: Any) = match value {
  case int: Int => int
  case string: String => throw("RAI: wrong type, expected: Int, but got: "+string)
  case _ => throw("RAI: wrong type, expected: Int")
}

func asBoolean(value: Any) = match value {
  case boolean: Boolean => boolean
  case _ => throw("FAB: wrong type, expected: Boolean")
}

func asString(value: Any) = match value {
  case s: String => s
  case s: Int => throw("wrong type, expected: String, got: Int")
  case s: Unit => throw("wrong type, expected: String, got: Unit")
  case _ => throw("wrong type, expected: String")
}

func staticKey_oracleAddress() = "static_oracleAddress"
func staticKey_eggAssetId() = "static_eggAssetId"
func staticKey_burnAddress() = "static_burnAddress"
func staticKey_extraFee() = "static_extraFee"
func staticKey_feeAggregator() = "static_feeAggregator"
func staticKey_turtleIncubatorAddress() = "static_turtleIncubatorAddress"
func staticKey_turtleBreederAddress() = "static_turtleBreederAddress"
func staticKey_spiceAssetId() = "static_spiceAssetId"
func staticKey_refContractAddress() = "static_refContractAddress"
func staticKey_couponsAddress() = "static_couponsAddress"
func staticKey_turtleStakingAddress() = "static_turtleStakingAddress"
func staticKey_duckStakingAddress() = "static_farmingAddress"
func staticKey_duckIncubatorAddress() = "static_incubatorAddress"
func staticKey_itemsAddress() = "static_itemsAddress"
func staticKey_turtleSpiceRebirthPrice() ="static_turtleSpiceRebirthPrice"
func staticKey_turtleWavesRebirthPrice() ="static_turtleWavesRebirthPrice"
func staticKey_turtleEggRebirthPrice() ="static_turtleEggRebirthPrice"


func getOracle() = Address(tryGetString(staticKey_oracleAddress()).fromBase58String())
func getEggAssetId() = tryGetStringExternal(getOracle(),staticKey_eggAssetId()).fromBase58String() #base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'
func getBurnAddress() = Address(tryGetStringExternal(getOracle(),staticKey_burnAddress()).fromBase58String())
func getFeeAggregator() = Address(tryGetStringExternal(getOracle(),staticKey_feeAggregator()).fromBase58String())
func getTurtleBreederAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_turtleBreederAddress()).fromBase58String()) #base58'3PDVuU45H7Eh5dmtNbnRNRStGwULA7NY6Hb'
func getTurtleIncubatorAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_turtleIncubatorAddress()).fromBase58String()) #base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
func getSpiceAssetId() = tryGetStringExternal(getOracle(),staticKey_spiceAssetId()).fromBase58String() #base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'
func getRefContractAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_refContractAddress()).fromBase58String()) #base58'3P8ejTkfRpz9WqCwCuihesNXU5k3zmFFfVe'
func getCouponsAddress() = Address(tryGetStringExternal(getOracle(),staticKey_couponsAddress()).fromBase58String()) 
func getTurtleStakingAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_turtleStakingAddress()).fromBase58String()) #base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
func getDuckStakingAddress() =  Address(tryGetStringExternal(getOracle(), staticKey_duckStakingAddress()).fromBase58String())
func getDuckIncubatorAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_duckIncubatorAddress()).fromBase58String()) #base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
func getItemsAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_itemsAddress()).fromBase58String())

func tryGetIntegerExternal(address: Address, key: String) = {
    match getInteger(address, key) {
        case b:Int => b
        case _ => throw("TR: Value not found in sc!")
    }

}

#TODO: PUT IN ORACLE!!!!!!!!!!!!!!!!!!!!!!!!!!
let spiceAmount = tryGetIntegerExternal(getOracle(),staticKey_turtleSpiceRebirthPrice()) #50_0000_0000 
let eggAmount = tryGetIntegerExternal(getOracle(),staticKey_turtleEggRebirthPrice()) #1_0000_0000
let wavesAmount = tryGetIntegerExternal(getOracle(),staticKey_turtleWavesRebirthPrice()) #2_0000_0000

let delayForHatching = 2

func checkRealTurtle(assetId: ByteVector) = {
  if (assetInfo(assetId).value().issuer == getTurtleBreederAddress() || assetInfo(assetId).value().issuer ==getTurtleIncubatorAddress()) then {
   true
  } else {
    throw("not valid NFT")
  }
}

func checkAdditionalPayment(payment: AttachedPayment)= {
  if isDefined(payment.assetId) then throw("RCAP: Please attach waves") else
  let feeAmount = getIntegerValue(getOracle(),staticKey_extraFee())
  if payment.amount != feeAmount then throw("RCAP: Please attach exactly "+feeAmount.toString()+" amount of wavelets") else
  [ScriptTransfer(getFeeAggregator(), feeAmount, unit)]

}

func getRandomNumber(options: Int, txId: ByteVector, hatchingFinishHeight: Int, offset: Int) = {
  let randomSeedBlock = blockInfoByHeight(hatchingFinishHeight-1).value()
  let randomHash = sha256(txId + randomSeedBlock.vrf.value())
  randomHash.toInt(offset*8) % options
}

func tryGetBoolean(key: String) = {
    match getBoolean(key) {
        case b:Boolean => b
        case _ => false
    }

}

func getRandomWin(tx: ByteVector, finishHeight: Int) = {
  let jackpotEnabled = tryGetBoolean("JACKPOT_ENABLED")
  let jackpotRandom = getRandomNumber(1000, tx, finishHeight, 1)
  if (jackpotRandom == 1 && jackpotEnabled) then { (jackpotRandom,"jackpot") } else 
    #Every % means 10 numbers
    let n = getRandomNumber(1000, tx, finishHeight, 0)
    let result = if (n<60) then { "incubator" } else
    if (n<130) then { "beach_R" } else 
    if (n<200) then { "beach_S" } else
    if (n<270) then { "beach_G" } else
    if (n<340) then { "beach_D" } else
    if (n<395) then { "perch_G" } else
    if (n<450) then { "perch_Y" } else
    if (n<505) then { "perch_R" } else
    if (n<560) then { "perch_B" } else
    if (n<620) then { "duck_incubator" } else
    if (n<640) then { "item!ART-FREEGENE" } else                
    if (n<680) then { "item!ART-FIRE_TAIL" } else    
    if (n<720) then { "item!ART-FIRE_SHIELD" } else
    if (n<920) then { "item!ART-FEED10" } else     
    { "item!ART-FEED100" }   

    (n,result)
}

func finishRebirthInternal(initTx: String, address: String, additionalPayment: AttachedPayment, double: Boolean) = {
  let finishBlock = tryGetInteger("address_" + address + "_initTx_" + initTx + "_finishBlock")
  let status = tryGetString("address_" + address + "_initTx_" + initTx + "_status")
  strict validPayment = checkAdditionalPayment(additionalPayment)
  strict recordAction = invoke(getCouponsAddress(),"recordAction",["REBIRTHTURTLE"],[])

  if (status != "open") then {
    throw("rebirth is finished or not open")
  } else {
    if (height < finishBlock) then {
      throw("you cannot finish rebirth, yet")
    } else {

      let output = getRandomWin(initTx.fromBase58String(), finishBlock)  
      let win = output._2
      let random = output._1

      let txId = initTx

      let result = if (win.indexOf("perch") != unit) then {
        let color = win.takeRight(1)
              strict call = if !double then  invoke(getDuckStakingAddress(), "addFreePerch", [address, color], [])
                                       else  strict first = invoke(getDuckStakingAddress(), "addFreePerch", [address, color], [])
                                             invoke(getDuckStakingAddress(), "addFreePerch", [address, color], [])

        [StringEntry("address_" + address + "_initTx_" + initTx + "_result", call.asString())]

      } else if (win.indexOf("beach") != unit) then {
        let color = win.takeRight(1)
        strict call = if !double then invoke(getTurtleStakingAddress(), "addFreeBeach", [address, color], [])
                                 else strict first = invoke(getTurtleStakingAddress(), "addFreeBeach", [address, color], [])
                                      invoke(getTurtleStakingAddress(), "addFreeBeach", [address, color], [])
        [StringEntry("address_" + address + "_initTx_" + initTx + "_result", call.asString())]

      } else if (win == "jackpot") then {
        strict call = invoke(getTurtleIncubatorAddress(), "issueJackpot", [address, txId, valueOrElse(getString("JACKPOT_NAME"),"WWWWXMAS")], []) 
        [StringEntry("address_" + address + "_initTx_" + initTx + "_result", call.asString())]

      } else if (win == "incubator") then {
        strict call = if !double then invoke(getTurtleIncubatorAddress(), "issueFreeTurtle", [address, txId], [])
                                 else strict first = invoke(getTurtleIncubatorAddress(), "issueFreeTurtle", [address, txId], [])
                                      invoke(getDuckIncubatorAddress(), "issueFreeDuckDefinedGenes", [address, txId,"ZZZZZZZZ"], [])
        [StringEntry("address_" + address + "_initTx_" + initTx + "_result", call.asString())]

      } else if (win == "duck_incubator") then {
        strict call = if !double then invoke(getDuckIncubatorAddress(), "issueFreeDuckDefinedGenes", [address, txId,"ZZZZZZZZ"], [])
                                 else strict first = invoke(getDuckIncubatorAddress(), "issueFreeDuckDefinedGenes", [address, txId,"ZZZZZZZZ"], [])
                                      invoke(getTurtleIncubatorAddress(), "issueFreeTurtle", [address, txId], [])

        [StringEntry("address_" + address + "_initTx_" + initTx + "_result", call.asString())]

      }else if (win.indexOf("item") !=unit) then {
        let itemName = win.split("!")[1]
        strict call = if !double then invoke(getItemsAddress(), "issueArtefactIndex", [itemName, address,0], [])
                                 else strict first = invoke(getItemsAddress(), "issueArtefactIndex", [itemName, address,0], [])
                                      invoke(getItemsAddress(), "issueArtefactIndex", [itemName, address,1], [])
        [StringEntry("address_" + address + "_initTx_" + initTx + "_result", call.asString())]

      }else{
        throw("RFB: Some error occured, please contact the admins!")
      }

      result ++ [
        StringEntry("address_" + address + "_initTx_" + initTx + "_win", win),
        StringEntry("address_" + address + "_initTx_" + initTx + "_status", "finish"),
        IntegerEntry("address_" + address + "_initTx_" + initTx + "_random",random)
      ]++validPayment
    }
  }
}

@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("RCU: admin only") else 
  [
    StringEntry("static_oracleAddress",oracle)
  ]

}

#Payment 0 = turtle
#payment 1 = waves
#payment 2 = spice
#payment 3 = egg/vegg
@Callable(i)
func initRebirth(refererAddress: String) = {
  let pmtTurtle = i.payments[0]
  let pmtWaves = i.payments[1]
  let pmtSpice = i.payments[2]


  let assetId = pmtTurtle.assetId.value()
  let initTx = i.transactionId.toBase58String()
  let address = i.caller.toString()
  if (pmtTurtle.amount != 1) then throw("NFT is not attached") else
  if (pmtWaves.amount != wavesAmount || pmtWaves.assetId != unit) then throw("Wavespayment is not attached or wrong!") else
  if (pmtSpice.amount != spiceAmount || pmtSpice.assetId != getSpiceAssetId()) then throw("SpicePayment is not attached or wrong!") else


  strict amountPaidByCoupons = invoke(getCouponsAddress(),"useCoupons",[eggAmount],[]).asInt()
  let leftToPay = eggAmount-amountPaidByCoupons
  strict topup = invoke(getTurtleStakingAddress(), "topUpReward",
        [], [AttachedPayment(getSpiceAssetId(), pmtSpice.amount)])

  strict payment = if leftToPay!=0 then {
    let pmtEgg = i.payments[3]
    let feePayment = pmtEgg.value()
    if (feePayment.assetId != getEggAssetId()) then throw("You need to attach EGG tokens as fee") else 
    if (feePayment.amount != leftToPay)  then throw("You need to attach the following amount of EGG tokens as fee: 0." + leftToPay.toString()) else
        let refererRewardForPerch = fraction(leftToPay, 5, 100)
        strict refCall = invoke(getRefContractAddress(), "refPayment",
        [refererAddress], [AttachedPayment(getEggAssetId(), refererRewardForPerch)]).asBoolean()

        let toBurn = if refCall then leftToPay-refererRewardForPerch else leftToPay

        strict burnCall = invoke(getBurnAddress(), "burnAttachedPayments", [],[AttachedPayment(getEggAssetId(),toBurn)])
        
        leftToPay
  } else 0
   
  strict realTurtle = checkRealTurtle(assetId)  
  [
    IntegerEntry("address_" + address + "_initTx_" + initTx + "_finishBlock", height+delayForHatching),
    StringEntry("address_" + address + "_initTx_" + initTx + "_status", "open"),
    StringEntry("address_" + address + "_initTx_" + initTx + "_assetId", assetId.toBase58String()),
    ScriptTransfer(getFeeAggregator(), pmtWaves.amount, unit)
  ]

  
}



@Callable(i)
func finishRebirth(initTx: String) = {
  finishRebirthInternal(initTx, i.caller.toString(),i.payments[0], false)
}

@Callable(i)
func finishRebirthDouble(initTx: String) = {
  #TODO CHECK IF ITEM IS ATTACHED, CHECK IT IN SC, AND THEN BURN ITEM
  if !(size(i.payments) == 2 && i.payments[0].amount==1) then throw("Invalid payment") else 
    let assetId = i.payments[0].assetId.value()
    strict boosterType = invoke(getItemsAddress(),"checkArtefactDetails",[assetId.toBase58String()],[]).asString()
    if boosterType == "ART-GIFT_DOUBL" then 
      [
        Burn(assetId,1)
      ]++
      finishRebirthInternal(initTx, i.caller.toString(),i.payments[1], true)
    else
      throw("Error! Wrong item attached to double rewards!")
}

