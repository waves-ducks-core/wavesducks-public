{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}

func tryGetString(key: String) = {
    tryGetStringExternal(this,key)
}
func getOracle() = Address(tryGetString("static_oracleAddress").fromBase58String())
func getCfMasterAddress() =  Address(tryGetStringExternal(getOracle(),"static_cfMasterAddress").fromBase58String())
func getBackendPubKey() = getStringValue(getOracle(),"static_backendPubKey").fromBase58String()
func getMaxDiff() = getIntegerValue(getOracle(),"static_maxProxyDiff")
func getTurtleIncubatorAddress() =  Address(tryGetStringExternal(getOracle(),"static_turtleIncubatorAddress").fromBase58String()) #base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
func getTurtleBreederAddress() =  Address(tryGetStringExternal(getOracle(),"static_turtleBreederAddress").fromBase58String())
func getItemsAddress() = Address(tryGetStringExternal(getOracle(),"static_itemsAddress").fromBase58String())

let kTotalLiquidity = "total_liquidity"
let kInitialized = "INITIALIZED"
let kLiquidityThreshold = "LIQUIDITY_THRESHOLD"
let kTotalShareTokens = "total_share_tokens"
let kShareAssetId = "SHARE_ASSET_ID"
let kIncubatorDapp = "INCUBATOR_DAPP"
let kBreederDapp = "BREEDER_DAPP"
let kFarmingDapp = "FARMING_DAPP"
let kMarketProxyDapp = "MARKETPLACE_PROXY_DAPP"
let kAuctionDapp = "AUCTION_DAPP"
let kLocked = "LOCKED"
let kTotalFarmingReward = "total_farming_reward"
let kCeoCollectedFee = "ceo_collected_fee"
let kCeoCollectedFeeOverall = "ceo_fee_overall"
let kToDistr = "to_distribute"

func getInt(key: String) = {
  match getInteger(this, key) {
      case b:Int => b
     case _ => 0
  }
}


func tryGetBooleanExternal(address:Address, key: String) = {
    match getBoolean(address, key) {
        case b:Boolean => b
        case _ => false
    }
}

func getBool(key: String) = {
  tryGetBooleanExternal(this, key)
}

func getBoolA(a: Address, key: String) = {
  match getBoolean(a, key) {
      case b:Boolean => b
      case _ => unit
  }
}

func tryGetIntegerExternal(address: Address, key: String) = {
    match getInteger(address, key) {
        case b:Int => b
        case _ => 0
    }

}

func getAuctionAddr() = {
  tryGetStringExternal(getCfMasterAddress(), kAuctionDapp)
}

func amountOrClear(amount: String) = {
  if (amount.contains("0")) then {""} else {amount}
}

func getAssetOrigin(generation: String) = {
  let incubatorAddress = tryGetStringExternal(getCfMasterAddress(), kIncubatorDapp)
  let breederAddress = tryGetStringExternal(getCfMasterAddress(), kBreederDapp)

  if (generation == "G") then {incubatorAddress.fromBase58String()} else {breederAddress.fromBase58String()}
}

func getAssetRarity(geno: String, generation: String) = {
  let quantity = getIntegerValue(Address(getAssetOrigin(generation)), "stats_"+geno+"_quantity")
  let power = pow(10000 / quantity, 4, 5, 1, 2, FLOOR)
  if (power > 0) then {power} else {2}
}

func asString(value: Any) = match value {
  case string: String => string
  case _ => throw("wrong type, expected: String")
}

func getAssetFarmingPower(assetId: ByteVector) = {
  let breederAddress = tryGetStringExternal(getCfMasterAddress(), kBreederDapp).fromBase58String()
  let incubatorAddress = tryGetStringExternal(getCfMasterAddress(), kIncubatorDapp).fromBase58String()
  
  if (assetInfo(assetId).value().issuer == Address(breederAddress) || assetInfo(assetId).value().issuer == Address(incubatorAddress)) then {
    let assetName = assetInfo(assetId).value().name
    let generation = assetName.takeRight(2).take(1)
    strict farmGen = invoke(Address(breederAddress),"getGenFromName",[assetName],[]).asString()
    getAssetRarity(farmGen, generation)
  } else {
    throw("MGAFP: _20")
  }
}

func getTurtleAssetFarmingPower(assetId: ByteVector) = {
  let breederAddress = getTurtleBreederAddress()
  let incubatorAddress = getTurtleIncubatorAddress()
  
  if (assetInfo(assetId).value().issuer == breederAddress || assetInfo(assetId).value().issuer == incubatorAddress) then {
   true
  } else {
    throw("MGTFP: _20")
  }
}

func getDuckMarketPrice(nftId: ByteVector) = {
  let rarity = getAssetFarmingPower(nftId)
  let breederAddress = tryGetStringExternal(getCfMasterAddress(), kBreederDapp).addressFromStringValue()
  let sterile = tryGetIntegerExternal(breederAddress, "asset_" + nftId.toBase58String() + "_children")
  let canBreedText = if sterile > 0 then "0" else "1"
  let val = getInteger(getCfMasterAddress(), "r-" + rarity.toString() + "-b-" + canBreedText)
  match val {
    case price: Int => {
      let minPrice = if (sterile > 0) then 2_00_000_000 * rarity else 180_00_000_000
      if (price < minPrice) then minPrice else price
    }
    case _ => throw("There is no price for such duck: " + "r-" + rarity.toString() + "-b-" + canBreedText)
  }
}

func getDuckIdByAuctionId(auctionId: String) = {
  let marketAddr = getAuctionAddr()
  tryGetStringExternal(marketAddr.addressFromStringValue(), "auction_" + auctionId + "_assetId")
}

func getBidAmount(auctionId: String, bidId: String) = {
  let marketAddr = getAuctionAddr()
  tryGetIntegerExternal(marketAddr.addressFromStringValue(), "auction_" + auctionId + "_bid_" + bidId + "_amount")
}


func checkDataGetPrice(ach: String, breed: String, gen: String, price:Int, rarity: String, ts: Int, signature: String, duckId: String)={
  if (price == 0) then throw("MCACS: No price calculated, so action not allowed! Please contact admin!") else
  let isDuck = rarity != "0" && gen != ""
  let isTurtle = rarity != "0"
  let text = if isDuck then  makeString([rarity,breed,ach,gen,price.toString(),ts.toString()], ";") else
             if isTurtle then makeString([rarity,breed,price.toString(),ts.toString()],";")  else makeString([gen,price.toString(),ts.toString()],";")
  let MSINHOUR = 3_600_000
  if (!sigVerify_8Kb(text.toBytes(), signature.fromBase58String(), getBackendPubKey())) then throw("MCACS: Invalid proof from backend key"+getBackendPubKey().toBase58String()+" "+text+" "+toString(isDuck)) else 
  let currentTs = lastBlock.timestamp
  if currentTs > ts+MSINHOUR then throw("MCACS: Outdated signature!") else
  if isDuck then
    let duckRarity = getAssetFarmingPower(duckId.fromBase58String())
    let diff = (duckRarity - parseIntValue(split(rarity,".")[0]))
    if -5> diff || diff > 5 then throw("MCACS: It seems not the correct price info was passed! "+toString(duckRarity)+" "+rarity+ " "+toString(diff)) else
    price
  else if isTurtle then
    if getTurtleAssetFarmingPower(duckId.fromBase58String()) == true then
      price
    else throw("MCACS: This does not seem a turtle!")
  else
    price
  
}

@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("BCO: admin only") else 
  [
    StringEntry("static_oracleAddress",oracle)
  ]

}

# params format
@Callable(i)
func callMarketplaceProxy(function: String, int1: Int, int2: Int, str1: String, str2: String, ach: Boolean, breed: Boolean, gen: String, price:Int, rarity: Int, ts: Int, signature: String) = {
  let auctionDappAddress = getAuctionAddr().addressFromStringValue()
  if (getBoolA(getCfMasterAddress(), "farm_" + i.caller.toString()) != true) then throw("_301=") else
  if (function == "initAuction") then {
    let asset = i.payments[0].value()
    let checkDataPrice = checkDataGetPrice( ach.toString(), breed.toString(), gen, price, rarity.toString(), ts, signature, asset.assetId.value().toBase58String())
    let calcPrice =  if tryGetBooleanExternal(getItemsAddress(),"direct_cosmetic_"+gen+"_sale") then min([tryGetIntegerExternal(getItemsAddress(),"direct_cosmetic_"+gen),checkDataPrice])
                        else checkDataPrice

    let maxPriceDiff = fraction(calcPrice, getMaxDiff(), 100)
    
    let initialPrice = int1
    let buyoutPrice = int2
    if ((initialPrice < (calcPrice - maxPriceDiff)) || buyoutPrice < initialPrice) then throw("Price is too low, avg price: " + calcPrice.toString() + ", min. price: " + (calcPrice - maxPriceDiff).toString() + ", your bid: " + initialPrice.toString()) else
    if (asset.amount.value() != 1) then throw("_103") else {
      strict initAuction = invoke(auctionDappAddress, "initAuction", [initialPrice, buyoutPrice, str1, str2], [AttachedPayment(asset.assetId.value(), 1)])
      [
        StringEntry("tx_" + i.transactionId.toBase58String(), asset.assetId.value().toBase58String())
      ]
    }




  } else if (function == "placeBid") then {
    let auctionId = str1
    let duckAssetId = getDuckIdByAuctionId(auctionId)
    let bidAmount = i.payments[0].value().amount.value()
    let duckMarketPrice = checkDataGetPrice( ach.toString(), breed.toString(), gen, price, rarity.toString(), ts, signature, duckAssetId)
    let maxPriceDiff = fraction(duckMarketPrice, getMaxDiff(), 100)
    if (bidAmount > (duckMarketPrice)) then throw("Price is too high, avg price: " + duckMarketPrice.toString() + ", max. price: " + (duckMarketPrice).toString() + ", your bid: " + bidAmount.toString()) else
    if (i.payments.size() != 1) then throw("_103") else {
      strict placeBid = invoke(auctionDappAddress, "placeBid", [auctionId], [AttachedPayment(value(i.payments[0]).assetId, bidAmount)])
      [
        StringEntry("tx_" + i.transactionId.toBase58String(), auctionId)
      ]
    }




  } else if (function == "acceptBid") then {
    if true then throw("MCACS: Accepting bids is disabled for Collective Farms!") else
    let auctionId = str1
    let bidId = str2
    let duckAssetId = getDuckIdByAuctionId(auctionId)
    let bidAmount = getBidAmount(auctionId, bidId)
    let duckMarketPrice = checkDataGetPrice( ach.toString(), breed.toString(), gen, price, rarity.toString(), ts, signature, duckAssetId)
    let maxPriceDiff = fraction(duckMarketPrice, getMaxDiff(), 100)
    if (bidAmount < (duckMarketPrice)) then throw("Price is too low, avg price: " + duckMarketPrice.toString() + ", min. price: " + (duckMarketPrice).toString() + ", your bid: " + bidAmount.toString()) else
    strict acceptBid = invoke(auctionDappAddress, "acceptBid", [auctionId, bidId], [])
    [
      StringEntry("tx_" + i.transactionId.toBase58String(), auctionId)
    ]




  } else if (function == "instantBuy") then {
    let auctionId = str1
    let duckAssetId = getDuckIdByAuctionId(auctionId)
    let bidAmount = i.payments[0].value().amount.value()
    let duckMarketPrice = checkDataGetPrice( ach.toString(), breed.toString(), gen, price, rarity.toString(), ts, signature, duckAssetId)
    let maxPrice =  if tryGetBooleanExternal(getItemsAddress(),"direct_cosmetic_"+gen+"_sale") then tryGetIntegerExternal(getItemsAddress(),"direct_cosmetic_"+gen)
                        else duckMarketPrice + fraction(duckMarketPrice, 15, 100)

    if (bidAmount > maxPrice) then throw("Price is too high, calc price: " + duckMarketPrice.toString() + ", max. price after item check: " + (maxPrice).toString() + ", your buy price: " + bidAmount.toString()) else
    if (i.payments.size() != 1) then throw("_103") else{
      strict instantBuy = invoke(auctionDappAddress, "instantBuy", [auctionId], [AttachedPayment(value(i.payments[0]).assetId, bidAmount)])
      [
        StringEntry("tx_" + i.transactionId.toBase58String(), auctionId)
      ]
    }




  } else if (function == "cancelBid") then {
    let auctionId = str1
    let bidId = str2
    strict acceptBid = invoke(auctionDappAddress, "cancelBid", [auctionId, bidId], [])
    [
      StringEntry("tx_" + i.transactionId.toBase58String(), auctionId)
    ]




  } else if (function == "cancelAuction") then {
    let auctionId = str1
    strict acceptBid = invoke(auctionDappAddress, "cancelAuction", [auctionId], [])
    [
      StringEntry("tx_" + i.transactionId.toBase58String(), auctionId)
    ]
  } else throw("_13")
}

