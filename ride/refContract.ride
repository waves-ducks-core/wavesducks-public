{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func staticKey_oracleAddress() = "static_oracleAddress"
func staticKey_eggAssetId() = "static_eggAssetId"
func staticKey_breederAddress() = "static_breederAddress"
func staticKey_incubatorAddress() = "static_incubatorAddress"
func staticKey_babyDuckAddress() = "static_babyDuckAddress"
func staticKey_farmingAddress() = "static_farmingAddress"
func staticKey_cfMasterAddress() = "static_cfMasterAddress"
func staticKey_huntAddress()= "static_huntAddress"
func staticKey_rebirthAddress() = "static_rebirthAddress"
func staticKey_turtleBreederAddress() = "static_turtleBreederAddress"
func staticKey_turtleIncubatorAddress() = "static_turtleIncubatorAddress"
func staticKey_turtleStakingAddress() = "static_turtleStakingAddress"
func staticKey_turtleRebirthAddress() = "static_turtleRebirthAddress"
func staticKey_capacityAddress() = "static_capacityAddress"

func tryGetBoolean(key: String) = {
    match getBoolean(this, key) {
        case b:Boolean => b
        case _ => false
    }
}

func tryGetInteger(key: String) = {
    match getInteger(this, key) {
        case b:Int => b
        case _ => 0
    }
}

func isValidAddress(address: String) = {
  match(addressFromString(address)) {
    case a: Address => true
    case _ => false
  }
}

func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}

func tryGetString(key: String) = {
    tryGetStringExternal(this,key)
}

func getOracle() = Address(tryGetString(staticKey_oracleAddress()).fromBase58String())
func getEggAssetId() = tryGetStringExternal(getOracle(),staticKey_eggAssetId()).fromBase58String()
func getBreederAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_breederAddress()).fromBase58String())
func getIncubatorAddress() = Address(tryGetStringExternal(getOracle(),staticKey_incubatorAddress()).fromBase58String())
func getBabyDuckAddress() = Address(tryGetStringExternal(getOracle(),staticKey_babyDuckAddress()).fromBase58String())
func getFarmingAddress() = Address(tryGetStringExternal(getOracle(),staticKey_farmingAddress()).fromBase58String())
func getCfMasterAddress() = Address(tryGetStringExternal(getOracle(),staticKey_cfMasterAddress()).fromBase58String())
func getHuntAddress() = Address(tryGetStringExternal(getOracle(),staticKey_huntAddress()).fromBase58String())
func getRebirthAddress() = Address(tryGetStringExternal(getOracle(),staticKey_rebirthAddress()).fromBase58String())
func getTurtleBreederAddress() = Address(tryGetStringExternal(getOracle(),staticKey_turtleBreederAddress()).fromBase58String())
func getTurtleIncubatorAddress() = Address(tryGetStringExternal(getOracle(),staticKey_turtleIncubatorAddress()).fromBase58String())
func getTurtleStakingAddress() = Address(tryGetStringExternal(getOracle(),staticKey_turtleStakingAddress()).fromBase58String())
func getTurtleRebirthAddress() = Address(tryGetStringExternal(getOracle(),staticKey_turtleRebirthAddress()).fromBase58String())
func getCapacityAddress() = Address(tryGetStringExternal(getOracle(),staticKey_capacityAddress()).fromBase58String()) 

func getTrustedAddress() = [getBreederAddress(),getBabyDuckAddress(),getFarmingAddress(),
                            getHuntAddress(),getRebirthAddress(),getTurtleBreederAddress(),getTurtleIncubatorAddress(),getTurtleStakingAddress(),
                            getTurtleRebirthAddress(),getCapacityAddress()]




func masterTryGetBoolean(key: String) = {
    match getBoolean(getCfMasterAddress(), key) {
        case b:Boolean => b
        case _ => false
    }
}

func isTestEnv()={
  tryGetBoolean("TESTENV")
}

@Callable(i)
func addRefKey(refererAddress: String, refererKey: String) = {
  if (i.caller != this) then {
    throw("admin only")
  } else {
    let refStateKey = "key_" + refererKey + "_refererAddress"
    if (tryGetString(refStateKey) == "") then {
      [
        StringEntry(refStateKey, refererAddress),
        StringEntry("address_" + refererAddress + "_refererKey_" + refererKey, refererKey)
      ]
    } else throw("The ref key \"" + refererKey + "\" is already registered")
  }
}

@Callable(i)
func whitelistAddress(refererAddress:String)={
  if i.caller != this then throw("RF: Only for admin!") else
  [
    BooleanEntry(refererAddress+"_whitelisted", true)
  ]
}

@Callable(i)
func refPayment(refererKey: String) = {
  let dao = "3PEwRcYNAUtoFvKpBhKoiwajnZfdoDR6h4h"
  #let sendFundsBack = ([ScriptTransfer(i.caller, i.payments[0].amount, i.payments[0].assetId)],false)
  let alreadySend = tryGetInteger("dao_refund")
  let sendFundsToDao = (
    [
      ScriptTransfer(dao.addressFromStringValue(), i.payments[0].amount, i.payments[0].assetId),
      IntegerEntry("dao_refund",alreadySend+i.payments[0].amount)
      ], true
  )
  let referalAddress = i.originCaller.toString()
  if (getTrustedAddress().indexOf(i.caller) == unit) then throw("RC: This method can be called only by farming and incubator dApps") else 
  if ((refererKey == "") && (tryGetString("address_" + referalAddress + "_referedBy") == "")) then sendFundsToDao else 
  if (masterTryGetBoolean("farm_"+referalAddress)) then sendFundsToDao else 

    let givenReferer = match getString(this, "key_" + refererKey + "_refererAddress") {
      case x: String => x  # if key was a real key
      case _ => refererKey  # if ket was an address
    }

    let refererAddress = match getString(this, "address_" + referalAddress + "_referedBy") {
      case x: String => x
      case _ => givenReferer
    } 

    let refAmount = i.payments[0].amount
    if (i.payments[0].assetId != getEggAssetId()) then throw("Don't try to cheat the system!") else
    if (tryGetBoolean(refererAddress+"_whitelisted")== false) then sendFundsToDao else
    if (refererAddress.addressFromString() == unit) then sendFundsToDao else 
      let refererAddressValue = refererAddress.addressFromStringValue() 
      let referalAddressValue = referalAddress.addressFromStringValue()
      let paymentForReferer = refAmount

      let refererEarnedReward = "address_" + refererAddress + "_earnedReward"
      let referalDeliveredReward = "referer_" + refererAddress + "_referal_" + referalAddress + "_deliveredReward"

      if (refererAddress == referalAddress) then sendFundsToDao else 
        ([
          StringEntry("address_" + referalAddress + "_referedBy", refererAddress), 
          IntegerEntry(refererEarnedReward, tryGetInteger(refererEarnedReward) + paymentForReferer),
          IntegerEntry(referalDeliveredReward, tryGetInteger(referalDeliveredReward) + paymentForReferer),
          IntegerEntry("referer_"+refererAddress+"_referal_"+referalAddress+"_amount", tryGetInteger("referer_"+refererAddress+"_referal_"+referalAddress+"_amount") + 1),
          ScriptTransfer(refererAddressValue, paymentForReferer, getEggAssetId())
        ],true)
      
    
  
}

@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("RCCO: admin only") else 
  [
    StringEntry(staticKey_oracleAddress(),oracle)

  ]

}

@Verifier(tx)
func verify() = {
  if isTestEnv() then 
      sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
  else
    let firstUser = base58'6TdaXEfhnjYquvPf3yV7MFxt2CbgFmaqsvGwkKfXtKi4'
    let secondUser = base58'E23yUg8eun5nXB1nZRDf7RTyRADKxQhGNXdpTYonEvtU'
    let thirdUser = base58'Ga8WEBTPXbHuoXRD355mQ6ms8PsM2RFYKeA1mEP32CFe'

    let firstUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], firstUser)) then 1
        else 0
    let secondUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], secondUser)) then 1
        else 0
    let thirdUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], thirdUser)) then 1
        else 0
    let signaturesCount = firstUserSigned + secondUserSigned + thirdUserSigned

    match (tx) {
        case _ => signaturesCount >= 2
    }
}
        
