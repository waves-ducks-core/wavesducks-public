{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}

func tryGetBoolean(key: String) = {
    match getBoolean(key) {
        case b:Boolean => b
        case _ => false
    }

}

func tryGetString(key: String) = {
    tryGetStringExternal(this,key)
}

func tryGetInteger(key: String) = {
    match getInteger(this, key) {
        case b:Int => b
        case _ => 0
    }
}

func getOracle() = Address(tryGetString("static_oracleAddress").fromBase58String())

#SC THAT CAN USE COUPONS
func staticKey_turtleStakingAddress() = "static_turtleStakingAddress"
func staticKey_turtleRebirthAddress() = "static_turtleRebirthAddress"
func staticKey_ropeAddress() = "static_ropeAddress"
func staticKey_levelSystemAddress() = "static_levelSystemAddress"
func staticKey_spiceAssetId() = "static_spiceAssetId"
func staticKey_marketplace() = "static_marketplaceAddress"
func staticKey_capacityAddress() = "static_capacityAddress"
func staticKey_veggFarmingAddress() = "static_veggFarmingAddress"

func getRebirthAddress() =  Address(tryGetStringExternal(getOracle(),"static_rebirthAddress").fromBase58String()) #base58'3PCC6fVHNa6289DTDmcUo3RuLaFmteZZsmQ'
func getIncubatorAddress() =  Address(tryGetStringExternal(getOracle(),"static_incubatorAddress").fromBase58String()) #base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
func getFarmingAddress() =  Address(tryGetStringExternal(getOracle(),"static_farmingAddress").fromBase58String())
func getGameDappAddress() = Address(tryGetStringExternal(getOracle(),"static_gameDappAddress").fromBase58String())
func getCapacityAddress() = Address(tryGetStringExternal(getOracle(),staticKey_capacityAddress()).fromBase58String()) 
func getBurnAddress() = Address(tryGetStringExternal(getOracle(),"static_burnAddress").fromBase58String())
func getBabyduckAddress() = Address(tryGetStringExternal(getOracle(),"static_babyDuckAddress").fromBase58String())
func getBreedingAddress() = Address(tryGetStringExternal(getOracle(),"static_breederAddress").fromBase58String())
func getMasterAddress() = Address(tryGetStringExternal(getOracle(),"static_cfMasterAddress").fromBase58String())
func getTurtleStakingAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_turtleStakingAddress()).fromBase58String()) #base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
func getTurtleRebirthAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_turtleRebirthAddress()).fromBase58String()) #base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
func getRopeAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_ropeAddress()).fromBase58String()) #base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
func getSpiceAssetId() = tryGetStringExternal(getOracle(),staticKey_spiceAssetId()).fromBase58String() #base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'
func getLevelSystemAddress() = Address(tryGetStringExternal(getOracle(),staticKey_levelSystemAddress()).fromBase58String())
func getMarketPlaceAddress() = Address(tryGetStringExternal(getOracle(),staticKey_marketplace()).fromBase58String())
func getVeggFarmingAddress() = Address(tryGetStringExternal(getOracle(),staticKey_veggFarmingAddress()).fromBase58String())


let wAccPKey = valueOrErrorMessage(getString(getOracle(),"static_warsPKey"),"static_warsPKey not defined").fromBase58String()

let scCanUseCoupons = [ getRebirthAddress(),getIncubatorAddress(),getFarmingAddress(),
                        getGameDappAddress(), getBabyduckAddress(),getBreedingAddress(), getTurtleStakingAddress(),
                        getTurtleRebirthAddress(),getRopeAddress(),getLevelSystemAddress(),getMarketPlaceAddress(),
                        getCapacityAddress(),this]

func couponsUserSpend(user:String) = user+"_spend"
func couponsUserActive(user:String) = user+"_active"
func couponsUserActiveOld(user:String) = couponsUserActive(user)+"_old"
func couponsSpendOnSc(sc:String) = sc+"_spend_by_using"
func actionPerAddressPerUserPerDay(user:String,action:String,dappAddress:String, day:String) = dappAddress+"_"+action+"_"+user+"_"+day+"_actions"
func actionPerAddressPerUserLastCheckDay(user:String,action:String) = action+"_"+user+"_actions_check_day"
func actionPerAddressPerUserAmountInARow(user:String,action:String) = action+"_"+user+"_actions_amount_in_row"
func userExperience(user:String) = user+"_experience"


func addCouponsInternal(user:String,amount:Int)={
    let keyOld = couponsUserActiveOld(user)
    let key = couponsUserActive(user)
    let couponsOld = tryGetInteger(key)
    let coupons = couponsOld+amount
    [
        IntegerEntry(keyOld,couponsOld),
        IntegerEntry(key,coupons)
    ]
}

#First day ever! Saturday, September 23, 2023 0:00:00
let startTsMs = 1695427200000
func calculateDaysSinceStart()={
  let diff = lastBlock.timestamp-startTsMs
  let daysPassed = diff/ (86400 *1000)
  daysPassed
}

func hasDoneTask7Days(day: Int,address: String, actionName:String, rewardAmount:Int, rewardAmountWeekly:Int)={
    let userExperienceKey = userExperience(address)
    let userExpTilldate = tryGetInteger(userExperienceKey)

    let checkDayKey = actionPerAddressPerUserLastCheckDay(address,actionName)
    let daysInRowKey = actionPerAddressPerUserAmountInARow(address,actionName)
    let lastCheckDay = tryGetInteger(checkDayKey)
    let daysInRow = tryGetInteger(daysInRowKey)
    let daysInRowUpdate = if lastCheckDay==day-1 then daysInRow+1 else if lastCheckDay<day-1 then 1 else 0
    let lastCheckDayUpdate = day
    let reward = if daysInRowUpdate == 7 then [
        ScriptTransfer(addressFromStringValue(address),rewardAmountWeekly,getSpiceAssetId()),
        IntegerEntry(daysInRowKey,0)
        ] else [
            IntegerEntry(daysInRowKey,daysInRowUpdate)
        ]
    
    [
        IntegerEntry(checkDayKey,lastCheckDayUpdate),
        ScriptTransfer(addressFromStringValue(address),rewardAmount,getSpiceAssetId()),
        IntegerEntry(userExperienceKey,userExpTilldate+1)
    ]++reward
}

func payAction(actionName:String, userAddress: Address, amount: Int, day:Int)={
    let composedKey = if tryGetBoolean("TASK_"+actionName+"_EVERY") then actionName else actionName+"_"+amount.toString()
    if tryGetBoolean("TASK_"+composedKey) then
        hasDoneTask7Days(day,userAddress.toString(),composedKey,tryGetInteger("TASK_"+composedKey+"_REWARD_DAILY"),tryGetInteger("TASK_"+composedKey+"_REWARD_WEEKLY"))
    else []
}

func recordActionInternal(actionName:String, addressCaller: Address, address:Address)= {
    if !containsElement(scCanUseCoupons, addressCaller) then throw("CRA: Only certain smart contracts can use this reward module!") else #prevents outsider to implement our rewards

        let day = calculateDaysSinceStart()
        let actionKey = actionPerAddressPerUserPerDay(address.toString(),actionName,addressCaller.toString(),day.toString())
        let totalActions = tryGetInteger(actionKey)+1
        [
            IntegerEntry(actionKey,totalActions)
        ]++payAction(actionName,address,totalActions, day)
}

@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("CCO: admin only") else 
  [
    StringEntry("static_oracleAddress",oracle)
  ]

}

@Callable(i)
func addCoupons(user:String,amount:Int) = {
    if i.caller != this && i.callerPublicKey != wAccPKey then throw("CAC: admin only") else 
    if amount >= 1000_0000 then 
        recordActionInternal("VEGG10000000",this,addressFromStringValue(user))++addCouponsInternal(user,amount)
    else if amount >= 50_0000 then
        recordActionInternal("VEGG500000",this,addressFromStringValue(user))++addCouponsInternal(user,amount)
    else
        addCouponsInternal(user,amount)

}

@Callable(i)
func addCouponsFarming(user:String,amount:Int) = {
    if i.caller != getVeggFarmingAddress() then throw("Method only for farming sc!") else
        addCouponsInternal(user,amount)

}

@Callable(i)
func addCouponsBatch(batch:String) = {
    if i.caller != this && i.callerPublicKey != wAccPKey then throw("CAC: admin only") else
    let couponsList = batch.split(";")
    func handleCoupon(acc: List[IntegerEntry], coupon: String) = {
        let splitArray = split(coupon,":")
        let user = splitArray[0]
        let amount = parseIntValue(splitArray[1])
        strict burnCall = invoke(getBurnAddress(), "burnByInvoke", [amount],[])
        if amount >= 1000_0000 then 
            acc++recordActionInternal("VEGG10000000",this,addressFromStringValue(user))++addCouponsInternal(user,amount)
        else if amount >= 50_0000 then
            acc++recordActionInternal("VEGG500000",this,addressFromStringValue(user))++addCouponsInternal(user,amount)
        else
            acc++addCouponsInternal(user,amount)

    }
    FOLD<20>(couponsList, [], handleCoupon)
    
}

@Callable(i)
func CFRefund(recipient: String,amount: Int)={
    #Get connected CF address (can be faked)
    let cfAddress = getStringValue(i.caller,"CF_ADDRESS")
    let key = "f_"+cfAddress+"_stake_address"
    #Get connected stake address with a CF address, can not be faked since it's pulled from masterkey
    let stakeAddress = getStringValue(getMasterAddress(),key)
    #Making sure that stakeaddress and invoker are the same and therefor valid
    if stakeAddress != i.caller.toString() then throw("CCR: This is something fishy going on!") else
    addCouponsInternal(recipient,amount)

}



@Callable(i)
func useCoupons(amountTryingToPay:Int)= {
    let invokingSc = i.caller
    if amountTryingToPay < 0  then throw("CUC: Only positive amount of money can be paid!") else
    if !containsElement(scCanUseCoupons, invokingSc) then throw("CUC: Only certain smart contracts can use this coupon module!") else #prevents outsider to implement our coupons
    let user = i.originCaller.toString()
    let keyActive = couponsUserActive(user)
    let availableCoupons = tryGetInteger(keyActive)
    if availableCoupons < 0 then throw("CUC: Get rekt!") else
    let leftToPay = if amountTryingToPay > availableCoupons then amountTryingToPay-availableCoupons else 0
    let amountPaid = amountTryingToPay-leftToPay
    let availableCouponsLeft = availableCoupons-amountPaid
    if availableCouponsLeft < 0 then throw("CUC: You try to overspend!") else

    let keySpend = couponsUserSpend(user)
    let keyOld = couponsUserActiveOld(user)
    let keySpendSc = couponsSpendOnSc(i.caller.toString())


    let totalSpend = tryGetInteger(keySpend)+amountPaid
    let totalSpendSc = tryGetInteger(keySpendSc)+amountPaid
    (
        [
            IntegerEntry(keySpend,totalSpend),
            IntegerEntry(keyOld,availableCoupons),
            IntegerEntry(keyActive,availableCouponsLeft),
            IntegerEntry(keySpendSc,totalSpendSc)
        ],
        amountPaid #Amount paid is the amount a user paid in coupons, so we can reduce this from the actual payment.
    )
}


@Callable(i)
func recordAction(actionName:String)= {
    recordActionInternal(actionName,i.caller,i.originCaller)

}