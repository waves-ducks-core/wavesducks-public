{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

#payment;
#eggId;price;distance + signature
#distance below 1km => check it
#eggId => only onique
func staticKey_oracleAddress() = "static_oracleAddress"
func staticKey_feeAggregator() = "static_feeAggregator"
func staticKey_eggAssetId() = "static_eggAssetId"
func staticKey_backendPubKey() = "static_backendPubKey"
func staticKey_refContractAddress() = "static_refContractAddress"
func staticKey_burnAddress() ="static_burnAddress"
func staticKey_couponsAddress() = "static_couponsAddress"
func staticKey_itemsAddress() = "static_itemsAddress"
func staticKey_extraFee() = "static_extraFee"

func eggIdKey(eggId: String, user: String) = "eggId_"+eggId+"_"+user
func boosterIdKey(type: String, user: String, height: Int) = "booster_"+type+"_"+user+"_"+height.toString()

func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}

func tryGetString(key: String) = {
    tryGetStringExternal(this,key)
}

func getOracle() = Address(tryGetString(staticKey_oracleAddress()).fromBase58String())
func getEggAssetId() = tryGetStringExternal(getOracle(),staticKey_eggAssetId()).fromBase58String()
func getBackendPubKey() = getStringValue(getOracle(),staticKey_backendPubKey()).fromBase58String()
func getFeeAggregator() = Address(tryGetStringExternal(getOracle(),staticKey_feeAggregator()).fromBase58String())
func getRefContractAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_refContractAddress()).fromBase58String()) #base58'3P8ejTkfRpz9WqCwCuihesNXU5k3zmFFfVe'
func getBurnAddress() = Address(tryGetStringExternal(getOracle(),staticKey_burnAddress()).fromBase58String())
func getCouponsAddress() = Address(tryGetStringExternal(getOracle(),staticKey_couponsAddress()).fromBase58String()) 
func getItemsAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_itemsAddress()).fromBase58String())


func getBackendProof(eggId: String, price: Int, distance: Int) = {
  makeString([eggId, price.toString(), distance.toString()], ";")
}

func checkAdditionalPayment(payment: AttachedPayment, amount: Int)= {
  if isDefined(payment.assetId) then throw("RCAP: Please attach waves") else
  if payment.amount != amount then throw("RCAP: Please attach exactly "+amount.toString()+" amount of wavelets") else
  [ScriptTransfer(getFeeAggregator(), amount, unit)]

}

func asBoolean(value: Any) = match value {
  case boolean: Boolean => boolean
  case _ => throw("TI: wrong type, expected: Boolean")
}

func asInt(value: Any) = match value {
  case int: Int => int
  case _ => throw("FAI: wrong type, expected: Int")
}

func asString(value: Any) = match value {
  case string: String => string
  case _ => throw("wrong type, expected: String")
}

@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("RCO: admin only") else 
  [
    StringEntry(staticKey_oracleAddress(),oracle)
  ]

}

@Callable(i)
func buyRope(eggId: String, price: Int, distance: Int, backendSignature: String)={
  throw("Deprecated method! Please use buyRopeInverted")
}

@Callable(i)
func useBooster()={
  strict validPayment = checkAdditionalPayment(i.payments[0],getIntegerValue(getOracle(),staticKey_extraFee()))
  if !(size(i.payments) == 2 && i.payments[1].amount==1) then throw("Invalid payment") else 
  let assetId = i.payments[1].assetId.value()
  strict boosterType = invoke(getItemsAddress(),"checkArtefactDetails",[assetId.toBase58String()],[]).asString()
  [
      Burn(assetId,1),
      StringEntry(boosterIdKey(boosterType, i.caller.toString(),height),assetId.toBase58String())
  ]++validPayment

}


@Callable(i)
func buyRopeInverted(eggId: String, price: Int, distance: Int, backendSignature: String)={

  let addressString = i.caller.toString()
  let backendProof = getBackendProof(eggId, price, distance)
  let exists = tryGetString(eggIdKey(eggId, i.originCaller.toString()))
  let halfPrice = price/2
  strict validPayment = checkAdditionalPayment(i.payments[0],price)
  if (!sigVerify_8Kb(backendProof.toBytes(), backendSignature.fromBase58String(), getBackendPubKey())) then throw("RBR: Invalid proof from backend") else
    if distance > 1200 then throw("RBR: You can only maximum boost 1200 meters distance!") else
    let leftToPay = if i.originCaller==i.caller then {
          strict amountPaidByCoupons = invoke(getCouponsAddress(),"useCoupons",[halfPrice],[]).asInt()
          halfPrice-amountPaidByCoupons
        }else {
            halfPrice
        }
    
      strict refund = if leftToPay!=0 then {
        let firstPayment = i.payments[1].value()

        if (firstPayment.assetId != getEggAssetId()) then throw("RBR: You can attach only EGG tokens with the following asset id: " + getEggAssetId().toBase58String()) else 
        if (firstPayment.amount < leftToPay) then throw("RBR: To rope a egg you currently need the following amount of EGGlets: " + leftToPay.toString()+ " "+i.caller.toString()) else
        let refererRewardForbeach = 0 
        #fraction(leftToPay, 5, 100)
        #strict refCall = invoke(getRefContractAddress(), "refPayment",
        #[refererAddress], [AttachedPayment(getEggAssetId(), refererRewardForbeach)]).asBoolean()

        #let toBurn = if refCall then leftToPay-refererRewardForbeach else leftToPay
        let toBurn = leftToPay

        strict burnCall = invoke(getBurnAddress(), "burnAttachedPayments", [],[AttachedPayment(getEggAssetId(),toBurn)])
        
        [ScriptTransfer(i.caller, i.payments[1].amount - leftToPay, getEggAssetId())]
      }else []

      strict recordAction = invoke(getCouponsAddress(),"recordAction",["ROPE"],[])

    if exists != "" then throw("RBR: Rope was already bought for this egg by this user!") else
    [
        StringEntry(eggIdKey(eggId, i.originCaller.toString()),price.toString()+";"+distance.toString())
    ]++validPayment++refund
}