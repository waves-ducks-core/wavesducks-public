{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let Scale = 100000000

func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}

func tryGetString(key: String) = {
    tryGetStringExternal(this,key)
}

func staticKey_refContractAddress() = "static_refContractAddress"
let  keyGlobalLastInterest = "global_lastCheck_interest"
func staticKey_oracleAddress() = "static_oracleAddress"
func staticKey_eggAssetId() = "static_eggAssetId"
func staticKey_felineIncubatorAddress() = "static_felineIncubatorAddress"
func staticKey_felineBreederAddress() = "static_felineBreederAddress"
func staticKey_accBoosterAddress() = "static_accBoosterAddress"
func staticKey_couponsAddress() = "static_couponsAddress"
func staticKey_burnAddress() = "static_burnAddress"
func staticKey_extraFee() = "static_extraFee"
func staticKey_feeAggregator() = "static_feeAggregator"
let keyGlobalEarned =  "global_earnings"
func staticKey_perchFee() = "static_felinePerchFee"
func totalStakedKey() = "total_staked"
func staticKey_peteAssetId() = "static_peteAssetId"
func staticKey_peteDapp() = "static_peteDappAddress"
func staticKey_felineRebirthAddress() = "static_felineRebirthAddress"

func getOracle() = Address(tryGetString(staticKey_oracleAddress()).fromBase58String())
func getEggAssetId() = tryGetStringExternal(getOracle(),staticKey_eggAssetId()).fromBase58String() #base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'
func getIncubatorAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_felineIncubatorAddress()).fromBase58String()) #base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
func getBreederAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_felineBreederAddress()).fromBase58String()) #base58'3PDVuU45H7Eh5dmtNbnRNRStGwULA7NY6Hb'
func getAccBoosterAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_accBoosterAddress()).fromBase58String())
func getCouponsAddress() = Address(tryGetStringExternal(getOracle(),staticKey_couponsAddress()).fromBase58String()) 
func getBurnAddress() = Address(tryGetStringExternal(getOracle(),staticKey_burnAddress()).fromBase58String())
func getFeeAggregator() = Address(tryGetStringExternal(getOracle(),staticKey_feeAggregator()).fromBase58String())
func getRefContractAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_refContractAddress()).fromBase58String()) #base58'3P8ejTkfRpz9WqCwCuihesNXU5k3zmFFfVe'
func getPeteAssetId() = tryGetStringExternal(getOracle(),staticKey_peteAssetId()).fromBase58String() #base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'
func getPeteDappAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_peteDapp()).fromBase58String()) #base58'3P8ejTkfRpz9WqCwCuihesNXU5k3zmFFfVe'
func getFelineRebirthAddress() = Address(tryGetStringExternal(getOracle(),staticKey_felineRebirthAddress()).fromBase58String())

func keyLastCheckInterest(address: String, asset: String) =  "address_"+address+"_asset_"+asset+"_lastCheckInterest"
func assetFarmingPower(address: String, asset: String) = "address_"+address+"_asset_"+asset+"_farmingPower"
func rewardClaimedKey(address: String, asset: String) = address +"_asset_"+asset + "_claimed"
func totalStakedUserKey(address:String) = "total_staked_"+address
let stakeId = tryGetString("last_stake_id")

let RefererReward = 5 #percentage
func checkAdditionalPayment(payment: AttachedPayment)= {
  if isDefined(payment.assetId) then throw("FCAP: Please attach waves") else
  let feeAmount = getIntegerValue(getOracle(),staticKey_extraFee())
  if payment.amount != feeAmount then throw("FCAP: Please attach exactly "+feeAmount.toString()+" amount of wavelets") else
  [ScriptTransfer(getFeeAggregator(), feeAmount, unit)]

}

func tryGetInteger(key: String) = {
    match getInteger(this, key) {
        case b:Int => b
        case _ => 0
    }
}

func asInt(value: Any) = match value {
  case int: Int => int
  case _ => throw("FAI: wrong type, expected: Int")
}

func asIntTuple(value: Any) = match value {
  case int: (Int,Int) => int
  case _ => throw("FAI: wrong type, expected: (Int,Int)")
}

func handleStakingTopUp (totalAmount: Int) = {
    let team = totalAmount/10
    let compoundAmount = (totalAmount-team)/2
    let payoutAmount = totalAmount-compoundAmount-team
    let currentInterest = tryGetInteger(keyGlobalLastInterest)
    let totalStakedAmount = tryGetInteger(totalStakedKey())
    let interestDelta = if (totalStakedAmount > 0)
        then fraction(payoutAmount, Scale, totalStakedAmount)
        else 0
    strict invokeRes = invoke(getPeteDappAddress(), "stake", [],[AttachedPayment(getPeteAssetId(),compoundAmount)])
    [
      IntegerEntry(keyGlobalEarned, (tryGetInteger(keyGlobalEarned) + payoutAmount)), 
      IntegerEntry(keyGlobalLastInterest, (currentInterest + interestDelta)),
      IntegerEntry("global_PETE_balance",tryGetInteger("global_PETE_balance")+compoundAmount),
      ScriptTransfer(getFeeAggregator(), team, getPeteAssetId())
      
    ]
      
}


func asString(value: Any) = match value {
  case string: String => string
  case _ => throw("FAS: wrong type, expected: String")
}

func tryGetBoolean(key: String) = {
    match getBoolean(this, key) {
        case b:Boolean => b
        case _ => false
    }
}

func tryGetBooleanExternal(address:Address, key: String) = {
    match getBoolean(address, key) {
        case b:Boolean => b
        case _ => false
    }
}


func getAssetOrigin(generation: String) = {
  if (generation == "G") then {getIncubatorAddress()} else {getBreederAddress()}
}

func getAssetRarity(genotype: String, generation: String) = {
  let quantity = valueOrErrorMessage(getInteger(getAssetOrigin(generation), "stats_"+genotype+"_quantity"),"stats_"+genotype+"_quantity not found")
  let power = pow(10000 / quantity, 4, 5, 1, 2, FLOOR)
  if (power > 0) then {power} else {2}
}

func getAssetRarityComplete(isJackpot: Boolean, assetName: String)={
  let rarity = if isJackpot then 100 else{
      
      let generation = assetName.takeRight(2).take(1)
      strict farmGen = invoke(getBreederAddress(),"getGenFromName",[assetName],[]).asString()

      getAssetRarity(farmGen, generation)
    }
  rarity
}

func updateFarmingPower(address: String, asset:String) ={
  let totalStaked = tryGetInteger(totalStakedKey())
  let totalStakedUser = tryGetInteger(totalStakedUserKey(address))
  let currentFP = tryGetInteger(assetFarmingPower(address,asset))
  let newFP = invoke(this,"calculateFarmPower",[asset, address],[]).asIntTuple()
  if currentFP != 0 then
  [
      IntegerEntry(totalStakedKey(),totalStaked-currentFP+newFP._1),
      IntegerEntry(totalStakedUserKey(address),totalStakedUser-currentFP+newFP._1),
      IntegerEntry(assetFarmingPower(address,asset),newFP._1)
  ] else []
}

func claimStakingResult (address: String, asset: String, recalc: Boolean) = {
    let currentInterest = tryGetInteger(keyGlobalLastInterest)
    let lastCheckInterest = tryGetInteger(keyLastCheckInterest(address, asset))
    let stakedAmount = tryGetInteger(assetFarmingPower(address, asset))
    strict fpUpdate = if recalc then updateFarmingPower(address, asset) else []
    let reward = if (lastCheckInterest > 0)
        then fraction((currentInterest - lastCheckInterest), stakedAmount, Scale)
        else 0

      ([
        ScriptTransfer(addressFromStringValue(address), reward , getPeteAssetId()),
        IntegerEntry(keyLastCheckInterest(address, asset), currentInterest), 
        IntegerEntry(rewardClaimedKey(address, asset), (tryGetInteger(rewardClaimedKey(address,asset))) + reward)
      ]++fpUpdate, reward)
    }

func asBoolean(value: Any) = match value {
  case boolean: Boolean => boolean
  case _ => throw("FAB: wrong type, expected: Boolean")
}

func calculatePerchPrice(address: String)= {
  let hasArtefactStaked = tryGetStringExternal(getAccBoosterAddress(),"ART-XMISTL_" + address + "_owner")
  let perchPrice = getIntegerValue(getOracle(),staticKey_perchFee())
  if hasArtefactStaked == ""
  then
    perchPrice
  else
    perchPrice/10*9

}


#TODO: count userfarmingboosts, add in multiplier for rarity!
@Callable(i)
func calculateFarmPower(assetId:String, bonusAddress: String)={
  if !(assetInfo(assetId.fromBase58String()).value().issuer == getBreederAddress() 
      ||assetInfo(assetId.fromBase58String()).value().issuer == getIncubatorAddress()) then throw("This does not seem like a valid Duck!") else
  let assetName = assetInfo(assetId.fromBase58String()).value().name
  let gen = assetName.takeRight(1)
  let isJackpot = assetName.takeRight(1) == "U"
  #TODO: add bonusses to the rarity
  let rarity = getAssetRarityComplete(isJackpot,assetName)

  let genotype = assetName.drop(5).dropRight(3).split("")
  func uniqueArrayFilter(accum: List[String], nextGen: String) =
        if !containsElement(accum,nextGen) then accum:+nextGen else accum
  let uniqueList = FOLD<8>(genotype, [], uniqueArrayFilter)
  let totalGenes = if gen == "U" then 8 else size(uniqueList)

  let power =  pow(15,1,totalGenes,0,2,DOWN)

  #3 months = 90 days = 1%/day roughly
  let multiplier = (height-3750000)*100/(60*24*30*3)
  #TODO make this percentage multiplier
  let basePower = tryGetInteger(assetId+"_basePower")
  let finalPower = if basePower > 0  then basePower else power*multiplier/100
  let finalPowerRarity = finalPower*rarity/100
  strict farmBoost = 0
  #Recalculate bonusses every claim
  let finalPowerRarityBoost = finalPowerRarity+finalPowerRarity*farmBoost/100
  ([
  ],(finalPowerRarityBoost,finalPower))

}

@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("FCO: admin only") else 
  [
    StringEntry(staticKey_oracleAddress(),oracle)
  ]

}

@Callable(i)
func buyPerch(colorI: String, refererAddress: String) = {
    strict validPayment = checkAdditionalPayment(i.payments[0])
    let color = if colorI == "U" then "B" else colorI
    if (["A", "B", "C", "D"].indexOf(color).value() < 0) then {
      throw("you need to set color properly")
    } else {
      let exactPrice = calculatePerchPrice(i.caller.toString())
        let leftToPay = if i.originCaller==i.caller then {
          strict amountPaidByCoupons = invoke(getCouponsAddress(),"useCoupons",[exactPrice],[]).asInt()
          exactPrice-amountPaidByCoupons
        }else {
            exactPrice
        }
        strict payment = if leftToPay!=0 then {
        let firstPayment = if size(i.payments) == 2 then  i.payments[1].value() else  i.payments[0].value()

        if (firstPayment.assetId != getEggAssetId()) then throw("FBP: You can attach only EGG tokens with the following asset id: " + getEggAssetId().toBase58String()) else 
        if (firstPayment.amount != leftToPay) then throw("FBP: To buy a perch you currently need the following amount of EGGlets: " + leftToPay.toString()+ " "+i.caller.toString()) else
        let refererRewardForPerch = fraction(leftToPay, 5, 100)
        strict refCall = invoke(getRefContractAddress(), "refPayment",
        [refererAddress], [AttachedPayment(getEggAssetId(), refererRewardForPerch)]).asBoolean()

        let toBurn = if refCall then leftToPay-refererRewardForPerch else leftToPay
        strict burnCall = invoke(getBurnAddress(), "burnAttachedPayments", [],[AttachedPayment(getEggAssetId(),toBurn)])
            leftToPay
      }else 0
      

      let perchAmountKey = "address_" + i.caller.toString() + "_perchesAvailable_" + color
      let perchAmount = tryGetInteger(perchAmountKey)

      [
        IntegerEntry(perchAmountKey, perchAmount + 1)
      ]++validPayment
      
    }
  
}

@Callable(i)
func addFreePerch(address: String, color: String, amount: Int) = {
  if (["A", "B", "C", "D"].indexOf(color).value() < 0) then {
    throw("you need to set color properly")
  } else if (i.caller != this && i.caller != getFelineRebirthAddress() ) then {
    throw("rebirth and admin only")
  } else {
    let perchAmountKey = "address_" + address + "_perchesAvailable_" + color
    let perchAmount = tryGetInteger(perchAmountKey)
    ([
      IntegerEntry(perchAmountKey, perchAmount + amount)
    ], "")
  }
}


@Callable(i)
func stakeNFT(jColor: String) = {
  #if true then throw("Staking is disabled") else
  strict validPayment = checkAdditionalPayment(i.payments[0])
  let pmt = i.payments[1].value()
  let assetId = pmt.assetId.value()
  let assetName = assetInfo(assetId).value().name.value()
  let isJackpot = assetName.takeRight(1) == "U"
  let address = i.caller.toString()
  let perchAddress =  address
  let color = if isJackpot then jColor else assetName.takeRight(1)
  
  strict perches = 
    let availablePerches = tryGetInteger("address_"+perchAddress+"_perchesAvailable_"+color)
    if (availablePerches <= 0) then throw("no perches available for the color " + color) else 
      [
      IntegerEntry("address_"+perchAddress+"_perchesAvailable_"+color, availablePerches - 1),
      StringEntry("address_"+address+"_asset_"+assetId.toBase58String()+"_perchColor", color)
      ]
  
  if (pmt.amount != 1) then throw("NFT is not attached") else
  
    strict farmingPower = invoke(this,"calculateFarmPower",[assetId.toBase58String(),i.originCaller.toString()],[]).asIntTuple()
    strict result = claimStakingResult(address,assetId.toBase58String(), false)
    [
      IntegerEntry(totalStakedKey(),tryGetInteger(totalStakedKey())+farmingPower._1),
      IntegerEntry(totalStakedUserKey(address),tryGetInteger(totalStakedUserKey(address))+farmingPower._1),
      StringEntry(assetId.toBase58String()+"_owner",address),
      StringEntry(assetId.toBase58String()+"_original_caller",i.originCaller.toString()),
      IntegerEntry(assetFarmingPower(address,assetId.toBase58String()),farmingPower._1),
      IntegerEntry(assetId.toBase58String()+"_basePower",farmingPower._2)

    ]
    ++validPayment
    ++perches
    ++result._1
    
}

@Callable(i)
func unstakeNFT(asset: String)={
  let address = i.caller.toString()
  if tryGetString(asset+"_owner") != i.caller.toString() then throw("You don't own this duck!!") else 
  strict result = claimStakingResult(address,asset,false)
  strict validPayment = checkAdditionalPayment(i.payments[0])
  let color = tryGetString("address_"+address+"_asset_"+asset+"_perchColor")

  strict assetFP = tryGetInteger(assetFarmingPower(address,asset))
  ([
    IntegerEntry(totalStakedKey(),tryGetInteger(totalStakedKey())-assetFP),
    IntegerEntry(totalStakedUserKey(address),tryGetInteger(totalStakedUserKey(address))-assetFP),
    DeleteEntry(asset+"_owner"),
    DeleteEntry(assetFarmingPower(address,asset)),
    DeleteEntry("address_"+address+"_asset_"+asset+"_perchColor"),
    DeleteEntry(asset+"_original_caller"),
    DeleteEntry(asset+"_use_origin"),
    DeleteEntry(asset+"_without_perch"),
    ScriptTransfer(Address(address.fromBase58String()),1, asset.fromBase58String()),
    IntegerEntry("address_"+address+"_perchesAvailable_"+color, tryGetInteger("address_"+address+"_perchesAvailable_"+color)+1)

  ]
  ++validPayment
  ++result._1, result._2)
  }

@Callable(i)
func topUpReward () = {
  let firstPayment = i.payments[0].value()
  if (firstPayment.assetId != getPeteAssetId()) then throw("FBP: You can attach only"+ getPeteAssetId().toBase58String()) else 
  let resHandleStaking = handleStakingTopUp(firstPayment.amount) 
    (
      resHandleStaking, 
      true
    )

}

@Callable(i)
func claimRewardPete () = {
  strict peteBalanceBefore = assetBalance(this, getPeteAssetId())
  strict invokeRes = invoke(getPeteDappAddress(), "claim", [],[])
  strict peteBalanceAfter = assetBalance(this, getPeteAssetId())
  let resHandleStaking = handleStakingTopUp(peteBalanceAfter-peteBalanceBefore-1000_0000) ++ [
    ScriptTransfer(i.caller,1000_0000, getPeteAssetId())
  ]
    (
      resHandleStaking, 
      true
    )
  }

@Callable(i)
func addPeteAndStakeMore()={
  let firstPayment = i.payments[0].value()
  if (firstPayment.assetId != getPeteAssetId()) then throw("FBP: You can attach only Waves") else
  
  
  strict invokeRes = invoke(getPeteDappAddress(), "stake", [],[i.payments[0]])
  [
    IntegerEntry("global_PETE_balance",tryGetInteger("global_PETE_balance")+firstPayment.amount)
  ]
  #todo; stake PETE IN THE PETE SC

}

#claim rewards
@Callable(i)
func claimReward (assetId: String) = {
  strict validPayment = checkAdditionalPayment(i.payments[0])
  if tryGetString(assetId+"_owner") != i.caller.toString() then throw("You don't own this duck ("+assetId+")!! ") else    
  if (i.payments.size() > 1) then throw("Please don't add extra payments") else 
  let owner = i.caller.toString() 
  let result = claimStakingResult(owner, assetId,true)
  
  (
    validPayment++result._1, 
    result._2
  )
  }

@Verifier(tx)
func verify() = {
    let firstUser = base58'6TdaXEfhnjYquvPf3yV7MFxt2CbgFmaqsvGwkKfXtKi4'
    let secondUser = base58'E23yUg8eun5nXB1nZRDf7RTyRADKxQhGNXdpTYonEvtU'
    let thirdUser = base58'Ga8WEBTPXbHuoXRD355mQ6ms8PsM2RFYKeA1mEP32CFe'

    let firstUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], firstUser)) then 1
        else 0
    let secondUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], secondUser)) then 1
        else 0
    let thirdUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], thirdUser)) then 1
        else 0
    let signaturesCount = firstUserSigned + secondUserSigned + thirdUserSigned

    match (tx) {
        case _ => signaturesCount >= 2
    }
}