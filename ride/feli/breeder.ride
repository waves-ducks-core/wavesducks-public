{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}

func tryGetString(key: String) = {
    tryGetStringExternal(this,key)
}


func staticKey_oracleAddress() = "static_oracleAddress"
func staticKey_extraFee() = "static_extraFee"
func staticKey_feeAggregator() = "static_feeAggregator"
func staticKey_felineIncubator()= "static_felineIncubatorAddress"
func staticKey_felineIncubationFee()= "static_felineIncubationFee"
func staticKey_eggAssetId() = "static_eggAssetId"
func staticKey_refContractAddress() = "static_refContractAddress"
func staticKey_itemsAddress() = "static_itemsAddress"
func staticKey_couponsAddress() = "static_couponsAddress"
func staticKey_canineRebirthAddress() = "static_felineRebirthAddress"

func getOracle() = Address(tryGetString(staticKey_oracleAddress()).fromBase58String())
func getFeeAggregator() = Address(tryGetStringExternal(getOracle(),staticKey_feeAggregator()).fromBase58String())
func getEggAssetId() = tryGetStringExternal(getOracle(),staticKey_eggAssetId()).fromBase58String() #base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'
func getCanineIncubator() = Address(tryGetStringExternal(getOracle(),staticKey_felineIncubator()).fromBase58String())
func getCanineIncubationFee() = getIntegerValue(getOracle(),staticKey_felineIncubationFee())
func getBurnAddress() = Address(tryGetStringExternal(getOracle(),"static_burnAddress").fromBase58String())
func getRefContractAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_refContractAddress()).fromBase58String()) #base58'3P8ejTkfRpz9WqCwCuihesNXU5k3zmFFfVe'
func getItemsAddress() = Address(tryGetStringExternal(getOracle(),staticKey_itemsAddress()).fromBase58String())
func getCouponsAddress() = Address(tryGetStringExternal(getOracle(),staticKey_couponsAddress()).fromBase58String()) 
func getFeliRebirthAddress() = Address(tryGetStringExternal(getOracle(),staticKey_canineRebirthAddress()).fromBase58String())

func checkAdditionalPayment(payment: AttachedPayment)= {
  if isDefined(payment.assetId) then throw("BDCAP: Please attach waves") else
  let feeAmount = getIntegerValue(getOracle(),staticKey_extraFee())
  if payment.amount != feeAmount then throw("BDCAP: Please attach exactly "+feeAmount.toString()+" amount of wavelets") else
  [ScriptTransfer(getFeeAggregator(), feeAmount, unit)]

}

let delayForHatching = 2

let HatchingStarted = "BREEDING_STARTED"
let HatchingFinished = "BREEDING_FINISHED"

let MaxGeneration = 7
let Generations = ["G", "H", "I", "K", "L", "M", "N", "O"]

func asBoolean(value: Any) = match value {
  case boolean: Boolean => boolean
  case _ => throw("TI: wrong type, expected: Boolean")
}

func getProcessStatusKey(address: String, txId: ByteVector) = {
  # stores the fact of hatching, 
  # if key exists = hatching started 
  # if false = not claimed
  # if true = claimed and nft id will be in the key of getDuckIdKey
  address + "_" + txId.toBase58String() +  "_status"
}

func getProcessFinishHeightKey(address: String, txId: ByteVector) = {
  address + "_" + txId.toBase58String() +  "_fh"
}

func getParentKey(txId: ByteVector, parentNum: Int) = {
  "inittx_" + txId.toBase58String() + "_parent" + parentNum.toString()
}

func getIdKey(address: String, txId: ByteVector) = {
  address + "_" + txId.toBase58String() +  "_di"
}

func getStatsKey(genString: String) = {
  "stats_" + genString + "_amount"
}

func tryGetInteger(key: String) = {
    let val = match getInteger(this, key) {
        case b:Int => b
        case _ => 0
    }
    val
}

func determineGeneration(g1: String, g2: String) = {
  let gIndex = max([Generations.indexOf(g1).value(), Generations.indexOf(g2).value()])
  Generations[gIndex + 1]
}

func getRandomNumber(variants: Int, txId: ByteVector, hatchingFinishHeight: Int, offset: Int) = {
  let randomSeedBlock = blockInfoByHeight(hatchingFinishHeight-1).value()
  let randomHash = sha256_16Kb(txId + randomSeedBlock.vrf.value())
  randomHash.toInt(offset) % variants
}

func getRandomGen(gen1: String, gen2: String, step: Int, txId: ByteVector, hatchingFinishHeight: Int,geneFromParent: Int, genePostion: Int,
specifiqueGene: String, specifiqueGenePosition: Int) = {
  if geneFromParent != 0 && genePostion==step then{ 
    if geneFromParent == 1 then gen1 else 
    if geneFromParent == 2 then gen2 else throw("Parent either needs to be 1 or 2")
  }else if specifiqueGene != "" && specifiqueGenePosition==step then{
    specifiqueGene
  }else
  let randomNum = getRandomNumber(2, txId, hatchingFinishHeight, step)
  let gen = if (randomNum == 0) then gen1 else gen2
  gen
}
func generate(txId: ByteVector, hatchingFinishHeight: Int,
parentFixedGene: Int,positionFixedGene: Int,
specifiqueGene: String, specifiqueGenePosition: Int) = {
  let colorRandom = getRandomNumber(4, txId, hatchingFinishHeight, 11)
  let color = if (colorRandom == 0) then "A"
    else if (colorRandom == 1) then "B" 
    else if (colorRandom == 2) then "C"
    else "D"

  let parent1Id = tryGetString(getParentKey(txId, 1)).fromBase58String()
  let parent2Id = tryGetString(getParentKey(txId, 2)).fromBase58String()

  let parent1Gen = assetInfo(parent1Id).value().name.split("")
  let parent2Gen = assetInfo(parent2Id).value().name.split("")

  let gen = "FELI-" 
            + getRandomGen(parent1Gen[5], parent2Gen[5], 0, txId, hatchingFinishHeight, parentFixedGene, positionFixedGene, specifiqueGene, specifiqueGenePosition)
            + getRandomGen(parent1Gen[6], parent2Gen[6], 1, txId, hatchingFinishHeight, parentFixedGene, positionFixedGene, specifiqueGene, specifiqueGenePosition)
            + getRandomGen(parent1Gen[7], parent2Gen[7], 2, txId, hatchingFinishHeight, parentFixedGene, positionFixedGene, specifiqueGene, specifiqueGenePosition)
            + getRandomGen(parent1Gen[8], parent2Gen[8], 3, txId, hatchingFinishHeight, parentFixedGene, positionFixedGene, specifiqueGene, specifiqueGenePosition)
            + getRandomGen(parent1Gen[9], parent2Gen[9], 4, txId, hatchingFinishHeight, parentFixedGene, positionFixedGene, specifiqueGene, specifiqueGenePosition)
            + getRandomGen(parent1Gen[10], parent2Gen[10], 5, txId, hatchingFinishHeight, parentFixedGene, positionFixedGene, specifiqueGene, specifiqueGenePosition)
            + getRandomGen(parent1Gen[11], parent2Gen[11], 6, txId, hatchingFinishHeight, parentFixedGene, positionFixedGene, specifiqueGene, specifiqueGenePosition)
            + getRandomGen(parent1Gen[12], parent2Gen[12], 7, txId, hatchingFinishHeight, parentFixedGene, positionFixedGene, specifiqueGene, specifiqueGenePosition)
            + "-" + determineGeneration(parent1Gen[14], parent2Gen[14]) + color
    gen
}

func checkAssetInIncubator(assetId: String) = {
  let result = match getString(getCanineIncubator(), assetId) {
    case b:String => true
    case _ => false
  }
  let result2 = match getString(this, assetId) {
    case c:String => true
    case _ => false
  }
  result || result2
}

func canBeBreeded(asset1Id: ByteVector, asset2Id: ByteVector) = {
  let asset1Gen = assetInfo(asset1Id).value().name.split("")
  let asset2Gen = assetInfo(asset2Id).value().name.split("")
  
  if (Generations.indexOf(asset1Gen[14]).value() >= MaxGeneration) then {
    "you can only breed felines with generation " + Generations[MaxGeneration] + " and lower"
  } else {
    if (Generations.indexOf(asset2Gen[14]).value() >= MaxGeneration) then {
      "you can only breed felines with generation " + Generations[MaxGeneration] + " and lower"
    } else {
      "true"
    }
  }
}
func asString(value: Any) = match value {
  case string: String => string
  case _ => throw("wrong type, expected: String")
}
func isSymbolA(accumulated: Int, sym: String) = { if (sym == "A") then {accumulated+1} else {accumulated+0} }
func isSymbolB(accumulated: Int, sym: String) = { if (sym == "B") then {accumulated+1} else {accumulated+0} }
func isSymbolC(accumulated: Int, sym: String) = { if (sym == "C") then {accumulated+1} else {accumulated+0} }
func isSymbolD(accumulated: Int, sym: String) = { if (sym == "D") then {accumulated+1} else {accumulated+0} }
func isSymbolE(accumulated: Int, sym: String) = { if (sym == "E") then {accumulated+1} else {accumulated+0} }
func isSymbolF(accumulated: Int, sym: String) = { if (sym == "F") then {accumulated+1} else {accumulated+0} }
func isSymbolG(accumulated: Int, sym: String) = { if (sym == "G") then {accumulated+1} else {accumulated+0} }
func isSymbolH(accumulated: Int, sym: String) = { if (sym == "H") then {accumulated+1} else {accumulated+0} }

func getAmountOrClear(amount: String) = {
  if (amount.contains("0")) then {""} else {amount}
}

func getGen(assetName: String) = {
  # getGen("-ABCDDCBA-GY") -> 2A2B2C2D-G
  let genotype = assetName.drop(5).dropRight(3).split("")
  let generation = assetName.split("")[14]
  getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolA)) + "A") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolB)) + "B") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolC)) + "C") +
  getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolD)) + "D") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolE)) + "E")+  getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolF)) + "F") +
  getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolG)) + "G") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolH)) + "H")+"-" + generation
}

func finishHatchingInternal(txIdStr: String, i: Invocation,
      parentFixedGene: Int,positionFixedGene: Int,
      specifiqueGene: String, specifiqueGenePosition: Int)={
  let txId = fromBase58String(txIdStr)
  let processStatusKey = getProcessStatusKey(i.caller.toString(), txId)
  let finishHeightKey = getProcessFinishHeightKey(i.caller.toString(), txId)
  let IdKey = getIdKey(i.caller.toString(), txId)

  let processTxStatus = getStringValue(this, processStatusKey)
  let processFinishHeight = getIntegerValue(this, finishHeightKey)
  
  if (processTxStatus == HatchingFinished) then {
    let Id = getStringValue(this, getIdKey(i.caller.toString(), txId))
    throw("The feline was breeded and claimed already, here is the folowing: " + Id)
  } else 
    if (processFinishHeight > height) then throw("Breeding is not finished yet " + (processFinishHeight - height).toString() + " blocks remaining, it will take around " +  (processFinishHeight - height).toString() + " minutes")
    else {
      let Gen = generate(txId, processFinishHeight,parentFixedGene,positionFixedGene,specifiqueGene,specifiqueGenePosition)
      let farmGen = getGen(Gen)
      let description = "{\"genotype\": \"" + Gen + "\", \"crossbreeding\": true}"

      let asset = Issue(Gen, description, 1, 0, false, unit, processFinishHeight)
      let assetId = asset.calculateAssetId()

      let amount = tryGetInteger(getStatsKey(Gen)) + 1
      let quantity = tryGetInteger("stats_"+farmGen+"_quantity")
      let parent1Id = tryGetString(getParentKey(txId, 1))
      let parent2Id = tryGetString(getParentKey(txId, 2))

      [
        StringEntry(processStatusKey, HatchingFinished),
        StringEntry(IdKey, assetId.toBase58String()),
        StringEntry(assetId.toBase58String(), IdKey),
        IntegerEntry(getStatsKey(Gen), amount),
        IntegerEntry("stats_"+farmGen+"_quantity", quantity+1),
        IntegerEntry("asset_" + parent1Id + "_children", 1),
        IntegerEntry("asset_" + parent2Id + "_children", 1),
        asset,
        ScriptTransfer(i.caller, 1, assetId),
        ScriptTransfer(i.caller, 1, parent1Id.fromBase58String()),
        ScriptTransfer(i.caller, 1, parent2Id.fromBase58String())
      ]
    }
}

func getRandomOldGenes(txId: ByteVector, h: Int) = {
  let freeGenes = ["A","B","C","D"]
  let randomNumber = getRandomNumber(freeGenes.size(), txId, h, 2)
  freeGenes[randomNumber]
}

func asInt(value: Any) = match value {
  case int: Int => int
  case _ => throw("wrong type, expected: Int")
}


@Callable(i)
func getGenFromName(assetName: String) = {
    let genotype = assetName.drop(5).dropRight(3).split("")
    let generation = assetName.split("")[14]
    let gen = getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolA)) + "A") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolB)) + "B") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolC)) + "C") +
    getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolD)) + "D") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolE)) + "E") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolF)) + "F") +
    getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolG)) + "G") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolH)) + "H")  +"-" + generation
    (
    [],
    gen
    )
  }

@Callable(i)
func startBreeding(refererAddress: String) = {
  #TODO: add validation that feeValidate payment is added!
  if size(i.payments) != 4  && size(i.payments) != 3 then throw("Wrong amount of payments!") else
  strict feeValidate = checkAdditionalPayment(i.payments[0])
  let firstPayment = i.payments[1].value()
  let secondPayment = i.payments[2].value()
  
  strict amountPaidByCoupons = invoke(getCouponsAddress(),"useCoupons",[getCanineIncubationFee()],[]).asInt()
  let leftToPay = getCanineIncubationFee()-amountPaidByCoupons
  if leftToPay == 0 && size(i.payments) == 4 then throw("You need to attach 3 payments") else
  strict payment = if leftToPay!=0 then {
    let thirdPayment = i.payments[3].value()
    if (thirdPayment.assetId != getEggAssetId()) then throw("TB: You can attach only EGG tokens with the following asset id: " + getEggAssetId().toBase58String()) else 
    if (thirdPayment.amount != leftToPay) then throw("TB: To breed a Feline you following amount of EGGlets: " + leftToPay.toString()+ " "+i.caller.toString()) else
    let refererRewardForbeach = fraction(leftToPay, 5, 100)
    strict refCall = invoke(getRefContractAddress(), "refPayment",
        [refererAddress], [AttachedPayment(getEggAssetId(), refererRewardForbeach)]).asBoolean()

    let toBurn = if refCall then leftToPay-refererRewardForbeach else leftToPay

    strict burnCall = invoke(getBurnAddress(), "burnAttachedPayments", [],[AttachedPayment(getEggAssetId(),toBurn)])
        
    leftToPay
    }else 0




  let firstAssetId = firstPayment.assetId.value().toBase58String()
  let secondAssetId = secondPayment.assetId.value().toBase58String()

  if (firstPayment.amount != 1 || secondPayment.amount != 1) then throw("NFT is not attached") else
  if (!(checkAssetInIncubator(firstAssetId) && checkAssetInIncubator(secondAssetId))) then {
    throw("You need to attach 2 valid NFT-felines.")
  } else {
    if (tryGetInteger("asset_" + firstAssetId + "_children") > 0 || tryGetInteger("asset_" + secondAssetId + "_children") > 0) then {
      throw("One feline can be used for breeding only once in its lifetime.")
    } else {
      let breededStatus = canBeBreeded(firstAssetId.fromBase58String(), secondAssetId.fromBase58String())
      if (breededStatus != "true") then {
        throw("These felines cannot be breeded: " + breededStatus)
      } else {
        [
          StringEntry(getParentKey(i.transactionId, 1), firstAssetId),
          StringEntry(getParentKey(i.transactionId, 2), secondAssetId),
          StringEntry(getProcessStatusKey(i.caller.toString(), i.transactionId), HatchingStarted),
          IntegerEntry(getProcessFinishHeightKey(i.caller.toString(), i.transactionId), height + delayForHatching)
        ]++feeValidate
      }
    }
  }
}


@Callable(i)
func fixedGene(txIdStr: String, parentFixedGene: Int, positionFixedGene: Int) = {
  strict feeValidate = checkAdditionalPayment(i.payments[1])
  if parentFixedGene != 1 && parentFixedGene != 2 then throw("FG: Parent fixed gene can be only 1 or 2") else
  let firstPayment = i.payments[0].value()
  if firstPayment.amount != 1 then throw("NFT is not attached") else
  strict artefact = invoke(getItemsAddress(),"checkArtefactDetails",[firstPayment.assetId.value().toBase58String()],[]).asString()
  if artefact != "ART-FIXGENE" then  throw("You need to attach a ART-FIXGENE artefact") else
  finishHatchingInternal(txIdStr,i,parentFixedGene,positionFixedGene,"",0)
  ++feeValidate
  ++[
    Burn(firstPayment.assetId.value(),1)
  ]

}

@Callable(i)
func freeGene(txIdStr: String) = {
  strict feeValidate = checkAdditionalPayment(i.payments[1])
  let firstPayment = i.payments[0].value()
  if firstPayment.amount != 1 then throw("NFT is not attached") else
  strict artefact = invoke(getItemsAddress(),"checkArtefactDetails",[firstPayment.assetId.value().toBase58String()],[]).asString()
  if artefact != "ART-FREEGENE" then  throw("You need to attach a ART-FREEGENE artefact") else

  let finishHeightKey = getProcessFinishHeightKey(i.caller.toString(), txIdStr.fromBase58String())
  let processFinishHeight = getIntegerValue(this, finishHeightKey)

  let selectedGene = getRandomOldGenes(txIdStr.fromBase58String(),processFinishHeight)
  let randomPosition = getRandomNumber(8, txIdStr.fromBase58String(), processFinishHeight, 3)
  finishHatchingInternal(txIdStr,i,0,0,selectedGene,randomPosition)
  ++feeValidate
  ++[Burn(firstPayment.assetId.value(),1)]

}

@Callable(i)
func finishHatching(txIdStr: String) = {
  if size(i.payments) != 1 then throw("Wrong amount of payments!") else
  strict feeValidate = checkAdditionalPayment(i.payments[0])
  finishHatchingInternal(txIdStr,i,0,0,"",0)++feeValidate
}

@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("ICU: admin only") else 
  [
    StringEntry("static_oracleAddress",oracle)
  ]

}

@Callable(i)
func reduceRarity(assetId: String, farmGen: String) = {
  let asset = assetId.fromBase58String()
  if (i.caller != getFeliRebirthAddress() && i.caller != this) then {
    throw("admin, items or rebirth only")
  } else {
    let duckGen = assetInfo(asset).value().name
    [
      IntegerEntry(getStatsKey(duckGen), tryGetInteger(getStatsKey(duckGen)) - 1),
      IntegerEntry("stats_"+farmGen+"_quantity", tryGetInteger("stats_"+farmGen+"_quantity") - 1)
    ]
  }
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)