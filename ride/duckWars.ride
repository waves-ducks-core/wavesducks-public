{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func tryGetString(key: String) = {
    match getString(this, key) {
        case a:String => a
        case _ => ""
    }
}

func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}

func oracleAddressKey() = "static_oracleAddress"
func breederAddressKey() = "static_breederAddress"
func incubatorAddressKey() = "static_incubatorAddress"
func eggAssetIdKey() = "static_eggAssetId"
func wearablesAddressKey() = "static_wearablesAddress"
func farmingAddressKey() = "static_farmingAddressNew"
func couponsAddressKey() = "static_couponsAddress"
func rebirthAddressKey() = "static_rebirthAddress"
func burnAddressKey() = "static_burnAddress"

func getOracle() = Address(tryGetString(oracleAddressKey()).fromBase58String())

func getBreederAddress() =  Address(tryGetStringExternal(getOracle(), breederAddressKey()).fromBase58String()) #base58'3PDVuU45H7Eh5dmtNbnRNRStGwULA7NY6Hb'

func getIncubatorAddress() =  Address(tryGetStringExternal(getOracle(), incubatorAddressKey()).fromBase58String()) #base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
func getEggAssetId() = tryGetStringExternal(getOracle(), eggAssetIdKey()).fromBase58String() #base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'
func getWearablesAddress() = Address(tryGetStringExternal(getOracle(), wearablesAddressKey()).fromBase58String())
func getFarmingAddress() =  Address(tryGetStringExternal(getOracle(), farmingAddressKey()).fromBase58String())
func getCouponsAddress() = Address(tryGetStringExternal(getOracle(), couponsAddressKey()).fromBase58String()) 
func getRebirthAddress() =  Address(tryGetStringExternal(getOracle(), rebirthAddressKey()).fromBase58String())
func getBurnAddress() = Address(tryGetStringExternal(getOracle(), burnAddressKey()).fromBase58String())


let MANTLENAME = "mantle"

let STATUSFREE = "FREE"
let STATUSOCCUPIED = "OCCUPIED"

func keyDuckLock(callerAddress: String, duckId: String) = {
  "address_" + callerAddress + "_duck_" + duckId + "_status"
}

func keyInvestor(callerAddress: String) = {
  "address_" + callerAddress + "_amount"
}


func keyArtefactInvested(type: String, artefactId: String) = {
  "artefact_" + type + "_artefactId_" + artefactId + "_invested"
}

func keyOnlyArtefactLevel(artefactId: ByteVector) = {
  "artefactId_" + artefactId.toBase58String() + "_level"
}

func keyArtefactIdByDuckAndType(type: String, duckId: ByteVector) = {
  "artefact_ " + type + "_duck_" + duckId.toBase58String() + "_artefactId"
}

func keyArtefactOwner(type: String, artefactId: ByteVector) = {
  "artefact_ " + type + "_artefactId_" + artefactId.toBase58String() + "_owner"
}

func keyArtefactOwnerAndStatus(type: String, owner: String, artefactId: ByteVector) = {
  "address_" + owner + "_artefact_" + type + "_artefactId_" + artefactId.toBase58String() + "_status"
}

func keyArtefactStatus(type: String, artefactId: ByteVector) = {
  "artefact_ " + type + "_artefactId_" + artefactId.toBase58String() + "_status"
}

func keyArtefactType(artefactId: ByteVector) = {
  "artefactId_" + artefactId.toBase58String() + "_type"
}

func keyArtefactLevel(type: String, owner: String, artefactId: ByteVector) = {
  "address_" + owner + "_artefact_" + type + "_artefactId_" + artefactId.toBase58String() + "_level"
}

func keyPutOnArtefact(type: String, owner: String, duckId: String, artefactId: ByteVector) = {
  "address_" + owner + "_duck_" + duckId + "_artefact_" + type + "_artefactId_" + artefactId.toBase58String() + "_status"
}

func keyArtefactExists(type: String, artefactId: ByteVector) = {
  "artefact_" + type + "_artefactId_" + artefactId.toBase58String()
}

func isJackpot(assetId: ByteVector ) = assetInfo(assetId).value().name.value().takeRight(1) == "U"

func asInt(value: Any) = match value {
  case int: Int => int
  case _ => throw("WAI: wrong type, expected: Int")
}


func upgradeMantleFunc(i: Invocation, artefactId: String, amount: Int) = {
    let kMantleExists = keyArtefactExists(MANTLENAME, artefactId.fromBase58String())
    let kMantleOwner = keyArtefactOwner(MANTLENAME, artefactId.fromBase58String())

    let mantleExists = getBooleanValue(kMantleExists)
    let mantleOwner = getStringValue(kMantleOwner)
    if (!mantleExists) then throw("WUPM: Mantle with such an ID does not exist") else
    if (mantleOwner != i.originCaller.toString()) then throw("WUPM: You're not an owner of the mantle")
    else {

      let kMantleInvested = keyArtefactInvested(MANTLENAME, artefactId)
      let mantleAlreadyInvested = getIntegerValue(kMantleInvested)

      let kMantleLevel = keyArtefactLevel(MANTLENAME, i.originCaller.toString(), artefactId.fromBase58String())
      let kOnlyArtefactLevel = keyOnlyArtefactLevel(artefactId.fromBase58String())

      let totalInvested = mantleAlreadyInvested + amount
      let newLevel = (10 * pow(totalInvested, 8, 6, 1, 8, HALFUP) + 100000000) / 100000000
      if newLevel >= 340 then throw("DUMF: You reached the max level! Max level is 340!") else
      [
        IntegerEntry(kMantleLevel, newLevel),
        IntegerEntry(kMantleInvested, totalInvested),
        IntegerEntry(kOnlyArtefactLevel, newLevel)
      ]
    }
}

@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("WCO: admin only") else 
  [
    StringEntry("static_oracleAddress",oracle)
  ]

}

@Callable(i)
func issueFreeMantle(address: String, type: String, level: Int) = {
  if (i.caller != this) then throw("WIFM: Can be called only by admin") else
  if (type != MANTLENAME) then throw("WIFM: You can buy only mantles now")
  else {

      let issueMantleNFT = Issue("DUCK-MANTLE-0", "[Artefact] Mantle NFT for Jeduck", 1, 0, false)
      let mantleNftId = issueMantleNFT.calculateAssetId()

      let kMantleLevel = keyArtefactLevel(MANTLENAME, address, mantleNftId)
      let kMantleExists = keyArtefactExists(MANTLENAME, mantleNftId)
      let kMantleOwner = keyArtefactOwner(MANTLENAME, mantleNftId)
      let kMantleStatus = keyArtefactStatus(MANTLENAME, mantleNftId)
      let kArtefactType = keyArtefactType(mantleNftId)
      let kMantleInvested = keyArtefactInvested(MANTLENAME, mantleNftId.toBase58String())
      let kArtefactOwnerAndStatus = keyArtefactOwnerAndStatus(MANTLENAME, address, mantleNftId)
      let kOnlyArtefactLevel = keyOnlyArtefactLevel(mantleNftId)
      #let newLevel = (10 * pow(totalInvested, 8, 6, 1, 8, HALFUP) + 100000000) / 100000000
      #let part1 =(level*100000000-100000000)/10
      #let invested = log(part1, 8, 6, 1, 8, HALFUP)
      let invested = pow(level - 1, 1, (1000000000/6), 8, 8, HALFUP)
      ([
        IntegerEntry(kMantleLevel, level),
        IntegerEntry(kMantleInvested, invested),
        BooleanEntry(kMantleExists, true),
        StringEntry(kMantleOwner, address),
        StringEntry(kMantleStatus, STATUSFREE),
        StringEntry(kArtefactType, MANTLENAME),
        StringEntry(kArtefactOwnerAndStatus, STATUSFREE),
        IntegerEntry(kOnlyArtefactLevel, level)
      ],mantleNftId.toBase58String())
  }
}

@Callable(i)
func buyArtefact(type: String) = {
  if (type != MANTLENAME) then throw("WBA: You can buy only mantles now") 
  else {
    let MANTLEPRICE = 1_000_000
    #strict amountPaidByCoupons = invoke(getCouponsAddress(),"useCoupons",[MANTLEPRICE],[]).asInt()
    strict amountPaidByCoupons = 0    
    let leftToPay = MANTLEPRICE*100-amountPaidByCoupons
    strict payment = if leftToPay!=0 then {
      let firstPayment = i.payments[0].value()
      if (firstPayment.assetId != getEggAssetId()) then throw("WBA: You can attach only EGG tokens with the following asset id: " + getEggAssetId().toBase58String()) else 
      if (firstPayment.amount != leftToPay) then throw("WBA: To buy a mantle you currently need the following amount of EGGlets: " + leftToPay.toString()) else
      leftToPay
    }else 0
    

      let issueMantleNFT = Issue("DUCK-MANTLE-0", "[Artefact] Mantle NFT for Jeduck", 1, 0, false)
      let mantleNftId = issueMantleNFT.calculateAssetId()

      let kMantleLevel = keyArtefactLevel(MANTLENAME, i.caller.toString(), mantleNftId)
      let kMantleExists = keyArtefactExists(MANTLENAME, mantleNftId)
      let kMantleOwner = keyArtefactOwner(MANTLENAME, mantleNftId)
      let kMantleStatus = keyArtefactStatus(MANTLENAME, mantleNftId)
      let kArtefactType = keyArtefactType(mantleNftId)
      let kMantleInvested = keyArtefactInvested(MANTLENAME, mantleNftId.toBase58String())
      let kArtefactOwnerAndStatus = keyArtefactOwnerAndStatus(MANTLENAME, i.caller.toString(), mantleNftId)
      let kOnlyArtefactLevel = keyOnlyArtefactLevel(mantleNftId)

      [
        IntegerEntry(kMantleLevel, 1),
        IntegerEntry(kMantleInvested, MANTLEPRICE),
        BooleanEntry(kMantleExists, true),
        StringEntry(kMantleOwner, i.caller.toString()),
        StringEntry(kMantleStatus, STATUSFREE),
        StringEntry(kArtefactType, MANTLENAME),
        StringEntry(kArtefactOwnerAndStatus, STATUSFREE),
        IntegerEntry(kOnlyArtefactLevel, 1)
      ]
    
  } 
}

@Callable(i)
func upgradeMantle(artefactId: String) = {
  let upgradePointPrice = 1_000_000
  let firstPayment = i.payments[0].value()
  let amount = firstPayment.amount
  if (firstPayment.assetId != getEggAssetId()) then throw("WUM: You can attach only EGG tokens with the following asset id: " + getEggAssetId().toBase58String())
  else if (firstPayment.amount < upgradePointPrice) then throw("WUM: Minimal payment for upgrading mantle is: " + upgradePointPrice.toString())
  else {
      upgradeMantleFunc(i,artefactId,amount)
  }
}

@Callable(i)
func upgradeMantleByCoupons(artefactId: String, couponsAmount: Int) = {
  let upgradePointPrice = 1_000_000
  let amount = if size(i.payments)==1 then {
      let firstPayment = i.payments[0].value()
      if (firstPayment.assetId != getEggAssetId()) then throw("WUMBC: You can attach only EGG tokens with the following asset id: " + getEggAssetId().toBase58String()) else
      strict burnCall = invoke(getBurnAddress(), "burnAttachedPayments", [],[AttachedPayment(getEggAssetId(),firstPayment.amount)])

      firstPayment.amount 
    }
    else 0
  if (couponsAmount+amount < upgradePointPrice) then throw("WUMBC: Minimal payment for upgrading mantle is: " + upgradePointPrice.toString())
  else {
      strict amountPaidByCoupons = invoke(getCouponsAddress(),"useCoupons",[couponsAmount],[]).asInt()
      if couponsAmount != amountPaidByCoupons then throw("WUMBC: Not enough coupons! Please make sure to pick lower coupon amount!") else
      upgradeMantleFunc(i,artefactId,couponsAmount+amount)
  }
}


#TODO: check if duck wears sweater, if so stake the duck automatically

@Callable(i)
func putOnArtefact(artefactId: String) = {
  let firstPayment = i.payments[0].value()
  let attachedAssetInfo = assetInfo(firstPayment.assetId.value()).value()
  if (firstPayment.amount != 1) then throw("WPOA: NFT is not attached") else
  if (attachedAssetInfo.issuer != getIncubatorAddress() && attachedAssetInfo.issuer != getBreederAddress()) then throw("WPOA: You can attach only DUCKs issued by incubator or breeder ")
  else {
    let hasSweater = tryGetStringExternal(getWearablesAddress(),firstPayment.assetId.value().toBase58String()+"_ART-XSWEATER")
    let kMantleExists = keyArtefactExists(MANTLENAME, artefactId.fromBase58String())
    let kMantleOwner = keyArtefactOwner(MANTLENAME, artefactId.fromBase58String())
    let kMantleStatus = keyArtefactStatus(MANTLENAME, artefactId.fromBase58String())
    let kArtefactOwnerAndStatus = keyArtefactOwnerAndStatus(MANTLENAME, i.originCaller.toString(), artefactId.fromBase58String())
    let kDuckLock = keyDuckLock(i.originCaller.toString(), firstPayment.assetId.value().toBase58String())
    let mantleExists = getBooleanValue(kMantleExists)
    let mantleOwner = getStringValue(kMantleOwner)
    let mantleStatus = getStringValue(kMantleStatus)

    let kArtefactIdByType = keyArtefactIdByDuckAndType(MANTLENAME, firstPayment.assetId.value())

    if (!mantleExists) then throw("WPOA: Mantle with such an ID does not exist") else
    if (mantleOwner != i.originCaller.toString()) then throw("WPOA: You're not an owner of the mantle") else 
    if (mantleStatus != STATUSFREE) then throw("WPOA: Mantle is already used!")
    else {
      strict stakeDuck = if hasSweater != "" then 
                            if isJackpot(firstPayment.assetId.value()) then invoke(getFarmingAddress(),"stakeNFTWithoutPerch",[],i.payments) else invoke(getFarmingAddress(),"stakeNFT",[],i.payments) 
                          else []

      let kPutOnArtefact = keyPutOnArtefact(MANTLENAME, i.originCaller.toString(), firstPayment.assetId.value().toBase58String(), artefactId.fromBase58String())
      [
        BooleanEntry(kPutOnArtefact, true),
        StringEntry(kMantleStatus, STATUSOCCUPIED),
        StringEntry(kArtefactOwnerAndStatus, STATUSOCCUPIED),
        BooleanEntry(kDuckLock, true),
        StringEntry(kArtefactIdByType, artefactId)
      ]
    }
  }
}

#TODO: check if duck wears sweater, if so unstake the duck automatically
@Callable(i)
func takeOffArtefact(duckId:String, artefactType: String) = {
  
  let kArtefactIdByTypeAndDuck = keyArtefactIdByDuckAndType(artefactType, duckId.fromBase58String())
  let artefactId = getStringValue(kArtefactIdByTypeAndDuck)
  
  let kArtefactType = keyArtefactType(artefactId.fromBase58String())
  let kPutOnArtefact = keyPutOnArtefact(artefactType, i.originCaller.toString(), duckId, artefactId.fromBase58String())
  let kPutOnArtefactStatus = getBooleanValue(kPutOnArtefact)
  let kArtefactOwnerAndStatus = keyArtefactOwnerAndStatus(artefactType, i.originCaller.toString(), artefactId.fromBase58String())
  let kDuckLock = keyDuckLock(i.originCaller.toString(), duckId)

  let kMantleStatus = keyArtefactStatus(artefactType, artefactId.fromBase58String())
  if (kPutOnArtefactStatus != true) then throw("WTOA: There is no duck with such parameteres")
  else {
    let hasSweater = tryGetStringExternal(getWearablesAddress(),duckId+"_ART-XSWEATER")
    let isStaked = if tryGetStringExternal(getFarmingAddress(),"address_"+i.originCaller.toString()+"_asset_"+duckId+"_unstaker") == "" then false else true
    strict unstakeDuck = if hasSweater != "" && isStaked then
                            if isJackpot(duckId.fromBase58String()) then invoke(getFarmingAddress(),"unstakeJackpot",[duckId],i.payments).asInt() else invoke(getFarmingAddress(),"unstakeNFT",[duckId],i.payments).asInt()
                         else 0
    let sendRewards = if unstakeDuck > 0 then [ScriptTransfer(i.originCaller, unstakeDuck, getEggAssetId())] else []
    [
      DeleteEntry(kPutOnArtefact),
      DeleteEntry(kArtefactIdByTypeAndDuck),
      DeleteEntry(kDuckLock),
      StringEntry(kMantleStatus, STATUSFREE),
      StringEntry(kArtefactOwnerAndStatus, STATUSFREE),
      ScriptTransfer(i.originCaller, 1, duckId.fromBase58String())
    ]++sendRewards
  }
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
        
