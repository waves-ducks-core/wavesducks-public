{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func basePriceSpice() = 10_0000_0000
func basePriceEgg() = 2_0000_0000
func delayForHatching() = 2
func hatchingStarted() = "BREEDING_STARTED"
func hatchingFinished() = "BREEDING_FINISHED"

func staticKey_eggAssetId() = "static_eggAssetId"
func staticKey_spiceAssetId() = "static_spiceAssetId"
func staticKey_duckBreederAddress() = "static_breederAddress"
func staticKey_turtleBreederAddress() = "static_turtleBreederAddress"
func staticKey_oracleAddress() = "static_oracleAddress"
func staticKey_extraFee() = "static_extraFee"
func staticKey_feeAggregator() = "static_feeAggregator"

func getStatsKey_amount() = "stats_amount"
func getStatsKey(genString: String) = "stats_" + genString + "_amount"

func getChildren(assetId: String) = "asset_"+assetId+"_children"
func getParentKey(txId: ByteVector, parentNum: Int) = "inittx_" + txId.toBase58String() + "_parent" + parentNum.toString()
func getProcessStatusKey(address: String, txId: String) = address + "_" + txId +  "_status"
func getProcessFinishHeightKey(address: String, txId: String) = address + "_" + txId +  "_fh"
func getIdKey(address: String, txId: String) = {
  address + "_" + txId +  "_di"
}
func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}
func tryGetString(key: String) = {
    tryGetStringExternal(this,key)
}
func tryGetInteger(key: String) = {
    let val = match getInteger(this, key) {
        case b:Int => b
        case _ => 0
    }
    val
}
func getOracle() = Address(tryGetString(staticKey_oracleAddress()).fromBase58String())
func getTurtleBreederAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_turtleBreederAddress()).fromBase58String()) 
func getDuckBreederAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_duckBreederAddress()).fromBase58String())
func getEggAssetId() = tryGetStringExternal(getOracle(),staticKey_eggAssetId()).fromBase58String() 
func getSpiceAssetId() = tryGetStringExternal(getOracle(),staticKey_spiceAssetId()).fromBase58String()
func getFeeAggregator() = Address(tryGetStringExternal(getOracle(),staticKey_feeAggregator()).fromBase58String())

func getAllowedMutants() = [getTurtleBreederAddress(),getDuckBreederAddress()]

func calcPriceInAsset(baseAmount: Int)= {
    baseAmount + baseAmount * (tryGetInteger(getStatsKey_amount())+1)/1000/size(getAllowedMutants())
}

func getBool(key: String) = {
  match getBoolean(this, key) {
      case b:Boolean => b
      case _ => false
  }
}

func isTestEnv()={
  getBool("TESTENV")
}

func getRandomNumber(variants: Int, txId: ByteVector, hatchingFinishHeight: Int, offset: Int) = {
  let randomSeedBlock = blockInfoByHeight(hatchingFinishHeight-1).value()
  let randomHash = sha256_16Kb(txId + randomSeedBlock.vrf.value())
  randomHash.toInt(offset) % variants
}

func getRandomGen(gen1: String, gen2: String, step: Int, txId: ByteVector, hatchingFinishHeight: Int) = {
  let randomNum = getRandomNumber(2, txId, hatchingFinishHeight, step)
  let gen = if (randomNum == 0) then gen1 else gen2
  gen
}

func generate(txId: ByteVector, finishHeight: Int,parent1Id: ByteVector, parent2Id: ByteVector) = {
  #TODO: add 5 colors, add them in different proportions
  let colorRandom = getRandomNumber(100, txId, finishHeight, 11)
  let color = if (colorRandom < 26) then "A"
    else if (colorRandom < 48) then "B" 
    else if (colorRandom < 70) then "C" 
    else if (colorRandom < 90) then "D" 
    else "G"

  let parent1Gen = assetInfo(parent1Id).value().name.split("")
  let parent2Gen = assetInfo(parent2Id).value().name.split("")
  let gen = "MTNT-"
    +getRandomGen(parent1Gen[0]+parent1Gen[5], parent2Gen[0]+parent2Gen[5], 0, txId, finishHeight)
    +getRandomGen(parent1Gen[0]+parent1Gen[6], parent2Gen[0]+parent2Gen[6], 1, txId, finishHeight)
    +getRandomGen(parent1Gen[0]+parent1Gen[7], parent2Gen[0]+parent2Gen[7], 2, txId, finishHeight)
    +getRandomGen(parent1Gen[0]+parent1Gen[8], parent2Gen[0]+parent2Gen[8], 3, txId, finishHeight)
    +getRandomGen(parent1Gen[0]+parent1Gen[9], parent2Gen[0]+parent2Gen[9], 4, txId, finishHeight)
    +getRandomGen(parent1Gen[0]+parent1Gen[10], parent2Gen[0]+parent2Gen[10], 5, txId, finishHeight)
    +getRandomGen(parent1Gen[0]+parent1Gen[11], parent2Gen[0]+parent2Gen[11], 6, txId, finishHeight)
    +getRandomGen(parent1Gen[0]+parent1Gen[12], parent2Gen[0]+parent2Gen[12], 7, txId, finishHeight)
    +"-G"+color
    gen
}

func isSymbol(acc: (Int, String), sym: String) = { if (sym == acc._2) then {(acc._1+1, acc._2)} else {(acc._1+0, acc._2)} }

func getAmountOrClear(amount: String) = {
  if (amount.contains("0")) then {""} else {amount}
}
func charList() = {
["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]
}
func getRarityFromName(name: String)={
  #getRarityFromName("MTNT-DADADADATBTBTBTA-GY") -> 5A3B-Y
  let color = name.takeRight(1)
  let genotype = name.drop(5).dropRight(3).split("")
  let genetics = [genotype[1],genotype[3],genotype[5],genotype[7],genotype[9],genotype[11],genotype[13],genotype[15]]
  func composeString(acc: String,char: String)={
    let charCount = FOLD<8>(genetics, (0,char), isSymbol)
    acc+getAmountOrClear(toString(charCount._1)+char)
  }
  FOLD<26>(charList(), "", composeString)+"-"+color
}
func nrOfTypeGenes(gen:String)={
  let genotype = gen.drop(5).dropRight(3).split("")
  let parts1=genotype[0]+genotype[1]
  let parts2=genotype[2]+genotype[3]
  let parts3=genotype[4]+genotype[5]
  let parts4=genotype[6]+genotype[7]
  let parts5=genotype[8]+genotype[9]
  let parts6=genotype[10]+genotype[11]
  let parts7=genotype[12]+genotype[13]
  let parts8=genotype[14]+genotype[15]
  let parts=[parts1,parts2,parts3,parts4,parts5,parts6,parts7,parts8]
  func sortPartsByType(acc: (List[String],List[String],List[String],List[String]), part: String) ={
    let splitParts = part.split("")
    if splitParts[0] == "T" then
      (acc._1:+splitParts[1], acc._2,acc._3,acc._4)
    else if splitParts[0] == "D" then
      (acc._1,acc._2:+splitParts[1],acc._3,acc._4)
    else if splitParts[0] == "C" then
      (acc._1,acc._2,acc._3:+splitParts[1],acc._4)
    else if splitParts[0] == "H" then
      (acc._1,acc._2,acc._3,acc._4:+splitParts[1])
    else throw("UNKNOWN TYPE")
  }
  strict result = FOLD<8>(parts, ([],[],[],[]), sortPartsByType)

  func composeStringTurtle(acc: String,char: String)={
    let charCount = FOLD<8>(result._1, (0,char), isSymbol)
    acc+getAmountOrClear(toString(charCount._1)+char)
  }
  func composeStringDuck(acc: String,char: String)={
    let charCount = FOLD<8>(result._2, (0,char), isSymbol)
    acc+getAmountOrClear(toString(charCount._1)+char)
  }
    func composeStringCat(acc: String,char: String)={
    let charCount = FOLD<8>(result._3, (0,char), isSymbol)
    acc+getAmountOrClear(toString(charCount._1)+char)
  }
    func composeStringDog(acc: String,char: String)={
    let charCount = FOLD<8>(result._4, (0,char), isSymbol)
    acc+getAmountOrClear(toString(charCount._1)+char)
  }
  let turtleGens = FOLD<26>(charList(), "", composeStringTurtle)
  let duckGens = FOLD<26>(charList(), "", composeStringDuck)
  let catGens = FOLD<26>(charList(), "", composeStringCat)
  let hondGens = FOLD<26>(charList(), "", composeStringDog)
  let finishedTurtleGens = if (turtleGens == "") then "" else "T:"+turtleGens+"_"
  let finishedDuckGens = if (duckGens == "") then "" else "D:"+duckGens+"_"
  let finishedCatGens = if (catGens == "") then "" else "C:"+catGens+"_"
  let finishedHondGens = if (hondGens == "") then "" else "H:"+hondGens+"_"
  ([
    StringEntry("DEBUG_TURTLE", turtleGens),
    StringEntry("DEBUG_DUCK", duckGens),
    StringEntry("DEBUG_CAT", catGens),
    StringEntry("DEBUG_HOND", hondGens)
  ], finishedTurtleGens+finishedDuckGens+finishedCatGens+hondGens
  )
}

func validateIfMutantFailed(rarity: String)={
    if size(rarity.split(":")) < 3 then true else false

}

func finishHatchingInternal(txId: String, owner: String)={
  let processStatusKey = getProcessStatusKey(owner, txId)
  let finishHeightKey = getProcessFinishHeightKey(owner, txId)
  let IdKey = getIdKey(owner, txId)

  let processTxStatus = getStringValue(this, processStatusKey)
  let processFinishHeight = getIntegerValue(this, finishHeightKey)
  
  if (processTxStatus == hatchingFinished()) then {
    let Id = getStringValue(this, getIdKey(owner, txId))
    throw("The MUTANT was breeded and claimed already, here is the folowing: " + Id)
  } else 
    if (processFinishHeight > height) then throw("Breeding is not finished yet " + (processFinishHeight - height).toString() + " blocks remaining, it will take around " +  (processFinishHeight - height).toString() + " minutes")
    else {
      let parent1Id = tryGetString(getParentKey(txId.fromBase58String(), 1))
      let parent2Id = tryGetString(getParentKey(txId.fromBase58String(), 2))
      let parent1IdBytes = parent1Id.fromBase58String()
      let parent2IdBytes = parent2Id.fromBase58String()

      let gen = generate(txId.fromBase58String(), processFinishHeight,parent1IdBytes, parent2IdBytes)
      let farmGen = nrOfTypeGenes(gen)
      let rarityFromName = getRarityFromName(gen)

      let amountGen = tryGetInteger(getStatsKey(gen)) + 1
	    let amount = tryGetInteger(getStatsKey_amount())+1

      let asset = Issue("MTNT-"+toString(amount), gen, 1, 0, false, unit, processFinishHeight)
      let assetId = asset.calculateAssetId()

      
      let quantity = tryGetInteger("stats_"+farmGen._2+"_quantity")
      let rarity = tryGetInteger("stats_"+rarityFromName+"_rarity")
      let ownerAsAddress = addressFromStringValue(owner)
      let failed = validateIfMutantFailed(farmGen._2)
      let transferOrBurn = if failed then Burn(assetId,1) else ScriptTransfer(ownerAsAddress, 1, assetId)
      let transferOrBurnParent1 = if getRandomNumber(10, txId.fromBase58String(), processFinishHeight, 2) == 5 then Burn(parent1IdBytes,1) else ScriptTransfer(ownerAsAddress, 1, parent1IdBytes)
      let transferOrBurnParent2 = if getRandomNumber(10, txId.fromBase58String(), processFinishHeight, 3) == 5 then Burn(parent2IdBytes,1) else ScriptTransfer(ownerAsAddress, 1, parent2IdBytes)
      
      [
        StringEntry(processStatusKey, hatchingFinished()),
        StringEntry(IdKey, assetId.toBase58String()),
        StringEntry(assetId.toBase58String(), IdKey),
        IntegerEntry(getStatsKey(gen), amountGen),
		    IntegerEntry(getStatsKey_amount(), amount),
        IntegerEntry("stats_"+farmGen._2+"_quantity", quantity+1),
        IntegerEntry("stats_"+rarityFromName+"_rarity", rarity+1),
        IntegerEntry("asset_" + parent1Id + "_children", 1),
        IntegerEntry("asset_" + parent2Id + "_children", 1),
        asset,
        transferOrBurn,
        transferOrBurnParent1,
        transferOrBurnParent2
      ]
    }

}

func checkAdditionalPayment(payment: AttachedPayment)= {
  if isDefined(payment.assetId) then throw("BCAP: Please attach waves") else
  let feeAmount = getIntegerValue(getOracle(),staticKey_extraFee())
  if payment.amount != feeAmount then throw("BCAP: Please attach exactly "+feeAmount.toString()+" amount of wavelets") else
  [ScriptTransfer(getFeeAggregator(), feeAmount, unit)]

}

func checkTypeAndValidObstinate(info: Asset)={
    let splitted = split(info.name, "")
    let type = splitted[0]
    let gen = splitted[14]

    if gen != "O" then throw("MCTAVO: Only obstinates can be turned into mutants") else
    let breederSc = if type == "T" then getTurtleBreederAddress() else if type == "D" then getDuckBreederAddress() else throw("MCTAVO: Invalid type")
    if breederSc != info.issuer then throw("MCTAVO: Only obstinates from the breeder contract can be turned into mutants") else
    if tryGetStringExternal(breederSc, info.id.toBase58String()) == "" then throw("MCTAVO: Invalid nft") else
    if tryGetInteger(getChildren(info.id.toBase58String())) == 1  then throw("MCTAVO: NFT already used") else

    type

}


@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("ICU: admin only") else 
  [
    StringEntry("static_oracleAddress",oracle)
  ]

}

@Callable(i)
func startMutantHatching(refererAddress: String) = {
    #TODO: add fees in egg, read this from a key in oracle, read assetId from oracle
    #TODO: add spice in egg read this from a key in oracle, read assetId from oracle
    #TODO: create an array with the address from turtle and duck breeding contract
    #TODO: check if 5 payments are attached, if this is the case, the first 2 payments to be an nft with issuer the address from the array above
    #TODO: check third payment equals to be extra waves fee
    #TODO: check fourth payment equals to be spice fee from step 1
    #TODO: check fifth payment equals to be egg fee from step 1
    if size(i.payments) != 5 then throw("MSMH: 5 payments required") else
    if i.payments[0].amount != 1 then throw("MSMH: 1st payment must be an NFT") else
    if i.payments[1].amount != 1 then throw("MSMH: 2nd payment must be an NFT") else
    strict validPayment = checkAdditionalPayment(i.payments[2])
    if i.payments[3].assetId != getSpiceAssetId() || i.payments[3].amount != calcPriceInAsset(basePriceSpice()) then throw("MSMH: 4th payment must be in spice") else
    if i.payments[4].assetId != getEggAssetId() || i.payments[4].amount != calcPriceInAsset(basePriceEgg()) then throw("MSMH: 5th payment must be in egg") else
    let nft1 = assetInfo(i.payments[0].assetId.value()).value()
    let nft2 = assetInfo(i.payments[1].assetId.value()).value()
    let type1 = checkTypeAndValidObstinate(nft1)
    let type2 = checkTypeAndValidObstinate(nft2)
    if type1 == type2 then throw("MSMH: NFTs can not be of the same type") else
    [
        StringEntry(getParentKey(i.transactionId, 1), nft1.id.toBase58String()),
        StringEntry(getParentKey(i.transactionId, 2), nft2.id.toBase58String()),
        StringEntry(getProcessStatusKey(i.caller.toString(), i.transactionId.toBase58String()), hatchingStarted()),
        IntegerEntry(getProcessFinishHeightKey(i.caller.toString(), i.transactionId.toBase58String()), height + delayForHatching())
    ]++validPayment
}

@Callable(i)
func finishMutantHatching(txIdStr: String) = {
  let owner = i.originCaller.toString()
  if size(i.payments) != 1 then throw("MFMH: Wrong amount of payments!") else
  strict feeValidate = checkAdditionalPayment(i.payments[0])
  finishHatchingInternal(txIdStr,owner)++feeValidate


}

@Callable(i)
func getRarity(genotype: String) = {
  let rarityFromName = getRarityFromName(genotype)
  let quantity = valueOrErrorMessage(tryGetInteger("stats_"+rarityFromName+"_rarity"),"stats_"+rarityFromName+"_rarity")
  let power = pow(10000 / quantity, 4, 5, 1, 2, FLOOR)
  let rarity = if (power > 0) then {power} else {2}
  (
    [],
    (rarityFromName,rarity)
  )
}

@Callable(i)
func reduceRarity(assetId: String, fGen: String) = {
  throw("MRR: Not implemented")
  #[]
}

@Verifier(tx)
func verify() = {
  if isTestEnv() then 
      sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
  else
    let firstUser = base58'6TdaXEfhnjYquvPf3yV7MFxt2CbgFmaqsvGwkKfXtKi4'
    let secondUser = base58'E23yUg8eun5nXB1nZRDf7RTyRADKxQhGNXdpTYonEvtU'
    let thirdUser = base58'Ga8WEBTPXbHuoXRD355mQ6ms8PsM2RFYKeA1mEP32CFe'

    let firstUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], firstUser)) then 1
        else 0
    let secondUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], secondUser)) then 1
        else 0
    let thirdUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], thirdUser)) then 1
        else 0
    let signaturesCount = firstUserSigned + secondUserSigned + thirdUserSigned

    match (tx) {
        case _ => signaturesCount >= 2
    }
}
