{-# STDLIB_VERSION 5 #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# CONTENT_TYPE DAPP #-}
func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}

func tryGetIntegerExternal(address: Address, key: String) = {
    match getInteger(address, key) {
        case b:Int => b
        case _ => 0
    }

}

func tryGetString(key: String) = {
    tryGetStringExternal(this,key)
}
func staticKey_couponsAddress() = "static_couponsAddress"
func staticKey_peteAddress() = "static_peteAddress"

func getOracle() = Address(tryGetString("static_oracleAddress").fromBase58String())

func getEggAssetId() = tryGetStringExternal(getOracle(),"static_eggAssetId").fromBase58String() #base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'

func getTurtleIncubatorAddress() =  Address(tryGetStringExternal(getOracle(),"static_turtleIncubatorAddress").fromBase58String()) #base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
func getTurtleBreederAddress() =  Address(tryGetStringExternal(getOracle(),"static_turtleBreederAddress").fromBase58String()) #base58'3PDVuU45H7Eh5dmtNbnRNRStGwULA7NY6Hb'
func getIncubatorAddress()=  Address(tryGetStringExternal(getOracle(),"static_incubatorAddress").fromBase58String()) #base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
func getBreederAddress()=  Address(tryGetStringExternal(getOracle(),"static_breederAddress").fromBase58String()) #base58'3PDVuU45H7Eh5dmtNbnRNRStGwULA7NY6Hb'
func getItemsAddress() =  Address(tryGetStringExternal(getOracle(),"static_itemsAddress").fromBase58String())
func getFeeAggregatorAddress() =  Address(tryGetStringExternal(getOracle(),"static_feeAggregator").fromBase58String())
func getBurnAddress() = Address(tryGetStringExternal(getOracle(),"static_burnAddress").fromBase58String())
func getMarketPlaceProxy() = Address(tryGetStringExternal(getOracle(),"static_marketPlaceProxyAddress").fromBase58String())
func getBuybackAddress() = Address(tryGetStringExternal(getOracle(),"static_buybackAddress").fromBase58String())
func getCouponsAddress() = Address(tryGetStringExternal(getOracle(),staticKey_couponsAddress()).fromBase58String()) 
func getPeteAddress() = Address(tryGetStringExternal(getOracle(),staticKey_peteAddress()).fromBase58String()) 

let kGlobalCounter = "GLOBAL_COUNTER"

func getFeePercent() = tryGetIntegerExternal(getOracle(),"static_marketPlaceFee")
func getArtefactsFeePercent() = tryGetIntegerExternal(getOracle(),"static_marketPlaceFeeArtefacts")

func tryGetInteger(key: String) = {
  tryGetIntegerExternal(this,key)
}


func tryGetBoolean(key: String) = {
    match getBoolean(this, key) {
        case b:Boolean => b
        case _ => false
    }
}

func getGlobalCounter() = {
  tryGetInteger(kGlobalCounter)
}

func getAssetGenotype(assetId: ByteVector) = {
  if (assetInfo(assetId).value().issuer == getPeteAddress()) then "PETE" else 
  if (assetInfo(assetId).value().issuer == getItemsAddress()) then "ART" else 
  let asset1 = match getString(getIncubatorAddress(), assetId.toBase58String()) {
        case b:String => b
        case _ => ""
    }
  if (asset1 != "") then asset1  else 
    let asset2 = match getString(getBreederAddress(), assetId.toBase58String()) {
      case c:String => c
      case _ => ""
    }
    if (asset2 != "") then asset2 else 
      let asset3 = match getString(getTurtleIncubatorAddress(), assetId.toBase58String()) {
          case b:String => b
          case _ => ""
      }
      if (asset3 != "") then asset3  else 
        let asset4 = match getString(getTurtleBreederAddress(), assetId.toBase58String()) {
          case c:String => c
          case _ => ""
        }
        if (asset4 != "") then asset4 else ""
    
  
  
  
}

func getBidCancelResults(auctionId: String, bidId: String) = {
  let isEggSell = tryGetBoolean("auction_" + auctionId + "_eggSell")
  let paymentAssetId = if isEggSell == true then getEggAssetId() else unit

  let assetId = this.getStringValue("auction_" + auctionId + "_assetId")

  let bidAuthor = tryGetString("auction_" + auctionId + "_bid_" + bidId + "_author")
  let bidAmount = tryGetInteger("auction_" + auctionId + "_bid_" + bidId + "_amount")
  [
    StringEntry("assetId_" + assetId + "_bid_" + bidId + "_data", "{\"auctionId\": \"" + auctionId + "\", \"author\": \"" + bidAuthor + "\", \"amount\": \"" + bidAmount.toString() + "\", \"status\": \"cancelled\"}"),
    StringEntry("auction_" + auctionId + "_bid_" + bidId + "_status", "cancelled"),
    DeleteEntry("address_" + bidAuthor + "_auction_" + auctionId + "_bid_" + bidId),
    ScriptTransfer(Address(bidAuthor.fromBase58String()), bidAmount, paymentAssetId)
  ]
}

func getBool(key: String) = {
  match getBoolean(this, key) {
      case b:Boolean => b
      case _ => false
  }
}

func isTestEnv()={
  getBool("TESTENV")
}

@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("MCO: admin only") else 
  [
    StringEntry("static_oracleAddress",oracle)
  ]

}

@Callable(i)
func initAuction(startPrice: Int, instantPrice: Int, description: String, eggSell: String) = {
  let globalCounter = getGlobalCounter()
  let auctionId = i.transactionId.toBase58String() + globalCounter.toString()
  let pmt = i.payments[0].value()
  let assetId = pmt.assetId.value()

  let asset = getAssetGenotype(assetId)

  if (pmt.amount != 1) then throw("MIA: NFT is not attached") else
  if (eggSell == "true") then throw("MIA: Same rules for everyone!") else
  if (asset == "") then {
    throw("MIA: You can only sell an NFT-duck created in incubator or breeder")
  } else {
    [
      StringEntry("auction_" + auctionId + "_status", "open"),
      BooleanEntry("auction_" + auctionId + "_eggSell", eggSell == "true"),
      IntegerEntry(kGlobalCounter, globalCounter + 1),
      StringEntry("auction_" + assetId.toBase58String() + "_last", auctionId),
      StringEntry("auction_" + auctionId + "_assetGen", asset),
      StringEntry("auction_" + auctionId + "_assetId", assetId.toBase58String()),
      IntegerEntry("auction_" + auctionId + "_startedAt", lastBlock.timestamp),
      StringEntry("auction_" + auctionId + "_owner", i.originCaller.toString()),
      StringEntry("auction_" + auctionId + "_description", description),
      IntegerEntry("auction_" + auctionId + "_startPrice", startPrice),
      BooleanEntry("auction_" + auctionId + "_isArtefact", assetInfo(assetId).value().issuer == getItemsAddress()),
      BooleanEntry("auction_" + auctionId + "_isTurtle", assetInfo(assetId).value().issuer == getTurtleBreederAddress() || assetInfo(assetId).value().issuer == getTurtleIncubatorAddress()),
      BooleanEntry("auction_" + auctionId + "_isThird", assetInfo(assetId).value().issuer == getTurtleBreederAddress()),
      IntegerEntry("auction_" + auctionId + "_instantPrice", instantPrice),
      StringEntry("address_" + i.originCaller.toString() + "_auction_" + auctionId + "_lockedNFT", assetId.toBase58String())
    ]
  }
}

@Callable(i)
func cancelAuction(auctionId: String) = {
  let auctionOwner = tryGetString("auction_" + auctionId + "_owner")
  if (i.originCaller.toString() != auctionOwner) then {
    throw("MCA: Only allowed to auction owner")
  } else {
    if (tryGetString("auction_" + auctionId + "_status") != "open") then {
      throw("MCA: auction is close")
    } else {
      [
        StringEntry("auction_" + auctionId + "_status", "cancelled"),
        DeleteEntry("address_" + auctionOwner + "_auction_" + auctionId + "_lockedNFT"),
        ScriptTransfer(i.originCaller, 1, this.getStringValue("auction_" + auctionId + "_assetId").fromBase58String())
      ]
    }
  }
}

@Callable(i)
func instantBuy(auctionId: String) = {
  let isEggSell = tryGetBoolean("auction_" + auctionId + "_eggSell")
  let paymentAssetId = if isEggSell == true then getEggAssetId() else unit
  let paymentAssetName = if isEggSell == true then "EGG" else "WAVES"

  let pmt = i.payments[0].value()
  let amount = pmt.amount
  let assetId = tryGetString("auction_" + auctionId + "_assetId")
  let bidId = i.transactionId.toBase58String()

  let auctionStatus = tryGetString("auction_" + auctionId + "_status")

  let finalFee = if tryGetBoolean("auction_" + auctionId + "_isArtefact") == true then getArtefactsFeePercent() else getFeePercent()

  if (pmt.assetId != paymentAssetId) then {
    throw("MIB: Auction does only support " + paymentAssetName + " payments.")
  } else {
    if (auctionStatus != "open") then {
      throw("MIB: Auction is closed. You cannot place a bid.")
    } else {
      let instantPrice = tryGetInteger("auction_" + auctionId + "_instantPrice")
      if (instantPrice > amount) then {
        throw("MIB: For instant purchase you need to pay at least " + instantPrice.toString())
      } else {
        let auctionOwner = tryGetString("auction_" + auctionId + "_owner")
        let recordPrice = tryGetInteger(assetId+"_recordPrice")
        let newRecordPrice = max([recordPrice, amount])
              let burnCall = if isEggSell then {
                strict invokeResult = invoke(getBurnAddress(), "burnAttachedPayments", [],[AttachedPayment(getEggAssetId(),fraction(amount, finalFee, 1000))])
                []
                }else [
            ScriptTransfer(getFeeAggregatorAddress(),fraction(amount, fraction(finalFee,6,10), 1000),unit),
            ScriptTransfer(getBuybackAddress(),fraction(amount, fraction(finalFee,6,10), 1000),unit)]
        let caller = if getMarketPlaceProxy() == i.caller then i.originCaller else i.caller
        strict recordAction = if amount > 50_0000_0000 then invoke(getCouponsAddress(),"recordAction",["BUY50"],[]) else
                              if amount > 20_0000_0000 then invoke(getCouponsAddress(),"recordAction",["BUY20"],[]) else
                              if amount > 5_0000_0000 then invoke(getCouponsAddress(),"recordAction",["BUY5"],[]) else nil
        ([
          StringEntry("auction_" + auctionId + "_status", "finished"),
          IntegerEntry("auction_" + auctionId + "_finalPrice", amount),
          IntegerEntry(assetId + "_recordPrice", newRecordPrice),
          StringEntry("assetId_" + assetId + "_bid_" + bidId + "_data", "{\"auctionId\": \"" + auctionId + "\", \"author\": \"" + caller.toString() + "\", \"amount\": \"" + amount.toString() + "\", \"status\": \"finished\"}"),
          DeleteEntry("address_" + auctionOwner + "_auction_" + auctionId + "_lockedNFT"),
          ScriptTransfer(caller, 1, this.getStringValue("auction_" + auctionId + "_assetId").fromBase58String()),
          ScriptTransfer(addressFromStringValue(auctionOwner), fraction(amount, 1000 - finalFee, 1000), paymentAssetId)
        ]++burnCall,this.getStringValue("auction_" + auctionId + "_assetId").fromBase58String())
      }
    }
  }
}

@Callable(i)
func placeBid(auctionId: String) = {
  let isEggSell = tryGetBoolean("auction_" + auctionId + "_eggSell")
  let paymentAssetId = if isEggSell == true then getEggAssetId() else unit
  let paymentAssetName = if isEggSell == true then "EGG" else "WAVES"

  let pmt = i.payments[0].value()
  let amount = pmt.amount
  let bidId = i.transactionId.toBase58String()
  let assetId = this.getStringValue("auction_" + auctionId + "_assetId")

  if (pmt.assetId != paymentAssetId) then {
    throw("MPB: Auction does only support " + paymentAssetName + " payments.")
  } else {
    let minPrice = tryGetInteger("auction_" + auctionId + "_startPrice")
    if (minPrice > amount) then {
      throw("MPB: The minimal initial price is set as " + minPrice.toString())
    } else {
      [
        StringEntry("auction_" + auctionId + "_bid_" + bidId + "_author", i.originCaller.toString()),
        StringEntry("assetId_" + assetId + "_bid_" + bidId + "_data", "{\"auctionId\": \"" + auctionId + "\", \"author\": \"" + i.originCaller.toString() + "\", \"amount\": \"" + amount.toString() + "\", \"status\": \"open\"}"),
        IntegerEntry("auction_" + auctionId + "_bid_" + bidId + "_amount", amount),
        StringEntry("address_" + i.originCaller.toString() + "_auction_" + auctionId + "_bid_" + bidId, assetId),
        StringEntry("auction_" + auctionId + "_bid_" + bidId + "_status", "open")
      ]    
    }
  }
}

@Callable(i)
func cancelBid(auctionId: String, bidId: String) = {
  let assetId = this.getStringValue("auction_" + auctionId + "_assetId")

  let bidAuthor = tryGetString("auction_" + auctionId + "_bid_" + bidId + "_author")
  let bidAmount = tryGetInteger("auction_" + auctionId + "_bid_" + bidId + "_amount")

  if (i.originCaller.toString() != bidAuthor) then {
    throw("MCB: Only allowed to the bid author")
  } else {
    if (tryGetString("auction_" + auctionId + "_bid_" + bidId + "_status") != "open") then {
      throw("MCB: bid is not open")
    } else {
      getBidCancelResults(auctionId, bidId)
    }
  }
}

@Callable(i)
func acceptBid(auctionId: String, bidId: String) = {
  let isEggSell = tryGetBoolean("auction_" + auctionId + "_eggSell")
  let paymentAssetId = if isEggSell == true then getEggAssetId() else unit

  let auctionOwner = tryGetString("auction_" + auctionId + "_owner")
  let bidAuthor = tryGetString("auction_" + auctionId + "_bid_" + bidId + "_author")
  let bidAmount = tryGetInteger("auction_" + auctionId + "_bid_" + bidId + "_amount")
  let bidStatus = tryGetString("auction_" + auctionId + "_bid_" + bidId + "_status")
  let assetId = tryGetString("auction_" + auctionId + "_assetId")


  let finalFee = if tryGetBoolean("auction_" + auctionId + "_isArtefact") == true then getArtefactsFeePercent() else getFeePercent()

  if (i.originCaller.toString() != auctionOwner) then {
    throw("MAB: Only allowed to auction owner")
  } else {
    if (bidStatus != "open") then {
      throw("MAB: Bid was cancelled and cannot be accepted")
    } else if (tryGetString("auction_" + auctionId + "_status") != "open") then {
      throw("MAB: Auction was closed")
    } else {
      let recordPrice = tryGetInteger(assetId+"_recordPrice")
      let newRecordPrice = max([recordPrice, bidAmount])
              let burnCall = if isEggSell then {
                strict invokeResult = invoke(getBurnAddress(), "burnAttachedPayments", [],[AttachedPayment(getEggAssetId(),fraction(bidAmount, finalFee, 1000))])
                []
                }else [
                  ScriptTransfer(getFeeAggregatorAddress(),fraction(bidAmount, fraction(finalFee,6,10), 1000),unit),
                  ScriptTransfer(getBuybackAddress(),fraction(bidAmount, fraction(finalFee,6,10), 1000),unit)
        ]
      [
        StringEntry("auction_" + auctionId + "_bid_" + bidId + "_status", "finished"),
        StringEntry("auction_" + auctionId + "_status", "finished"),
        StringEntry("assetId_" + assetId + "_bid_" + bidId + "_data", "{\"auctionId\": \"" + auctionId + "\", \"author\": \"" + i.originCaller.toString() + "\", \"amount\": \"" + bidAmount.toString() + "\", \"status\": \"finished\"}"),
        IntegerEntry("auction_" + auctionId + "_finalPrice", bidAmount),
        IntegerEntry(assetId + "_recordPrice", newRecordPrice),
        DeleteEntry("address_" + bidAuthor + "_auction_" + auctionId + "_bid_" + bidId),
        DeleteEntry("address_" + auctionOwner + "_auction_" + auctionId + "_lockedNFT"),
        ScriptTransfer(i.originCaller, fraction(bidAmount, 1000 - finalFee, 1000), paymentAssetId),
        ScriptTransfer(addressFromStringValue(bidAuthor), 1, assetId.fromBase58String())
      ]++burnCall
    }
  }
}


@Verifier(tx)
func verify() = {
  if isTestEnv() then 
      sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
  else
    let firstUser = base58'6TdaXEfhnjYquvPf3yV7MFxt2CbgFmaqsvGwkKfXtKi4'
    let secondUser = base58'E23yUg8eun5nXB1nZRDf7RTyRADKxQhGNXdpTYonEvtU'
    let thirdUser = base58'Ga8WEBTPXbHuoXRD355mQ6ms8PsM2RFYKeA1mEP32CFe'

    let firstUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], firstUser)) then 1
        else 0
    let secondUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], secondUser)) then 1
        else 0
    let thirdUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], thirdUser)) then 1
        else 0
    let signaturesCount = firstUserSigned + secondUserSigned + thirdUserSigned

    match (tx) {
        case _ => signaturesCount >= 2
    }
}