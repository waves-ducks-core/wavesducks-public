{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}
func tryGetString(key: String) = {
    tryGetStringExternal(this,key)
}

func staticKey_oracleAddress() = "static_oracleAddress"
func staticKey_extraFee() = "static_extraFee"
func staticKey_feeAggregator() = "static_feeAggregator"
func staticKey_refContractAddress() = "static_refContractAddress"
func staticKey_caniRebirthAddress() = "static_canineRebirthAddress"
func staticKey_caniFarmingAddress() = "static_canineStakingAddress"

func getOracle() = Address(tryGetString(staticKey_oracleAddress()).fromBase58String())
func getFeeAggregator() = Address(tryGetStringExternal(getOracle(),staticKey_feeAggregator()).fromBase58String())
func getMintAssetId() = unit
func getBurnAddress() = Address(tryGetStringExternal(getOracle(),"static_burnAddress").fromBase58String())
func getRefContractAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_refContractAddress()).fromBase58String()) #base58'3P8ejTkfRpz9WqCwCuihesNXU5k3zmFFfVe'
func getCaniRebirthAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_caniRebirthAddress()).fromBase58String()) #base58'3PCC6fVHNa6289DTDmcUo3RuLaFmteZZsmQ'
func getCaniFarmingAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_caniFarmingAddress()).fromBase58String()) #base58'3PCC6fVHNa6289DTDmcUo3RuLaFmteZZsmQ'


func checkAdditionalPayment(payment: AttachedPayment)= {
  if isDefined(payment.assetId) then throw("BDCAP: Please attach waves") else
  let feeAmount = getIntegerValue(getOracle(),staticKey_extraFee())
  if payment.amount != feeAmount then throw("BDCAP: Please attach exactly "+feeAmount.toString()+" amount of wavelets") else
  [ScriptTransfer(getFeeAggregator(), feeAmount, unit)]

}

#TODO: make it configurable through oracle
let delayForHatching = 2

let HatchingStarted = "HATCHING_STARTED"
let HatchingFinished = "HATCHING_FINISHED"

func isLocked() = {
  let masterAddress = Address(base58'3PEPftf2kWZDmAaWBjs6BUJa9957kiA2PkU')
  match getInteger(masterAddress, "egglock") {
        case b:Int => b
        case _ => 0
    }
}

func getHatchingStatusKey(address: String, txId: ByteVector) = {
  # stores the fact of hatching, 
  # if key exists = hatching started 
  # if false = not claimed
  # if true = claimed and nft id will be in the key of getCANIIdKey
  address + "_" + txId.toBase58String() +  "_status"
}

func getHatchingFinishHeightKey(address: String, txId: ByteVector) = {
  address + "_" + txId.toBase58String() +  "_fh"
}

func getCANIIdKey(address: String, txId: ByteVector) = {
  address + "_" + txId.toBase58String() +  "_di"
}

func getCANIStatsKey(genString: String) = {
  "stats_" + genString + "_amount"
}

func tryGetInteger(key: String) = {
    let val = match getInteger(this, key) {
        case b:Int => b
        case _ => 0
    }
    val
}

##
#[
#  {
#    "key": "discountCoefficient",
#    "type": "integer",
#    "value": 10
#  }
#]
let discountCoefficient = tryGetInteger("discountCoefficient")	

func getRandomNumber(variants: Int, txId: ByteVector, hatchingFinishHeight: Int, offset: Int) = {
  let randomSeedBlock = blockInfoByHeight(hatchingFinishHeight-1).value()
  let randomHash = sha256(txId + randomSeedBlock.vrf.value())
  randomHash.toInt(offset*8) % variants
}

func select(color: String)={
    let oldGenes = []
    let newGenes = [("CANI-AAAAAAAA-G" + color, "8A-G"),("CANI-BBBBBBBB-G" + color, "8B-G"),("CANI-CCCCCCCC-G" + color, "8C-G"),("CANI-DDDDDDDD-G" + color, "8D-G")]
    (oldGenes++newGenes, newGenes)
}

func getRandomName(txId: ByteVector, hatchingFinishHeight: Int, all: Boolean) = {
    let colorRandom = getRandomNumber(4,  txId, hatchingFinishHeight, 1)
    let color = getElement(["A","B","C","D"],colorRandom)

    let colorSelect = select(color)

    let toPickFrom = if all then colorSelect._1 else colorSelect._2
    let typeRandom = getRandomNumber(size(toPickFrom), txId, hatchingFinishHeight, 0)
    
    getElement(toPickFrom,typeRandom)   
    
}

let typesAmount = size(select("R")._1)-1


func countEggsNeededAmount(totalCANIsAmount: Int) = {
  let n = totalCANIsAmount
  let g = discountCoefficient
  let t = typesAmount
  let price = pow((100 + (n*g)/(10*t)), 2, 5, 1, 2, DOWN)+55
  price * 1500000
}

func asBoolean(value: Any) = match value {
  case boolean: Boolean => boolean
  case _ => throw("TI: wrong type, expected: Boolean")
}

@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("ICU: admin only") else 
  [
    StringEntry("static_oracleAddress",oracle)
  ]

}

@Callable(i)
func issueJackpot(address: String, txIdStr: String, gen: String) = {
  if (i.caller != getCaniRebirthAddress() && i.caller != this) then {
    throw("ISJ: admin or rebirth only")
  } else {
    let txId = fromBase58String(txIdStr)
    let hatchingStatusKey = getHatchingStatusKey(address, txId)
    let finishHeightKey = getHatchingFinishHeightKey(address, txId)

    let totalDucksAmount = tryGetInteger("cani_amount")
    let eggsNeeded = countEggsNeededAmount(totalDucksAmount)

    let (duckGen, farmGen) = ("CANI-"+gen+"-JU", "8W-J")
    let description = "{\"genotype\": \"" + duckGen + "\", \"crossbreeding\": true}"

    let asset = Issue(duckGen, description, 1, 0, false, unit, height)
    let assetId = asset.calculateAssetId()

    let duckIdKey = getCANIIdKey(address, txId)
    let valueDuckIdKeyExits = tryGetString(duckIdKey)
    if valueDuckIdKeyExits != "" then throw("ISJ: You will override following duckId :"+duckIdKey+" make sure that your txId is unique!") else
    ([
      IntegerEntry(getHatchingFinishHeightKey(address, txId), height),
      IntegerEntry("cani_amount", totalDucksAmount + 1),
      IntegerEntry("cani_last_price", eggsNeeded / 1500000),
    
      StringEntry(hatchingStatusKey, HatchingFinished),
      StringEntry(duckIdKey, assetId.toBase58String()),
      StringEntry(assetId.toBase58String(), duckIdKey),
      IntegerEntry(getCANIStatsKey(duckGen), tryGetInteger(getCANIStatsKey(duckGen)) + 1),
      IntegerEntry("stats_"+farmGen+"_quantity", tryGetInteger("stats_"+farmGen+"_quantity") + 1),
      asset,
      ScriptTransfer(addressFromString(address).value(), 1, assetId)
    ], assetId.toBase58String())
  }
}

@Callable(i)
func issueFree(address: String, txIdStr: String) = {
  if (i.caller != getCaniRebirthAddress()) then {
    throw("TISFD: rebirth only")
  } else {
    let txId = fromBase58String(txIdStr)
    let hatchingStatusKey = getHatchingStatusKey(address, txId)
    let finishHeightKey = getHatchingFinishHeightKey(address, txId)

    let totalDucksAmount = tryGetInteger("cani_amount")
    let eggsNeeded = countEggsNeededAmount(totalDucksAmount)

    let (CANIGen, farmGen) = getRandomName(txId, valueOrErrorMessage(transactionHeightById(txId),txIdStr+ " not found "+toBase58String(txId)) + 1, true)
    let description = "{\"genotype\": \"" + CANIGen + "\", \"crossbreeding\": true}"

    let asset = Issue(CANIGen, description, 1, 0, false, unit, height)
    let assetId = asset.calculateAssetId()

    let amount = tryGetInteger(getCANIStatsKey(CANIGen)) + 1

    let duckIdKey = getCANIIdKey(address, txId)
    ([
      IntegerEntry(getHatchingFinishHeightKey(address, txId), height),
      IntegerEntry("cani_amount", totalDucksAmount + 1),
      IntegerEntry("cani_last_price", eggsNeeded / 1500000),
      StringEntry(hatchingStatusKey, HatchingFinished),
      StringEntry(duckIdKey, assetId.toBase58String()),
      StringEntry(assetId.toBase58String(), duckIdKey),
      IntegerEntry(getCANIStatsKey(CANIGen), amount),
      IntegerEntry("stats_"+farmGen+"_quantity", tryGetInteger("stats_"+farmGen+"_quantity") + 1),
      asset,
      ScriptTransfer(addressFromString(address).value(), 1, assetId)
    ], assetId.toBase58String())
  }
}

@Callable(i)	
func setDiscount(val: Int) = {	
  if (i.caller != this) then {	
    throw("admin_only")	
  } else {	
    [IntegerEntry("discountCoefficient", val)]	
  }	
}

@Callable(i)
func startHatching(refererAddress: String) = {
  strict feeValidate = checkAdditionalPayment(i.payments[0])
  #TODO: add validation that feeValidate payment is added!
  if (isLocked() > 0) then {
    throw("EGG operations are temporarily locked")
  } else {
    let totalCaniAmount = tryGetInteger("cani_amount")
    let eggsNeeded = countEggsNeededAmount(totalCaniAmount)


    let results = [
        StringEntry(getHatchingStatusKey(i.originCaller.toString(), i.transactionId), HatchingStarted),
        IntegerEntry(getHatchingFinishHeightKey(i.originCaller.toString(), i.transactionId), height + delayForHatching),
        IntegerEntry("cani_amount", totalCaniAmount + 1),
        IntegerEntry("cani_last_price", eggsNeeded / 1500000)
      ]

    let leftToPay = eggsNeeded
    let firstPayment = i.payments[1].value()
    if (firstPayment.assetId != getMintAssetId()) then throw("TB: You can attach only WAVES") else 
    if (firstPayment.amount < leftToPay) then throw("TB: To breed a Canine you following amount of WAVES: " + leftToPay.toString()+ " "+i.caller.toString()) else
    strict addMore = invoke(getCaniFarmingAddress(), "addWavesAndStakeMore", [], [AttachedPayment(unit, leftToPay)])

    let refund = if size(i.payments) == 2 then [ScriptTransfer(i.caller, i.payments[1].amount - leftToPay, getMintAssetId())] else []
   
    results ++ refund++feeValidate

  }
}


@Callable(i)
func finishHatching(txIdStr: String) = {
  strict feeValidate = checkAdditionalPayment(i.payments[0])
  #TODO: add validation that feeValidate payment is added!
  let txId = fromBase58String(txIdStr)
  let hatchingStatusKey = getHatchingStatusKey(i.caller.toString(), txId)
  let finishHeightKey = getHatchingFinishHeightKey(i.caller.toString(), txId)
  let CANIIdKey = getCANIIdKey(i.caller.toString(), txId)

  let hatchingTxStatus = getStringValue(this, hatchingStatusKey)
  let hatchingFinishHeight = getIntegerValue(this, finishHeightKey)
  
  if (hatchingTxStatus == HatchingFinished) then {
    let CANIId = getStringValue(this, getCANIIdKey(i.caller.toString(), txId))
    throw("The Cani was hatched and claimed already, here is the folowing: " + CANIId)
  } else 
    if (hatchingFinishHeight > height) then throw("Hatching is not finished yet " + (hatchingFinishHeight - height).toString() + " blocks remaining, it will take around " +  (hatchingFinishHeight - height).toString() + " minutes")
    else {
      let (CANIGen, farmGen) = getRandomName(txId, hatchingFinishHeight, false)
      let description = "{\"genotype\": \"" + CANIGen + "\", \"crossbreeding\": true}"

      let asset = Issue(CANIGen, description, 1, 0, false, unit, hatchingFinishHeight)
      let assetId = asset.calculateAssetId()

      let amount = tryGetInteger(getCANIStatsKey(CANIGen)) + 1

      [
        StringEntry(hatchingStatusKey, HatchingFinished),
        StringEntry(CANIIdKey, assetId.toBase58String()),
        StringEntry(assetId.toBase58String(), CANIIdKey),
        IntegerEntry(getCANIStatsKey(CANIGen), amount),
        IntegerEntry("stats_"+farmGen+"_quantity", tryGetInteger("stats_"+farmGen+"_quantity") + 1),
        asset,
        ScriptTransfer(i.caller, 1, assetId)
      ]++feeValidate
    }
}


@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)

        