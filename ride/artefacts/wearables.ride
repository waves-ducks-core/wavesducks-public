{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
func getBool(key: String) = {
  match getBoolean(this, key) {
      case b:Boolean => b
      case _ => false
  }
}

func isTestEnv()={
  getBool("TESTENV")
}
func staticKey_oracleAddress() = "static_oracleAddress"
func staticKey_breederAddress() = "static_breederAddress"
func staticKey_itemsAddress() = "static_itemsAddress"
func staticKey_extraFee() = "static_extraFee"
func staticKey_extraFeeRemove() = "static_extraFeeRemove"
func staticKey_feeAggregator() = "static_feeAggregator"


let wearables = [
  "ART-CAPE", # Magic Cape
  "ART-HAT", # Quacker Hat
  "ART-XSCARF",
  "ART-XSWEATER"
]

func keyArtefactDuck(duckId: String, wearable: String) = duckId+"_"+wearable
func keyTypesDuck(duckId: String, type: String) = duckId+"_"+type


func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}



func tryGetString(key: String) = {
    tryGetStringExternal(this,key)
}

func asInt(value: Any) = match value {
  case int: Int => int
  case _ => throw("wrong type, expected: Int")
}

func asString(value: Any) = match value {
  case string: String => string
  case _ => throw("wrong type, expected: String")
}

func getOracle() = Address(tryGetString(staticKey_oracleAddress()).fromBase58String())
func getBreederAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_breederAddress()).fromBase58String()) #base58'3PDVuU45H7Eh5dmtNbnRNRStGwULA7NY6Hb'
func getItemsAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_itemsAddress()).fromBase58String())
func getFeeAggregator() = Address(tryGetStringExternal(getOracle(),staticKey_feeAggregator()).fromBase58String())
func getTurtleIncubatorAddress() =  Address(tryGetStringExternal(getOracle(),"static_turtleIncubatorAddress").fromBase58String()) #base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
func getTurtleBreederAddress() =  Address(tryGetStringExternal(getOracle(),"static_turtleBreederAddress").fromBase58String()) #base58'3PDVuU45H7Eh5dmtNbnRNRStGwULA7NY6Hb'
func getIncubatorAddress()=  Address(tryGetStringExternal(getOracle(),"static_incubatorAddress").fromBase58String()) #base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
func getCanineIncubatorAddress()=  Address(tryGetStringExternal(getOracle(),"static_canineIncubatorAddress").fromBase58String()) #base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
func getCanineBreederAddress()=  Address(tryGetStringExternal(getOracle(),"static_canineBreederAddress").fromBase58String()) #base58'3PDVuU45H7Eh5dmtNbnRNRStGwULA7NY6Hb'
func getFelineIncubatorAddress()=  Address(tryGetStringExternal(getOracle(),"static_felineIncubatorAddress").fromBase58String()) #base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
func getFelineBreederAddress()=  Address(tryGetStringExternal(getOracle(),"static_felineBreederAddress").fromBase58String()) #base58'3PDVuU45H7Eh5dmtNbnRNRStGwULA7NY6Hb'
func getMutantBreederAddress()=  Address(tryGetStringExternal(getOracle(),"static_mutantIncubatorAddress").fromBase58String()) #base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'

func checkAdditionalPayment(payment: AttachedPayment, amountOverride: Int)= {
  if isDefined(payment.assetId) then throw("WCAP: Please attach waves") else
  let feeAmount = if amountOverride!= 0 then amountOverride else getIntegerValue(getOracle(),staticKey_extraFee())
  if payment.amount != feeAmount then throw("WCAP: Please attach exactly "+feeAmount.toString()+" amount of wavelets") else
  [ScriptTransfer(getFeeAggregator(), feeAmount, unit)]

}

func tryGetCosmeticItem(item:String)= {
  let key = "direct_cosmetic_"+item
    match getInteger(getItemsAddress(), key) {
      case a:Int => a
      case _ => unit
    }
}

func tryGetType(wearable: String)= {
  tryGetStringExternal(getItemsAddress(), "type_cosmetic_"+wearable)
  }


func wearItem(assetIdWearAble: String, duckId: String, allTypes: Boolean)={
  strict artefactName = invoke(getItemsAddress(),"checkArtefactDetails",[assetIdWearAble],[]).asString()
  if !containsElement(wearables, artefactName) && !isDefined(tryGetCosmeticItem(artefactName)) then throw("WRITD: Unsupported wearable") else
    let artefactId = tryGetString(keyArtefactDuck(duckId,artefactName))
    strict boostDuck = if artefactName == "ART-XSCARF" then invoke(getItemsAddress(),"manipulateBoost",[69,duckId],[]) else nil
    if artefactId != "" then throw("Duck is already wearing a "+artefactName) else
      let type = tryGetType(artefactName)
      if !allTypes && type != "PET" then throw("You can't attach this item to your NFT! Pets only!") else
      let typeOnDuck = if type != "" then tryGetString(keyTypesDuck(duckId,type))!= "" else throw("Type undefined, please contact admins "+artefactName)
      if typeOnDuck then throw("You can only attach 1 from each type to your duck!") else 

      let typeResult = if type != "" then [StringEntry(keyTypesDuck(duckId,type), assetIdWearAble)] else []
      [
        StringEntry(keyArtefactDuck(duckId,artefactName), assetIdWearAble)
        
      ]++typeResult
}

func tryGetBooleanExternal(address: Address, key: String) = {
    match getBoolean(address, key) {
        case b:Boolean => b
        case _ => false
    }
}


func getIfAllTypesAllowed(assetId: ByteVector) = {
  let issuer = assetInfo(assetId).value().issuer
  let blacklisted = tryGetBooleanExternal(issuer,assetId.toBase58String() + "_blacklisted")
  if (blacklisted) then throw("GO FUCK YOURSELF") else
  let name = assetInfo(assetId).value().name
  #Ducks
  if (issuer == getIncubatorAddress() || issuer == getBreederAddress()) then true else
  #Turtles
  if (issuer == getTurtleIncubatorAddress() || issuer == getTurtleBreederAddress()) then  false else
  #Canines
  if (issuer == getCanineIncubatorAddress() || issuer == getCanineBreederAddress()) then false else
  #Felines
  if (issuer == getFelineIncubatorAddress() || issuer == getFelineBreederAddress()) then false else
  #Mutants
  if (issuer == getMutantBreederAddress()) then false else
  throw("MAG: Asset is not supported")
    

}


@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("admin only") else 
  [
    StringEntry(staticKey_oracleAddress(),oracle)
  ]

}

@Callable(i)
func wearItemToDuck() = {
  let firstPayment = i.payments[0].value()
  let secondPayment = i.payments[1].value()
  let validPayment = checkAdditionalPayment(i.payments[2],0)
  let duckId = firstPayment.assetId.value().toBase58String()
  let secondAssetId = secondPayment.assetId.value().toBase58String()
  if (firstPayment.amount != 1 || secondPayment.amount != 1) then throw("WRITD: NFT is not attached") else
  let allTypes = getIfAllTypesAllowed(firstPayment.assetId.value())
  wearItem(secondAssetId,duckId,allTypes)++[
    ScriptTransfer(i.caller, 1, firstPayment.assetId)
  ]++validPayment

}

@Callable(i)
func removeItemFromDuck(burnItem: Boolean, artefactName:String) = {
  let wavesFee = if burnItem then 0 else getIntegerValue(getOracle(),staticKey_extraFeeRemove())
  let duckPayment = i.payments[0].value()
  let roboDuckPayment = i.payments[1].value()
  let validPayment = checkAdditionalPayment(i.payments[2],wavesFee)

  let duckId = duckPayment.assetId.value().toBase58String()
  let roboDuckId = roboDuckPayment.assetId.value().toBase58String()

  if (duckPayment.amount != 1 || roboDuckPayment.amount != 1) then throw("WRITD: NFT is not attached") else
  strict children = invoke(getBreederAddress(),"validateAndGetChildren",[duckId],[]).asInt()
  
  strict artefactNameRoboduck = invoke(getItemsAddress(),"checkArtefactDetails",[roboDuckId],[]).asString()
  if artefactNameRoboduck != "ART-ROBODUCK" then throw("Only rododuck can remove items!") else
  if !containsElement(wearables, artefactName) && !isDefined(tryGetCosmeticItem(artefactName)) then throw("WRITD: Unsupported wearable") else
    let artefactId = tryGetString(keyArtefactDuck(duckId,artefactName))
    strict boostDuck = if artefactName == "ART-XSCARF" then invoke(getItemsAddress(),"manipulateBoost",[69,duckId],[]) else nil
    if artefactId == "" then throw("Duck not wearing a "+artefactName) else
    let type = tryGetType(artefactName)
    let typeResult = if type != "" then [DeleteEntry(keyTypesDuck(duckId,type))] else []
    let burn = if burnItem then [Burn(artefactId.fromBase58String(),1)] else [ScriptTransfer(i.caller, 1, artefactId.fromBase58String())]
      [
        DeleteEntry(keyArtefactDuck(duckId,artefactName)),
        ScriptTransfer(i.caller, 1, duckPayment.assetId),
        Burn(roboDuckId.fromBase58String(),1)
        
      ]++burn++validPayment++typeResult
}

@Callable(i)
func wearXItemsToDuck()= {
  let validPayment = checkAdditionalPayment(i.payments[1],0)
  if size(i.payments) < 3 then throw("WWXITD: Please attach at least 1 item and 1 duck!") else 
  if size(i.payments) > 7 then throw("WWXITD: You can only attach 5 items and one duck!") else
    func handleItem(acc: List[StringEntry|ScriptTransfer], payment: AttachedPayment) = {
        let index  = indexOf(i.payments,payment)
        if index ==0 then
          let duckId = payment.assetId.value().toBase58String()
          if (payment.amount != 1 ) then throw("WRITD: Duck is not attached") else
          strict children = invoke(getBreederAddress(),"validateAndGetChildren",[duckId],[]).asInt()
          acc++[
            ScriptTransfer(i.caller, 1, payment.assetId)
          ]
        else
            acc++wearItem(payment.assetId.value().toBase58String(),i.payments[1].assetId.value().toBase58String(),true)

    }
    FOLD<6>(i.payments, [], handleItem)++validPayment
}


@Verifier(tx)
func verify() = {
  if isTestEnv() then 
      sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
  else
    let firstUser = base58'6TdaXEfhnjYquvPf3yV7MFxt2CbgFmaqsvGwkKfXtKi4'
    let secondUser = base58'7DsP2WaMLocbHuUxux7pbXRjTrrZ1TFQPsi5QumS3gr8'
    let thirdUser = base58'BpFWP3p3JgYrrP45xfrKzeMcWMEXoinj4FVPPkUiA8D3'

    let firstUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], firstUser)) then 1
        else 0
    let secondUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], secondUser)) then 1
        else 0
    let thirdUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], thirdUser)) then 1
        else 0
    let signaturesCount = firstUserSigned + secondUserSigned + thirdUserSigned

    match (tx) {
        case _ => signaturesCount >= 2
    }
}   