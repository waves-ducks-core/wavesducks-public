{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func staticKey_oracleAddress() = "static_oracleAddress"
func staticKey_assetId() = "static_assetId"
func staticKey_startTime() = "static_startTime"
func staticKey_endTime() = "static_endTime"

func key_totalTicketIssued() = "total"
func key_lastTxHeight() = "height"
func key_userByTicketNr(number: Int)= "ticket_"+number.toString()
func key_ticketOwner(address: String, number: Int)= "owner_"+address+"_"+number.toString()
func key_winner(winner: String, prize: String) = "winner_"+winner+"_"+prize

func tryGetString(key: String) = {
    match getString(this, key) {
        case a:String => a
        case _ => ""
    }
}

func getOracle() = Address(tryGetString(staticKey_oracleAddress()).fromBase58String())
func getAssetId() = tryGetString(staticKey_assetId()).fromBase58String()

let price = 1_000000
let vrfHeightAdded = 10

func tryGetInteger(key: String) = {
    match getInteger(this, key) {
        case b:Int => b
        case _ => 0
    }

}

func getRandomNumber(variants: Int, txId: ByteVector, hatchingFinishHeight: Int, offset: Int) = {
  let randomSeedBlock = blockInfoByHeight(hatchingFinishHeight-1).value()
  let randomHash = sha256(base58'raffeee' + txId + randomSeedBlock.vrf.value())
  randomHash.toInt(offset) % variants
}

@Callable(i)
func reward()={
    if i.caller != this then throw("Cheater!")else
    let endTime = getIntegerValue(staticKey_endTime())
    if lastBlock.timestamp < endTime then throw("The raffle is still ongoing")else
    let amountSold = getIntegerValue(key_totalTicketIssued())
    #1. 1 Genesis ducks for 100 sold tickets
    #2. 20 EGG for 250 tickets
    #3. 1 obstinates for 500 tickets 
    #4. Jackpot for 1000 tickets 
    #5. 30 EGG for 2500 tickets
    #6. Custom Cosmetic artifact for 5000 tickets
    let tier1 = if amountSold >= 100 then {
        let numbersRandom = getRandomNumber(amountSold, i.transactionId, getIntegerValue(key_lastTxHeight())+vrfHeightAdded, 1)
        let winner = getStringValue(this,key_userByTicketNr(numbersRandom))
        [IntegerEntry(key_winner(winner, "GENESIS"),numbersRandom)]
    } else[]
    let tier2 = if amountSold >= 250 then {
        let numbersRandom = getRandomNumber(amountSold, i.transactionId, getIntegerValue(key_lastTxHeight())+vrfHeightAdded, 2)
        let winner = getStringValue(this,key_userByTicketNr(numbersRandom))
        [IntegerEntry(key_winner(winner, "20EGG"),numbersRandom)]
    } else[]
    let tier3 = if amountSold >= 500 then {
        let numbersRandom = getRandomNumber(amountSold, i.transactionId, getIntegerValue(key_lastTxHeight())+vrfHeightAdded, 3)
        let winner = getStringValue(this,key_userByTicketNr(numbersRandom))
        [IntegerEntry(key_winner(winner, "OBSTI"),numbersRandom)]
    } else[]
    let tier4 = if amountSold >= 1000 then {
        let numbersRandom = getRandomNumber(amountSold, i.transactionId, getIntegerValue(key_lastTxHeight())+vrfHeightAdded, 4)
        let winner = getStringValue(this,key_userByTicketNr(numbersRandom))
        [IntegerEntry(key_winner(winner, "JU"),numbersRandom)]
    } else[]
    let tier5 = if amountSold >= 2500 then {
        let numbersRandom = getRandomNumber(amountSold, i.transactionId, getIntegerValue(key_lastTxHeight())+vrfHeightAdded, 5)
        let winner = getStringValue(this,key_userByTicketNr(numbersRandom))
        [IntegerEntry(key_winner(winner, "30EGG"),numbersRandom)]
    } else[]
    let tier6 = if amountSold >= 5000 then {
        let numbersRandom = getRandomNumber(amountSold, i.transactionId, getIntegerValue(key_lastTxHeight())+vrfHeightAdded, 6)
        let winner = getStringValue(this,key_userByTicketNr(numbersRandom))
        [IntegerEntry(key_winner(winner, "CUSTOM"),numbersRandom)]
    } else[]

    tier1++tier2++tier3++tier4++tier5++tier6
}

@Callable(i)
func setup(oracle: String, assetId: String, startTime: Int, endTime: Int) = {
  if i.caller != this then throw("admin only") else 
  [
    StringEntry(staticKey_oracleAddress(),oracle),
    StringEntry(staticKey_assetId(),assetId),
    IntegerEntry(staticKey_startTime(), startTime),
    IntegerEntry(staticKey_endTime(), endTime)
  ]

}



@Callable(i)
func buyTicket(amount: Int)={
  let totalTickets = tryGetInteger(key_totalTicketIssued())
    let user = i.caller.toString()
    let reductionPerc = if amount > 4 then amount else 0
    let totalPrice = price * amount
    let totalPriceAfterReduction = totalPrice - (totalPrice/100*reductionPerc)
    let pmtUSDT = i.payments[0].value()
    if pmtUSDT.assetId.value() != getAssetId() then throw("TBT: Please attach the correct payment!") else
    if pmtUSDT.amount != totalPriceAfterReduction then throw("TBT: Please attach enough payment!") else

    func handleTopUp(acc: List[StringEntry|IntegerEntry], index: Int) = {
      if index <= amount then 
      let nr = index+totalTickets
      let address = i.caller.toString();
      acc++[
        StringEntry(key_userByTicketNr(nr), address),
        IntegerEntry(key_ticketOwner(address, nr), nr)
      ]
      else
      acc++[]
    }

    let f = FOLD<15>([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], [], handleTopUp)
    [
      IntegerEntry(key_totalTicketIssued(), totalTickets+amount),
      IntegerEntry(key_lastTxHeight(),height)
      
    ]++f

}
