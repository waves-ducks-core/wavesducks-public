{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
func getBool(key: String) = {
  match getBoolean(this, key) {
      case b:Boolean => b
      case _ => false
  }
}

func isTestEnv()={
  getBool("TESTENV")
}
func staticKey_oracleAddress() = "static_oracleAddress"
func staticKey_itemsAddress() = "static_itemsAddress"
func staticKey_mutantFarmingAddress() = "static_mutantFarmingAddress"
func staticKey_extraFee() = "static_extraFee"
func staticKey_feeAggregator() = "static_feeAggregator"


func keyUnstakeHeight(artefactName: String, artefactId: String) = artefactName+"_" + artefactId + "_unstake_height"
func keyArtefactOwner(artefactName: String, owner: String) = artefactName+"_" + owner + "_owner"
func keyFeedLimit(owner: String) = "limit_"+owner

let stakeable = [
  "ART-LAKE",
  "ART-XTREE",
  "ART-XSOCK",
  "ART-XMISTL"
]

func tryGetString(key: String) = {
    match getString(this, key) {
        case a:String => a
        case _ => ""
    }
}

func tryGetInteger(key: String) = {
    match getInteger(this, key) {
        case a:Int => a
        case _ => 0
    }
}

func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}

func getOracle() = Address(tryGetString(staticKey_oracleAddress()).fromBase58String())
func getItemsAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_itemsAddress()).fromBase58String())
func getFeeAggregator() = Address(tryGetStringExternal(getOracle(),staticKey_feeAggregator()).fromBase58String())
func getMutantFarmingAddress() = Address(tryGetStringExternal(getOracle(),staticKey_mutantFarmingAddress()).fromBase58String())

func asString(value: Any) = match value {
  case string: String => string
  case _ => throw("wrong type, expected: String")
}

func asInt(value: Any) = match value {
  case int: Int => int
  case _ => throw("wrong type, expected: Int")
}

func checkAdditionalPayment(payment: AttachedPayment)= {
  if isDefined(payment.assetId) then throw("WCAP: Please attach waves") else
  let feeAmount = getIntegerValue(getOracle(),staticKey_extraFee())
  if payment.amount != feeAmount then throw("WCAP: Please attach exactly "+feeAmount.toString()+" amount of wavelets") else
  [ScriptTransfer(getFeeAggregator(), feeAmount, unit)]

}

func itemIsInCoolDown(artefactName: String, artefactId: String)={
  let unstakeHeightLast = tryGetInteger(keyUnstakeHeight(artefactName,artefactId))
  let cooldownPeriod = 240
  if unstakeHeightLast+cooldownPeriod < height
  then false
  else true
}

@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("admin only") else 
  [
    StringEntry(staticKey_oracleAddress(),oracle)
  ]

}

@Callable(i)
func stakeItem() = {
    let validPayment = checkAdditionalPayment(i.payments[1])
    if !(size(i.payments) == 2 && i.payments[0].amount==1) then throw("Invalid payment") else 
      let assetId = i.payments[0].assetId.value()
      strict artefactName = invoke(getItemsAddress(),"checkArtefactDetails",[assetId.toBase58String()],[]).asString()
      if !containsElement(stakeable, artefactName) then throw("You can't stake this artafect") else 
        if itemIsInCoolDown(artefactName,assetId.toBase58String()) then throw("Item can't be staked yet, it's in cooldown") else
          let invoker = i.caller.toString()
          let artefactId = tryGetString(keyArtefactOwner(artefactName,invoker))
          if artefactId != "" then throw("You are already staking "+ artefactName) else 
            strict boostDuck = 
            if artefactName == "ART-LAKE" then  invoke(getItemsAddress(),"manipulateBoostAccount",[2,invoker],[]) else
            if artefactName == "ART-XTREE" then invoke(getItemsAddress(),"manipulateBoostAccount",[3,invoker],[]) else nil
            [
              StringEntry(keyArtefactOwner(artefactName,invoker), assetId.toBase58String())
            ]++validPayment
}

@Callable(i)
func unstakeItem(artefactName: String) = {
    let validPayment = checkAdditionalPayment(i.payments[0])
    if ! containsElement(stakeable, artefactName) then throw("This artefact doesn't exist") else 
      let invoker = i.caller.toString()
      let artefactId = tryGetString(keyArtefactOwner(artefactName,invoker))
      if artefactId == "ART-XSOCK" then throw("You can not unstake ART-XSOCK anymore") else
      if artefactId == "" then throw("You didnt stake "+artefactName) else
        strict boostDuck = 
        if artefactName == "ART-LAKE" then  invoke(getItemsAddress(),"manipulateBoostAccount",[-2,invoker],[]) else
        if artefactName == "ART-XTREE" then invoke(getItemsAddress(),"manipulateBoostAccount",[-3,invoker],[]) else nil
        [
          IntegerEntry(keyUnstakeHeight(artefactName,artefactId),height),
          ScriptTransfer(i.caller,1,artefactId.fromBase58String()),
          DeleteEntry(keyArtefactOwner(artefactName,invoker))
        ]++validPayment 
}

@Callable(i)
func oneTimeUseFeed() ={
  let validPayment = checkAdditionalPayment(i.payments[1])
  if !(size(i.payments) == 2 && i.payments[0].amount==1) then throw("Invalid payment") else 
    let assetId = i.payments[0].assetId.value()
    strict artefactName = invoke(getItemsAddress(),"checkArtefactDetails",[assetId.toBase58String()],[]).asString()
    if !artefactName.contains("ART-FEED") then throw("You can't use this artafect to earn feedlimit!") else
        let invoker = i.caller.toString()
        let amount = drop(artefactName,8)
        let intValue = parseIntValue(amount)
        strict topup = invoke(getMutantFarmingAddress(), "topUpReward", ["FEED",intValue/2], [])
        [
          IntegerEntry(keyFeedLimit(invoker), tryGetInteger(keyFeedLimit(invoker))+intValue),
          Burn(assetId,1)
        ]++validPayment
}

@Callable(i)
func addFeedLimit(amount: Int, address: String) ={
  if i.caller != getMutantFarmingAddress() then throw("admin only") else
    [
      IntegerEntry(keyFeedLimit(address), tryGetInteger(keyFeedLimit(address))+amount)
    ]
}


@Verifier(tx)
func verify() = {
  if isTestEnv() then 
      sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
  else
    let firstUser = base58'6TdaXEfhnjYquvPf3yV7MFxt2CbgFmaqsvGwkKfXtKi4'
    let secondUser = base58'7DsP2WaMLocbHuUxux7pbXRjTrrZ1TFQPsi5QumS3gr8'
    let thirdUser = base58'BpFWP3p3JgYrrP45xfrKzeMcWMEXoinj4FVPPkUiA8D3'

    let firstUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], firstUser)) then 1
        else 0
    let secondUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], secondUser)) then 1
        else 0
    let thirdUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], thirdUser)) then 1
        else 0
    let signaturesCount = firstUserSigned + secondUserSigned + thirdUserSigned

    match (tx) {
        case _ => signaturesCount >= 2
    }
}   

