{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func keyOwner(duckHouseId: String) = duckHouseId+"_owner"

func keyDuckHouse(duckId: String) = duckId+"_duck_house"

func occupiedSpotsDucksHouse(duckHouseId: String) = duckHouseId+"_filled_spots"



func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}

func tryGetString(key: String) = {
    tryGetStringExternal(this,key)
}

func tryGetInteger(key: String) = {
    match getInteger(this, key) {
        case b:Int => b
        case _ => 0
    }
}

func asString(value: Any) = match value {
  case string: String => string
  case _ => throw("wrong type, expected: String")
}

func asInt(value: Any) = match value {
  case int: Int => int
  case _ => throw("wrong type, expected: Int")
}

func staticKey_oracleAddress() = "static_oracleAddress"
func staticKey_itemsAddress() = "static_itemsAddress"
func staticKey_extraFee() = "static_extraFee"
func staticKey_feeAggregator() = "static_feeAggregator"
func staticKey_eggAssetId() = "static_eggAssetId"
func staticKey_farmingAddress() = "static_farmingAddress"
func staticKey_maxDucks() = "static_maxDucks"
func staticKey_stakeCall() = "static_stakeCall"
func staticKey_JStakeCall() = "static_JStakeCall"
func staticKey_type() = "static_type"
func staticKey_boost() = "static_boost"

func getOracle() = Address(tryGetString(staticKey_oracleAddress()).fromBase58String())
func getItemsAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_itemsAddress()).fromBase58String())
func getFarmingAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_farmingAddress()).fromBase58String())
func getEggAssetId() = tryGetStringExternal(getOracle(),staticKey_eggAssetId()).fromBase58String()
func getFeeAggregator() = Address(tryGetStringExternal(getOracle(),staticKey_feeAggregator()).fromBase58String())

func maxDucks() = tryGetInteger(staticKey_maxDucks())
func stakeCall() = tryGetString(staticKey_stakeCall())
func JStakeCall() = tryGetString(staticKey_JStakeCall())
func type()= tryGetString(staticKey_type())

func boost() = tryGetInteger(staticKey_boost())

func isJackpot(assetId: ByteVector ) = assetInfo(assetId).value().name.value().takeRight(1) == "U"

func checkAdditionalPayment(payment: AttachedPayment)= {
  if isDefined(payment.assetId) then throw("WCAP: Please attach waves") else
  let feeAmount = getIntegerValue(getOracle(),staticKey_extraFee())
  if payment.amount != feeAmount then throw("WCAP: Please attach exactly "+feeAmount.toString()+" amount of wavelets") else
  [ScriptTransfer(getFeeAggregator(), feeAmount, unit)]

}

@Callable(i)
func configureOracle(oracle: String, type: String) = {
  if i.caller != this then throw("admin only") else 
  let setup = if type == "ART-BIGHOUSE" then [ 
            IntegerEntry(staticKey_boost(),15), IntegerEntry(staticKey_maxDucks(),10),
            StringEntry(staticKey_stakeCall(),"stakeNFTWithoutPerch"),StringEntry(staticKey_type(),"ART-BIGHOUSE"),
            StringEntry(staticKey_JStakeCall(),"stakeNFTWithoutPerch")
        ] else 
        if type == "ART-HOUSE" then [ 
            IntegerEntry(staticKey_boost(),30),IntegerEntry(staticKey_maxDucks(),4),
            StringEntry(staticKey_stakeCall(),"stakeNFT"),StringEntry(staticKey_type(),"ART-HOUSE"),
            StringEntry(staticKey_JStakeCall(),"stakeNFTWithoutPerch")
        ] else throw("Unknown type!")
  [
    StringEntry(staticKey_oracleAddress(),oracle)
  ]++setup

}


@Callable(i)
func stakeDuckHouse()={
  let owner = i.caller.toString()  
  let artefactPayment = i.payments[0].value()
  let validPayment = checkAdditionalPayment(i.payments[1])
  let artefactAssetId = artefactPayment.assetId.value().toBase58String()
  if (artefactPayment.amount != 1) then throw("NFT is not attached") else
  strict artefactName = invoke(getItemsAddress(),"checkArtefactDetails",[artefactAssetId],[]).asString()
  if artefactName != type() then throw("Wrong artefact") else
  [
      StringEntry(keyOwner(artefactAssetId),owner)
  ]++validPayment
}

@Callable(i)
func unstakeDuckHouse(duckHouseId: String)={
    let caller = i.caller.toString()
    let duckHouseOwner = tryGetString(keyOwner(duckHouseId))
    let validPayment = checkAdditionalPayment(i.payments[0])
    if duckHouseOwner == "" then throw("This duckhouse is not staked!") else
    if duckHouseOwner != caller then throw("This duckhouse is not yours!") else
    if tryGetInteger(occupiedSpotsDucksHouse(duckHouseId)) != 0 then throw("Please first remove your ducks from the duckhouse") else
    [
        ScriptTransfer(i.caller,1,duckHouseId.fromBase58String()),
        DeleteEntry(keyOwner(duckHouseId))
    ]++validPayment
}


@Callable(i)
func stakeDuck(duckHouseId: String)={
    let assetId = i.payments[0].value().assetId.value()
    let address = i.caller.toString()
    let duckHouseOwner = tryGetString(keyOwner(duckHouseId))
    if duckHouseOwner == "" then throw("This duckhouse is not staked!") else
    if duckHouseOwner != address then throw("This duckhouse is not yours!") else
    let filledSpots = tryGetInteger(occupiedSpotsDucksHouse(duckHouseId))
    if filledSpots == maxDucks() then throw("No space in duck house left!") else
    strict boostDuck = invoke(getItemsAddress(),"manipulateBoost",[boost(),assetId.toBase58String()],[])
    strict stakeDuck = if isJackpot(assetId) then  invoke(getFarmingAddress(),JStakeCall(),[],i.payments) else invoke(getFarmingAddress(),stakeCall(),[],i.payments)
    [
        IntegerEntry(occupiedSpotsDucksHouse(duckHouseId),filledSpots+1),
        StringEntry(keyDuckHouse(assetId.toBase58String()),duckHouseId)
    ]
}

@Callable(i)
func unstakeDuck(asset: String)={
    let duckHouseId = tryGetString(keyDuckHouse(asset))
    let owner = tryGetString(keyOwner(duckHouseId))
    let address = i.caller.toString()
    if owner != address then throw("Don't try to steal someone duck!") else
    strict unstakeDuckReward = if isJackpot(asset.fromBase58String()) then invoke(getFarmingAddress(),"unstakeJackpot",[asset],i.payments).asInt() else invoke(getFarmingAddress(),"unstakeNFT",[asset],i.payments).asInt()
    let filledSpots = tryGetInteger(occupiedSpotsDucksHouse(duckHouseId))
    if filledSpots == 0 then throw("You aren't staking any ducks!") else
    strict unboostDuck = invoke(getItemsAddress(),"manipulateBoost",[-boost(),asset],[])
    [
        ScriptTransfer(i.caller, unstakeDuckReward, getEggAssetId()),
        ScriptTransfer(i.caller, 1, asset.fromBase58String()),
        DeleteEntry(keyDuckHouse(asset)),
        IntegerEntry(occupiedSpotsDucksHouse(duckHouseId),filledSpots-1)
    ]

}

@Callable(i)
func claimDuckRewards(asset: String)={
    strict claimRewards = invoke(getFarmingAddress(),"claimReward",[asset],i.payments).asInt()
    []

}