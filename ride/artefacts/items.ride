{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func staticKey_oracleAddress() = "static_oracleAddress"
func staticKey_breederAddress() ="static_breederAddress"
func staticKey_eggAssetId() ="static_eggAssetId"
func staticKey_trustedContracts() ="static_trustedContracts"
func staticKey_rebirthAddress() ="static_rebirthAddress"
func staticKey_turtleRebirthAddress() ="static_turtleRebirthAddress"
func staticKey_pipelineUser() ="static_pipelineUser"
func staticKey_extraFee() = "static_extraFee"
func staticKey_feeAggregator() = "static_feeAggregator"
func staticKey_huntDistroAddress() = "static_huntDistroAddress"
func staticKey_warsPKey() = "static_warsPKey"
func staticKey_duplicatorFee() = "static_duplicatorFee"

#TODO: make sure to allow coupons contract when we release new items
func key_artefactOwner(artefactName: String, owner: String) = artefactName+"_" + owner + "_owner"
func key_unstakeHeight(artefactName: String, artefactId: String) = artefactName+"_" + artefactId + "_unstake_height"
func key_externalBoostDuck(duckId: String) = duckId+"_duck_external_boost"

func key_externalBoostAddress(address: String) = address+"_user_external_boost"
func key_priceCosmetic(item:String)= "direct_cosmetic_"+item
func key_maxSalesCosmetic(item:String)= "direct_cosmetic_"+item+"_max_sales"
func key_saleCosmetic(item:String)= "direct_cosmetic_"+item+"_sale"
func key_priceAssetCosmetic(item:String)= "direct_cosmetic_"+item+"_priceAsset"
func key_growPercentageCosmetic(item:String)= "direct_cosmetic_"+item+"_growing_percentage"
func key_soldCosmetic(item:String)= "direct_cosmetic_"+item+"_sold"
func key_lastPriceCosmetic(item:String)= "direct_cosmetic_"+item+"_last_price"
func key_startTsCosmetic(item:String) = "direct_cosmetic_"+item+"_startTs"
func key_endTsCosmetic(item:String) = "direct_cosmetic_"+item+"_endTs"
func key_processFinishHeight(address: String, txId: ByteVector) = address + "_" + txId.toBase58String() +  "_fh"
func staticKey_couponsAddress() = "static_couponsAddress"


let devAddress = base58'3P44yqcpfhPF2iC1nptm2ZJCTaN7VYhz9og'
let eggsNeeded = 3 * 1_0000_0000
let artefactsLimit = 301 + 600

let freeGenes = [
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I"
]

let oldArtefacts = [
  "ART-LAKE",
  "ART-HOUSE",
  "ART-BIGHOUSE",
  "ART-FIXGENE",
  "ART-FREEGENE", 
  "ART-MIRROR", # +++
  "ART-POMP", # Pompadour
  "ART-CAPE", # Magic Cape
  "ART-HAT", # Quacker Hat
  "ART-CUSTOMDUCK"
]

let artefacts = [
  "ART-XMISTL",
  "ART-XHAT",
  "ART-XSCARF",
  "ART-XSWEATER",
  "ART-XSOCK", 
  "ART-XTREE"
]

let allArtefact = artefacts++oldArtefacts

let boosters = [
  "ART-TINSEL",
  "ART-FEED10",
  "ART-GNGR_BREAD",
  "ART-SNOWBALL",
  "ART-GIFT_DOUBL"
]

func tryGetBoolean(key: String) = {
    match getBoolean(this, key) {
        case b:Boolean => b
        case _ => false
    }
}

func tryGetString(key: String) = {
    match getString(this, key) {
        case a:String => a
        case _ => ""
    }
}

func tryGetInteger(key: String) = {
    match getInteger(this, key) {
        case a:Int => a
        case _ => 0
    }
}

func tryGetIntegerExternal(address: Address, key: String) = {
    match getInteger(address, key) {
        case b:Int => b
        case _ => 0
    }

}

func getRandomNumber(variants: Int, txId: ByteVector, finishHeight: Int, offset: Int) = {
  let randomSeedBlock = blockInfoByHeight(finishHeight-1).value()
  let randomHash = sha256(base58'items' + txId + randomSeedBlock.vrf.value())
  randomHash.toInt(offset) % variants
}

func getRandomArtefact(boxId: ByteVector, h: Int) = {
  let randomNumber = getRandomNumber(artefacts.size(), boxId, h, 1)
  artefacts[randomNumber]
}

func getRandomGenes(txId: ByteVector, h: Int) = {
  let randomNumber = getRandomNumber(freeGenes.size(), txId, h, 2)
  freeGenes[randomNumber]
}



func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}


func getOracle() = Address(tryGetString(staticKey_oracleAddress()).fromBase58String())
func getBreederAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_breederAddress()).fromBase58String()) #base58'3PDVuU45H7Eh5dmtNbnRNRStGwULA7NY6Hb'
func getEggAssetId() = tryGetStringExternal(getOracle(),staticKey_eggAssetId()).fromBase58String() #base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'
func getTrustedContracts() =  tryGetStringExternal(getOracle(),staticKey_trustedContracts())
func getRebirthAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_rebirthAddress()).fromBase58String())
func getTurtleRebirthAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_turtleRebirthAddress()).fromBase58String())
func getFeeAggregator() = Address(tryGetStringExternal(getOracle(),staticKey_feeAggregator()).fromBase58String())
func getHuntDistroAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_huntDistroAddress()).fromBase58String())
func getWarsPKey() =  tryGetStringExternal(getOracle(),staticKey_warsPKey()).fromBase58String()
func getDuplicatorFee() = tryGetIntegerExternal(getOracle(),staticKey_duplicatorFee())
func getCouponsAddress() = Address(tryGetStringExternal(getOracle(),staticKey_couponsAddress()).fromBase58String()) 

func tryGetCosmeticItemPrice(item:String)= {
  let key = key_priceCosmetic(item)
    match getInteger(this, key) {
      case a:Int => a
      case _ => throw("ITGCIP: "+item+" is not available in the store!")
    }
}

func asString(value: Any) = match value {
  case string: String => string
  case _ => throw("wrong type, expected: String")
}

func asInt(value: Any) = match value {
  case int: Int => int
  case _ => throw("wrong type, expected: Int")
}

func manipulateName(assetName: String, position: Int, char: String) = {
  assetName.take(position-1)+char+assetName.takeRight(16-position)
}

func itemIsInCoolDown(artefactName: String, artefactId: String)={
  let unstakeHeightLast = tryGetInteger(key_unstakeHeight(artefactName,artefactId))
  let cooldownPeriod = 240
  if unstakeHeightLast+cooldownPeriod < height
  then false
  else true
}

func isTestEnv()={
  tryGetBoolean("TESTENV")
}

func checkAdditionalPayment(payment: AttachedPayment)= {
  if isDefined(payment.assetId) then throw("WCAP: Please attach waves") else
  let feeAmount = getIntegerValue(getOracle(),staticKey_extraFee())
  if payment.amount != feeAmount then throw("WCAP: Please attach exactly "+feeAmount.toString()+" amount of wavelets") else
  [ScriptTransfer(getFeeAggregator(), feeAmount, unit)]

}

func issueItem(type: String, nonce: Int, address: Address)={
    let artefact = Issue(type, "NFT artefact of Waves Ducks game.", 1, 0, false, unit, nonce)
    let artefactId = artefact.calculateAssetId()

    ([
      artefact,
      StringEntry("artefact_" + artefactId.toBase58String() + "_type", type),
      ScriptTransfer(address, 1, artefactId)
    ],artefactId.toBase58String())
}

func itemMerger(baseItem: String, amountBaseItem: Int, endItem:String , payments:List[AttachedPayment],
 feeAmount: Int, feeAssetId: ByteVector|Unit, recipient: Address, instantFinish: Boolean,
 txId: String)={
  if size(payments) != amountBaseItem+1 then throw("IID: Please attach "+(amountBaseItem+2).toString()+" payments!") else
  func isBaseItem(accumulated: (List[Burn],Int), pay: AttachedPayment) = {
    if pay.assetId == unit|| pay.assetId == getEggAssetId() then (accumulated._1,accumulated._2+0) else
    let assetId = pay.assetId.value()
    strict artefact = invoke(this,"checkArtefactDetails",[assetId.toBase58String()],[]).asString()
    if (artefact == baseItem) then 
      (accumulated._1++[Burn(assetId,1)],accumulated._2+1)
      else
      (accumulated._1,accumulated._2+0)
       
  }
  let totalBaseItem = FOLD<10>(payments, ([],0), isBaseItem)
  if totalBaseItem._2 != amountBaseItem then throw("IID: Please attach "+amountBaseItem.toString()+" artefacts of type "+baseItem) else
  let feePayment =  payments[amountBaseItem]
  if feePayment.assetId != feeAssetId then throw("IID: You miss a payment with the fee!") else
  if feePayment.amount != feeAmount then throw("IID: You did not attach the correct fee amount!") else

  let artefact = Issue(endItem, "NFT artefact of Waves Ducks game: "+endItem, 1, 0, false, unit, 0)
  let artefactId = artefact.calculateAssetId()

  let instant = if instantFinish then 
  issueItem(endItem,0,recipient)
  else ([],"")
  
  ([

    BooleanEntry("merge_"+txId+"_instant", instantFinish),
    ScriptTransfer(getFeeAggregator(), feeAmount, feePayment.assetId),
    StringEntry("merge_"+txId+"_reward", endItem),
    BooleanEntry("merge_"+txId+"_finished", instantFinish)
    
  ]++instant._1++totalBaseItem._1,instant._2)
}

#TODO: PUT CONFIG IN SC
#let katanaParams = (8,"ART-FIRE_SWORD",5000_0000, unit, true)
func getAmountBaseItem(baseItem: String) = getIntegerValue("merge_"+baseItem+"_amount")
func getEndItem(baseItem: String) = getStringValue("merge_"+baseItem+"_endItem")
func getPrice(baseItem: String) = getIntegerValue("merge_"+baseItem+"_price")
func getInstant(baseItem: String) = getBooleanValue("merge_"+baseItem+"_instant")
func getAsset(baseItem: String) = {
  let asset = getStringValue("merge_"+baseItem+"_asset")
  if asset == "WAVES" then unit else asset.fromBase58String()
}



func userExperience(user:String) = user+"_experience"

func finishShakeItBabyInternal(initTx: String, address: String, payment: AttachedPayment)={
  let expUser = tryGetIntegerExternal(getCouponsAddress(),userExperience(address))
  let multiplier = min([(expUser/100+1),6])
  let finish = getIntegerValue("address_" + address + "_initTx_" + initTx + "_finishBlock")
  if height < finish then throw("Please wait till the shaking is finished!") else
  if tryGetString("address_" + address + "_initTx_" + initTx + "_status") != "open" then throw("FSI: Only open status can be finished!") else
  func handleMint(acc:List[StringEntry|Issue], index: Int) = {
      if index <=multiplier then
      let randomPosition = getRandomNumber(boosters.size(), initTx.fromBase58String(), finish, index)
      let win = getElement(boosters,randomPosition)
      acc ++ issueItem(win, index-1,addressFromStringValue(address))._1++
      [StringEntry("address_"+address+"_initTx_"+initTx+"_win"+(index-1).toString(),win)]
      else
      acc
  }

  FOLD<6>([1,2,3,4,5,6], [], handleMint)++[StringEntry("address_" + address + "_initTx_" + initTx + "_status", "finish")]
}

@Callable(i)
func startShakeItBaby()={
  let itemPayment = i.payments[0].value()
  let validPayment = checkAdditionalPayment(i.payments[1])
  let itemAssetId = itemPayment.assetId.value().toBase58String()
  if itemPayment.amount != 1 then throw("IID: Item NFT is not attached") else

  strict globeArtefact = invoke(this,"checkArtefactDetails",[itemAssetId],[]).asString()
  if globeArtefact != "ART-SNW_GLBES" then  throw("IID: You need to attach a ART-SNW_GLBES artefact") else
  let address = i.caller.toString()
  let initTx = i.transactionId.toBase58String()
  [
    Burn(itemPayment.assetId.value(),1),
    IntegerEntry("address_" + address + "_initTx_" + initTx + "_finishBlock", height+2),
    StringEntry("address_" + address + "_initTx_" + initTx + "_status", "open"),
    StringEntry("address_" + address + "_initTx_" + initTx + "_assetId", itemAssetId)

  ]
}

@Callable(i)
func finishShakeItBaby(initTx: String) = {
 finishShakeItBabyInternal(initTx, i.caller.toString(),i.payments[0])
}

#TODO: maybe extract this to a seperate SC?
@Callable(i)
func instanMergeItem(baseItem: String)={
  if tryGetString("merge_"+baseItem+"_endItem") ==  "" then throw("IID: Only certain items can be merged!") else
  let params = (getAmountBaseItem(baseItem),getEndItem(baseItem),getPrice(baseItem), getAsset(baseItem), getInstant(baseItem))
  strict grantExp = invoke(getCouponsAddress(),"increaseExp",[i.caller.toString()],[])
  itemMerger(baseItem,params._1,params._2,i.payments,params._3,params._4,i.caller, params._5, i.transactionId.toBase58String())


}

@Callable(i)
func directBuyItemMultiple(itemName:String, itemAmount: Int)={
  let array = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,
                15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]
  let basePrice = tryGetCosmeticItemPrice(itemName)
  let grow = tryGetInteger(key_growPercentageCosmetic(itemName))
  let startTs = tryGetInteger(key_startTsCosmetic(itemName))
  let endTs = tryGetInteger(key_endTsCosmetic(itemName))
  if startTs != 0 && startTs> lastBlock.timestamp then throw("IDBI: The sale did not start yet!") else
  if endTs != 0 && endTs < lastBlock.timestamp then throw("IDBI: The sale has already finished!") else
  if !tryGetBoolean(key_saleCosmetic(itemName)) then throw("IDBI: Item not for sale anymore"+key_saleCosmetic(itemName)) else
  let maxSalesValue = tryGetInteger(key_maxSalesCosmetic(itemName))
  let soldValue = tryGetInteger(key_soldCosmetic(itemName))
  if itemAmount > array.size() then throw("IDBI: Max amount to issue is "+array.size().toString()) else
  let price = if grow == 0 then basePrice*itemAmount else throw("IDBI: Items that grow in price can not be bought in batch!")
  if maxSalesValue!=0 && maxSalesValue<= soldValue then throw("IDBI: Max editions sold!") else

  let assetId = if tryGetString(key_priceAssetCosmetic(itemName))=="" then getEggAssetId() else
  if tryGetString(key_priceAssetCosmetic(itemName))=="WAVES" then unit  else 
  tryGetString(key_priceAssetCosmetic(itemName)).fromBase58String()
  
  let validPayment = checkAdditionalPayment(i.payments[0])
  let firstPayment = i.payments[1].value()
  let amount = firstPayment.amount
  if (firstPayment.assetId != assetId) then throw("IDBI: You can attach only tokens with the correct payment ") else
  if amount != price then throw("IDBI: Please attach the exact asset amount"+price.toString()) else
  
  let txIdStr = i.transactionId.toBase58String()
  let address = i.originCaller

  func handleMint(acc:List[StringEntry|Issue], index: Int) = {
      if index <itemAmount then
      acc ++ issueItem(itemName, index,address)._1
      else
      acc
  }

  let issues = FOLD<30>(array, [], handleMint)
  [
    IntegerEntry(key_lastPriceCosmetic(itemName), basePrice),
    IntegerEntry(key_soldCosmetic(itemName), soldValue+itemAmount),
    ScriptTransfer(getFeeAggregator(),amount,assetId)
  ]++validPayment++issues


}

@Callable(i)
func directBuyItem(itemName:String)={
  let basePrice = tryGetCosmeticItemPrice(itemName)
  let grow = tryGetInteger(key_growPercentageCosmetic(itemName))
  let startTs = tryGetInteger(key_startTsCosmetic(itemName))
  let endTs = tryGetInteger(key_endTsCosmetic(itemName))
  if startTs != 0 && startTs> lastBlock.timestamp then throw("IDBI: The sale did not start yet!") else
  if endTs != 0 && endTs < lastBlock.timestamp then throw("IDBI: The sale has already finished!") else
  if !tryGetBoolean(key_saleCosmetic(itemName)) then throw("IDBI: Item not for sale anymore"+key_saleCosmetic(itemName)) else
  let maxSalesValue = tryGetInteger(key_maxSalesCosmetic(itemName))
  let soldValue = tryGetInteger(key_soldCosmetic(itemName))
  let price = if grow == 0 then basePrice else basePrice+basePrice/100*(soldValue*grow)
  if maxSalesValue!=0 && maxSalesValue<= soldValue then throw("IDBI: Max editions sold!") else

  let assetId = if tryGetString(key_priceAssetCosmetic(itemName))=="" then getEggAssetId() else
  if tryGetString(key_priceAssetCosmetic(itemName))=="WAVES" then unit  else 
  tryGetString(key_priceAssetCosmetic(itemName)).fromBase58String()

  let validPayment = checkAdditionalPayment(i.payments[0])
  let firstPayment = i.payments[1].value()
  let amount = firstPayment.amount
  if (firstPayment.assetId != assetId) then throw("IDBI: You can attach only tokens with the correct payment ") else
  if amount != price then throw("IDBI: Please attach the exact asset amount"+price.toString()) else
  
  let txIdStr = i.transactionId.toBase58String()
  let address = i.originCaller

  let artefact = Issue(itemName, "NFT artefact of Waves Ducks game: "+itemName, 1, 0, false, unit, 0)
  let artefactId = artefact.calculateAssetId()

  ([
    artefact,
    StringEntry("artefact_" + artefactId.toBase58String() + "_type", itemName),
    IntegerEntry(key_lastPriceCosmetic(itemName), price),
    IntegerEntry(key_soldCosmetic(itemName), soldValue+1),
    ScriptTransfer(address, 1, artefactId),
    ScriptTransfer(getFeeAggregator(),amount,assetId)
  ]++validPayment,artefactId.toBase58String())


}

@Callable(i)
func manipulateBoost(boost: Int, duckId: String)= {
  let allowedContracts = getTrustedContracts()
  let allowedContractsList = allowedContracts.split(";")
  let dappToCall = i.caller.toString()
  if allowedContractsList.indexOf(dappToCall) == unit then throw("IMB: This smart contract can't manipulate the boost!") else
  let key = key_externalBoostDuck(duckId)
  let activeBoost = tryGetInteger(key)
  let newBoost = activeBoost+boost
  if newBoost <0 then throw("IMB: Something went wrong with boost, please contact the admins!") else
  [
    IntegerEntry(key,newBoost)
  ]
}

@Callable(i)
func manipulateBoostAccount(boost: Int, address: String)= {
  let allowedContracts = getTrustedContracts()
  let allowedContractsList = allowedContracts.split(";")
  let dappToCall = i.caller.toString()
  if allowedContractsList.indexOf(dappToCall) == unit then throw("IMBA: This smart contract can't manipulate the boost!") else
  let key = key_externalBoostAddress(address)
  let activeBoost = tryGetInteger(key)
  let newBoost = activeBoost+boost
  if newBoost <0 then throw("IMBA: Something went wrong with boost, please contact the admins!") else
  [
    IntegerEntry(key,newBoost)
  ]
}

@Callable(i)
func checkArtefactDetails(assetId: String) = {
  let asset = assetInfo(assetId.fromBase58String()).value()
  let assetName = asset.name.value()
   if (containsElement(allArtefact, assetName) || isDefined(tryGetCosmeticItemPrice(assetName))) && asset.issuer == this   
   then
      (
        [],
      assetName
      )
   else throw("Invalid artefact")
}

@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("admin only") else 
  [
    StringEntry(staticKey_oracleAddress(),oracle)
  ]

}

@Callable(i)
func calculateFarmingPowerBoost(duckId: String, address: String)={
  let externalBoostDuck = tryGetInteger(key_externalBoostDuck(duckId))
  let externalBoostAddress = tryGetInteger(key_externalBoostAddress(address))
  let totalBoost = externalBoostDuck+externalBoostAddress
  (
    [
      IntegerEntry(duckId+"_last_boost",totalBoost)
    ],
    totalBoost
  )
}


@Callable(i)
func itemDuplicator()={
  if size(i.payments) != 4 then throw("IID: Four payments are needed!") else
  let duplicatorPayment = i.payments[0].value()
  let itemPayment = i.payments[1].value()
  let eggPayment = i.payments[2].value()
  let validPayment = checkAdditionalPayment(i.payments[3])

  let duplicatorAssetId = duplicatorPayment.assetId.value().toBase58String()
  if duplicatorPayment.amount != 1 then throw("IID: Duplicator NFT is not attached") else
  
  let itemAssetId = itemPayment.assetId.value().toBase58String()
  if itemPayment.amount != 1 then throw("IID: Item NFT is not attached") else

  let eggAssetId = eggPayment.assetId.value()
  if eggAssetId != getEggAssetId() then throw("IID: Please attach eggs!") else
  if (eggPayment.amount < getDuplicatorFee())  then throw("IID: to duplicate an items you need the following amount of egglets: " + getDuplicatorFee().toString())else

  strict duplicatorArtefact = invoke(this,"checkArtefactDetails",[duplicatorAssetId],[]).asString()
  if duplicatorArtefact != "ART-ITEM_DUPLI" then  throw("IID: You need to attach a ART-ITEM_DUPLI artefact") else

  strict artefactName = invoke(this,"checkArtefactDetails",[itemAssetId],[]).asString()

  let artefact = Issue(artefactName, "NFT artefact of Waves Ducks game: "+artefactName, 1, 0, false, unit, 0)
  let artefactId = artefact.calculateAssetId()

  ([
    artefact,
    StringEntry("artefact_" + artefactId.toBase58String() + "_type", artefactName),
    Burn(duplicatorPayment.assetId.value(),1),
    ScriptTransfer(i.originCaller,1,itemPayment.assetId),
    ScriptTransfer(i.originCaller, 1, artefactId),
    ScriptTransfer(getFeeAggregator(),eggPayment.amount,eggPayment.assetId)
    
  ]++validPayment,artefactId.toBase58String())
  

}

@Callable(i)
func copyDuck()= {
  let firstPayment = i.payments[0].value()
  let secondPayment = i.payments[1].value()
  let validPayment = checkAdditionalPayment(i.payments[2])
  let firstAssetId = firstPayment.assetId.value().toBase58String()
  strict children = invoke(getBreederAddress(),"validateAndGetChildren",[firstAssetId],[]).asInt()
  if (firstPayment.amount != 1 || secondPayment.amount != 1) then throw("NFT is not attached") else
  strict artefact = invoke(this,"checkArtefactDetails",[secondPayment.assetId.value().toBase58String()],[]).asString()
  if artefact != "ART-MIRROR" then  throw("You need to attach a ART-MIRROR artefact") else
  let nftInfo = assetInfo(firstPayment.assetId.value()).value()
  let asset1Gen = nftInfo.name.split("")        
  if (asset1Gen[14] == "G" || asset1Gen[14] == "J" ) then  throw("You can't mirror this duck") else
    let duckGen = nftInfo.name
    strict call = invoke(getBreederAddress(), "createDuckSpecialGenes", [i.caller.bytes, duckGen,children], [])
    [
      ScriptTransfer(i.caller, 1, firstPayment.assetId),
      Burn(secondPayment.assetId.value(),1)
    ]++validPayment

}

@Callable(i)
func addArteFactToDuck()= {
  let firstPayment = i.payments[0].value()
  let secondPayment = i.payments[1].value()
  let validPayment = checkAdditionalPayment(i.payments[2])
  let firstAssetId = firstPayment.assetId.value().toBase58String()
  if (firstPayment.amount != 1 || secondPayment.amount != 1) then throw("NFT is not attached") else
  strict children = invoke(getBreederAddress(),"validateAndGetChildren",[firstAssetId],[]).asInt()
  if children == 0 then throw("You can only pick a sterile NFT-duck") else
  strict artefact = invoke(this,"checkArtefactDetails",[secondPayment.assetId.value().toBase58String()],[]).asString()
  if artefact != "ART-XHAT" && artefact != "ART-POMP" then  throw("You need to attach a ART-XHAT or ART-POMP artefact") else
  let nftInfo = assetInfo(firstPayment.assetId.value()).value()
  let asset1Gen = nftInfo.name.split("")        
  if (asset1Gen[14] == "G" || asset1Gen[14] == "J" ) then  throw("You can't mirror this duck") else
  if (asset1Gen[5] == "S" || asset1Gen[5] == "T" ) then  throw("you already attached a artefact") else{

    let char = if artefact == "ART-XHAT" then "T" else if artefact=="ART-POMP" then "S" else throw("No char defined")
    let oldDuckGen = nftInfo.name
    strict oldFarmGen = invoke(getBreederAddress(),"getGenFromName",[oldDuckGen],[]).asString()
    let duckGen = manipulateName(oldDuckGen,6,char)
    strict call = invoke(getBreederAddress(), "createDuckSpecialGenes", [i.caller.bytes, duckGen,children], [])
    strict callReduce = invoke(getBreederAddress(), "reduceRarity", [firstAssetId,oldFarmGen], [])
    [
      Burn(firstPayment.assetId.value(),1),
      Burn(secondPayment.assetId.value(),1)
    ]++validPayment
  }
}

@Callable(i)
func preInit() = {
  [
    IntegerEntry("static_ART-LAKE_farmingSlots", 200),
    IntegerEntry("static_ART-LAKE_farmingBoost", 2),
    IntegerEntry("static_ART-HOUSE_farmingSlots", 4),
    IntegerEntry("static_ART-HOUSE_farmingBoost", 30),
    IntegerEntry("static_ART-BIGHOUSE_farmingSlots", 10),
    IntegerEntry("static_ART-BIGHOUSE_farmingBoost", 15)
  ]
}

@Callable(i)
func issueArtefact(type: String, receiver: String) = {

  if (i.caller != this && i.caller != getRebirthAddress() && i.caller != getTurtleRebirthAddress() && i.caller != getHuntDistroAddress()&& i.callerPublicKey != getWarsPKey()) then throw("admin only") else 
    if ((i.caller == getHuntDistroAddress()|| i.callerPublicKey == getWarsPKey()) 
              && !type.contains("ART-FIRE_") 
              && !tryGetBoolean(type+"_issue") ) then throw("FIRE AND WHITELIST ITEM ONLY!") else
    let address = Address(fromBase58String(receiver))

    issueItem(type,0,address)
  
}

@Callable(i)
func issueArtefactIndex(type: String, receiver: String, nonce: Int) = {

  if (i.caller != this && i.caller != getRebirthAddress() && i.caller != getTurtleRebirthAddress() && i.caller != getHuntDistroAddress()&& i.callerPublicKey != getWarsPKey()) then throw("admin only") else 
     if ((i.caller == getHuntDistroAddress()|| i.callerPublicKey == getWarsPKey()) && !type.contains("ART-FIRE_") && !tryGetBoolean(type+"_issue") ) then throw("FIRE AND WHITELIST ITEM ONLY!") else
    let address = Address(fromBase58String(receiver))

    let issueResult = issueItem(type,nonce,address)

    issueResult
  
}

@Callable(i)
func setLock(n: Int) = {
  if (i.caller == this) then {
  [
    IntegerEntry("global_locked", n)
  ]
  } else {
    throw("admin only")
  }
}

@Callable(i)
func addItemToStore(price: Int, item: String,maxSales: Int, sale:Boolean,pricesset:String,growthPercentage: Int,startTs:Int,endTs: Int)={
if i.caller != addressFromStringValue(tryGetStringExternal(getOracle(),staticKey_pipelineUser())) then throw("IAITS: Only for trusted users!") else

[
  IntegerEntry(key_priceCosmetic(item),price),
  IntegerEntry(key_maxSalesCosmetic(item),maxSales),
  BooleanEntry(key_saleCosmetic(item),sale),
  StringEntry(key_priceAssetCosmetic(item),pricesset),
  IntegerEntry(key_growPercentageCosmetic(item),growthPercentage),
  IntegerEntry(key_startTsCosmetic(item),startTs),
  IntegerEntry(key_endTsCosmetic(item),endTs)
]

}

@Callable(i)
func setGlobalArtAmount(newAmount: Int) = {
  if (i.caller == this || i.caller == Address(devAddress)) then {
    [IntegerEntry("global_artAmount", newAmount)]
  }else throw("Permission denied")
}



@Verifier(tx)
func verify() = {
  if isTestEnv() then 
      sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
  else
    let firstUser = base58'6TdaXEfhnjYquvPf3yV7MFxt2CbgFmaqsvGwkKfXtKi4'
    let secondUser = base58'E23yUg8eun5nXB1nZRDf7RTyRADKxQhGNXdpTYonEvtU'
    let thirdUser = base58'Ga8WEBTPXbHuoXRD355mQ6ms8PsM2RFYKeA1mEP32CFe'

    let firstUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], firstUser)) then 1
        else 0
    let secondUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], secondUser)) then 1
        else 0
    let thirdUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], thirdUser)) then 1
        else 0
    let signaturesCount = firstUserSigned + secondUserSigned + thirdUserSigned

    match (tx) {
        case _ => signaturesCount >= 2
    }
}


