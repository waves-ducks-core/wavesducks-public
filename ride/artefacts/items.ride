{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func staticKey_oracleAddress() = "static_oracleAddress"
func staticKey_breederAddress() ="static_breederAddress"
func staticKey_eggAssetId() ="static_eggAssetId"
func staticKey_trustedContracts() ="static_trustedContracts"
func staticKey_rebirthAddress() ="static_rebirthAddress"
func staticKey_turtleRebirthAddress() ="static_turtleRebirthAddress"
func staticKey_pipelineUser() ="static_pipelineUser"
func staticKey_extraFee() = "static_extraFee"
func staticKey_feeAggregator() = "static_feeAggregator"
func staticKey_huntDistroAddress() = "static_huntDistroAddress"
func staticKey_warsPKey() = "static_warsPKey"

#TODO: make sure to allow coupons contract when we release new items
func key_artefactOwner(artefactName: String, owner: String) = artefactName+"_" + owner + "_owner"
func key_unstakeHeight(artefactName: String, artefactId: String) = artefactName+"_" + artefactId + "_unstake_height"
func key_externalBoostDuck(duckId: String) = duckId+"_duck_external_boost"

func key_externalBoostAddress(address: String) = address+"_user_external_boost"
func key_priceCosmetic(item:String)= "direct_cosmetic_"+item
func key_maxSalesCosmetic(item:String)= "direct_cosmetic_"+item+"_max_sales"
func key_saleCosmetic(item:String)= "direct_cosmetic_"+item+"_sale"
func key_priceAssetCosmetic(item:String)= "direct_cosmetic_"+item+"_priceAsset"
func key_growPercentageCosmetic(item:String)= "direct_cosmetic_"+item+"_growing_percentage"
func key_soldCosmetic(item:String)= "direct_cosmetic_"+item+"_sold"
func key_lastPriceCosmetic(item:String)= "direct_cosmetic_"+item+"_last_price"
func key_startTsCosmetic(item:String) = "direct_cosmetic_"+item+"_startTs"
func key_endTsCosmetic(item:String) = "direct_cosmetic_"+item+"_endTs"
func key_processFinishHeight(address: String, txId: ByteVector) = address + "_" + txId.toBase58String() +  "_fh"


let devAddress = base58'3P44yqcpfhPF2iC1nptm2ZJCTaN7VYhz9og'
let eggsNeeded = 3 * 1_0000_0000
let artefactsLimit = 301 + 600

let freeGenes = [
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I"
]

let oldArtefacts = [
  "ART-LAKE",
  "ART-HOUSE",
  "ART-BIGHOUSE",
  "ART-FIXGENE",
  "ART-FREEGENE", 
  "ART-MIRROR", # +++
  "ART-POMP", # Pompadour
  "ART-CAPE", # Magic Cape
  "ART-HAT", # Quacker Hat
  "ART-CUSTOMDUCK"
]

let artefacts = [
  "ART-XMISTL",
  "ART-XHAT",
  "ART-XSCARF",
  "ART-XSWEATER",
  "ART-XSOCK", 
  "ART-XTREE"
]



let allArtefact = artefacts++oldArtefacts


func tryGetBoolean(key: String) = {
    match getBoolean(this, key) {
        case b:Boolean => b
        case _ => false
    }
}

func tryGetString(key: String) = {
    match getString(this, key) {
        case a:String => a
        case _ => ""
    }
}

func tryGetInteger(key: String) = {
    match getInteger(this, key) {
        case a:Int => a
        case _ => 0
    }
}

func getRandomNumber(variants: Int, txId: ByteVector, finishHeight: Int, offset: Int) = {
  let randomSeedBlock = blockInfoByHeight(finishHeight-1).value()
  let randomHash = sha256(base58'items' + txId + randomSeedBlock.vrf.value())
  randomHash.toInt(offset) % variants
}

func getRandomArtefact(boxId: ByteVector, h: Int) = {
  let randomNumber = getRandomNumber(6, boxId, h, 1)
  artefacts[randomNumber]
}

func getRandomGenes(txId: ByteVector, h: Int) = {
  let randomNumber = getRandomNumber(6, txId, h, 2)
  freeGenes[randomNumber]
}



func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}


func getOracle() = Address(tryGetString(staticKey_oracleAddress()).fromBase58String())
func getBreederAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_breederAddress()).fromBase58String()) #base58'3PDVuU45H7Eh5dmtNbnRNRStGwULA7NY6Hb'
func getEggAssetId() = tryGetStringExternal(getOracle(),staticKey_eggAssetId()).fromBase58String() #base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'
func getTrustedContracts() =  tryGetStringExternal(getOracle(),staticKey_trustedContracts())
func getRebirthAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_rebirthAddress()).fromBase58String())
func getTurtleRebirthAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_turtleRebirthAddress()).fromBase58String())
func getFeeAggregator() = Address(tryGetStringExternal(getOracle(),staticKey_feeAggregator()).fromBase58String())
func getHuntDistroAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_huntDistroAddress()).fromBase58String())
func getWarsPKey() =  tryGetStringExternal(getOracle(),staticKey_warsPKey()).fromBase58String()

func tryGetCosmeticItemPrice(item:String)= {
  let key = key_priceCosmetic(item)
    match getInteger(this, key) {
      case a:Int => a
      case _ => throw("ITGCIP: This item is not available in the store!")
    }
}

func asString(value: Any) = match value {
  case string: String => string
  case _ => throw("wrong type, expected: String")
}

func asInt(value: Any) = match value {
  case int: Int => int
  case _ => throw("wrong type, expected: Int")
}

func manipulateName(assetName: String, position: Int, char: String) = {
  assetName.take(position-1)+char+assetName.takeRight(16-position)
}

func itemIsInCoolDown(artefactName: String, artefactId: String)={
  let unstakeHeightLast = tryGetInteger(key_unstakeHeight(artefactName,artefactId))
  let cooldownPeriod = 240
  if unstakeHeightLast+cooldownPeriod < height
  then false
  else true
}

func isTestEnv()={
  tryGetBoolean("TESTENV")
}

func checkAdditionalPayment(payment: AttachedPayment)= {
  if isDefined(payment.assetId) then throw("WCAP: Please attach waves") else
  let feeAmount = getIntegerValue(getOracle(),staticKey_extraFee())
  if payment.amount != feeAmount then throw("WCAP: Please attach exactly "+feeAmount.toString()+" amount of wavelets") else
  [ScriptTransfer(getFeeAggregator(), feeAmount, unit)]

}

@Callable(i)
func directBuyItem(itemName:String)={
  let basePrice = tryGetCosmeticItemPrice(itemName)
  let grow = tryGetInteger(key_growPercentageCosmetic(itemName))
  let startTs = tryGetInteger(key_startTsCosmetic(itemName))
  let endTs = tryGetInteger(key_endTsCosmetic(itemName))
  if startTs != 0 && startTs> lastBlock.timestamp then throw("IDBI: The sale did not start yet!") else
  if endTs != 0 && endTs < lastBlock.timestamp then throw("IDBI: The sale has already finished!") else
  if !tryGetBoolean(key_saleCosmetic(itemName)) then throw("IDBI: Item not for sale anymore"+key_saleCosmetic(itemName)) else
  let maxSalesValue = tryGetInteger(key_maxSalesCosmetic(itemName))
  let soldValue = tryGetInteger(key_soldCosmetic(itemName))
  let price = if grow == 0 then basePrice else basePrice+basePrice/100*(soldValue*grow)
  if maxSalesValue!=0 && maxSalesValue<= soldValue then throw("IDBI: Max editions sold!") else

  let assetId = if tryGetString(key_priceAssetCosmetic(itemName))=="" then getEggAssetId() else
  if tryGetString(key_priceAssetCosmetic(itemName))=="WAVES" then unit  else 
  tryGetString(key_priceAssetCosmetic(itemName)).fromBase58String()
  
  let amountPaidByCoupons = 0
  let leftToPay = price-amountPaidByCoupons

  let validPayment = checkAdditionalPayment(i.payments[0])
  let firstPayment = i.payments[1].value()
  let amount = firstPayment.amount
  if (firstPayment.assetId != assetId) then throw("IDBI: You can attach only tokens with the correct payment ") else
  if amount != leftToPay then throw("IDBI: Please attach the exact asset amount"+price.toString()) else
  
  let txIdStr = i.transactionId.toBase58String()
  let address = i.originCaller

  let artefact = Issue(itemName, "NFT artefact of Waves Ducks game: "+itemName, 1, 0, false, unit, 0)
  let artefactId = artefact.calculateAssetId()

  ([
    artefact,
    StringEntry("artefact_" + artefactId.toBase58String() + "_type", itemName),
    IntegerEntry(key_lastPriceCosmetic(itemName), price),
    IntegerEntry(key_soldCosmetic(itemName), soldValue+1),
    ScriptTransfer(address, 1, artefactId),
    ScriptTransfer(getFeeAggregator(),amount,assetId)
  ]++validPayment,artefactId.toBase58String())


}

@Callable(i)
func manipulateBoost(boost: Int, duckId: String)= {
  let allowedContracts = getTrustedContracts()
  let allowedContractsList = allowedContracts.split(";")
  let dappToCall = i.caller.toString()
  if allowedContractsList.indexOf(dappToCall) == unit then throw("IMB: This smart contract can't manipulate the boost!") else
  let key = key_externalBoostDuck(duckId)
  let activeBoost = tryGetInteger(key)
  let newBoost = activeBoost+boost
  if newBoost <0 then throw("IMB: Something went wrong with boost, please contact the admins!") else
  [
    IntegerEntry(key,newBoost)
  ]
}

@Callable(i)
func manipulateBoostAccount(boost: Int, address: String)= {
  let allowedContracts = getTrustedContracts()
  let allowedContractsList = allowedContracts.split(";")
  let dappToCall = i.caller.toString()
  if allowedContractsList.indexOf(dappToCall) == unit then throw("IMBA: This smart contract can't manipulate the boost!") else
  let key = key_externalBoostAddress(address)
  let activeBoost = tryGetInteger(key)
  let newBoost = activeBoost+boost
  if newBoost <0 then throw("IMBA: Something went wrong with boost, please contact the admins!") else
  [
    IntegerEntry(key,newBoost)
  ]
}

@Callable(i)
func checkArtefactDetails(assetId: String) = {
  let asset = assetInfo(assetId.fromBase58String()).value()
  let assetName = asset.name.value()
   if (containsElement(allArtefact, assetName) || isDefined(tryGetCosmeticItemPrice(assetName))) && asset.issuer == this   
   then
      (
        [],
      assetName
      )
   else throw("Invalid artefact")
}

@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("admin only") else 
  [
    StringEntry(staticKey_oracleAddress(),oracle)
  ]

}

@Callable(i)
func calculateFarmingPowerBoost(duckId: String, address: String)={
  let externalBoostDuck = tryGetInteger(key_externalBoostDuck(duckId))
  let externalBoostAddress = tryGetInteger(key_externalBoostAddress(address))
  let totalBoost = externalBoostDuck+externalBoostAddress
  (
    [
      IntegerEntry(duckId+"_last_boost",totalBoost)
    ],
    totalBoost
  )
}

@Callable(i)
func fixedGene(txIdStr: String, parentFixedGene: Int, positionFixedGene: Int) = {
  let firstPayment = i.payments[0].value()
  let validPayment = checkAdditionalPayment(i.payments[1])
  let firstAssetId = firstPayment.assetId.value().toBase58String()
  if firstPayment.amount != 1 then throw("NFT is not attached") else
  strict artefact = invoke(this,"checkArtefactDetails",[firstAssetId],[]).asString()
  if artefact != "ART-FIXGENE" then  throw("You need to attach a ART-FIXGENE artefact") else

  let txId = fromBase58String(txIdStr)

  let finishHeightKey = key_processFinishHeight(i.caller.toString(), txId)
  let processFinishHeight = getIntegerValue(getBreederAddress(), finishHeightKey)

  strict duckGenesString = invoke(getBreederAddress(),"generateDuck",[txId, processFinishHeight,parentFixedGene,positionFixedGene,"",0],[]).asString()
  
  strict call = invoke(getBreederAddress(), "finishDuckHatchingItems", [txIdStr, duckGenesString], [])
  [
    Burn(firstPayment.assetId.value(),1)
  ]++validPayment

}



@Callable(i)
func freeGene(txIdStr: String) = {
  let firstPayment = i.payments[0].value()
  let firstAssetId = firstPayment.assetId.value().toBase58String()
  if firstPayment.amount != 1 then throw("NFT is not attached") else
  strict artefact = invoke(this,"checkArtefactDetails",[firstAssetId],[]).asString()
  if artefact != "ART-FREEGENE" then  throw("You need to attach a ART-FREEGENE artefact") else
  
  let txId = fromBase58String(txIdStr)

  let finishHeightKey = key_processFinishHeight(i.caller.toString(), txId)
  let processFinishHeight = getIntegerValue(getBreederAddress(), finishHeightKey)

  let selectedGene = getRandomGenes(txId,processFinishHeight)
  let randomPosition = getRandomNumber(7, txId, processFinishHeight, 3)
  let validPayment = checkAdditionalPayment(i.payments[1])

  strict duckGenesString = invoke(getBreederAddress(),"generateDuck",[txId, processFinishHeight,0,0,selectedGene,randomPosition],[]).asString()
  
  strict call = invoke(getBreederAddress(), "finishDuckHatchingItems", [txIdStr, duckGenesString], [])
  [
    Burn(firstPayment.assetId.value(),1)
  ]++validPayment
}

@Callable(i)
func copyDuck()= {
  let firstPayment = i.payments[0].value()
  let secondPayment = i.payments[1].value()
  let validPayment = checkAdditionalPayment(i.payments[2])
  let firstAssetId = firstPayment.assetId.value().toBase58String()
  strict children = invoke(getBreederAddress(),"validateAndGetChildren",[firstAssetId],[]).asInt()
  if (firstPayment.amount != 1 || secondPayment.amount != 1) then throw("NFT is not attached") else
  strict artefact = invoke(this,"checkArtefactDetails",[secondPayment.assetId.value().toBase58String()],[]).asString()
  if artefact != "ART-MIRROR" then  throw("You need to attach a ART-MIRROR artefact") else
  let nftInfo = assetInfo(firstPayment.assetId.value()).value()
  let asset1Gen = nftInfo.name.split("")        
  if (asset1Gen[14] == "G" || asset1Gen[14] == "J" ) then  throw("You can't mirror this duck") else
    let duckGen = nftInfo.name
    strict call = invoke(getBreederAddress(), "createDuckSpecialGenes", [i.caller.bytes, duckGen,children], [])
    [
      ScriptTransfer(i.caller, 1, firstPayment.assetId),
      Burn(secondPayment.assetId.value(),1)
    ]++validPayment

}

@Callable(i)
func addArteFactToDuck()= {
  let firstPayment = i.payments[0].value()
  let secondPayment = i.payments[1].value()
  let validPayment = checkAdditionalPayment(i.payments[2])
  let firstAssetId = firstPayment.assetId.value().toBase58String()
  if (firstPayment.amount != 1 || secondPayment.amount != 1) then throw("NFT is not attached") else
  strict children = invoke(getBreederAddress(),"validateAndGetChildren",[firstAssetId],[]).asInt()
  if children == 0 then throw("You can only pick a sterile NFT-duck") else
  strict artefact = invoke(this,"checkArtefactDetails",[secondPayment.assetId.value().toBase58String()],[]).asString()
  if artefact != "ART-XHAT" && artefact != "ART-POMP" then  throw("You need to attach a ART-XHAT or ART-POMP artefact") else
  let nftInfo = assetInfo(firstPayment.assetId.value()).value()
  let asset1Gen = nftInfo.name.split("")        
  if (asset1Gen[14] == "G" || asset1Gen[14] == "J" ) then  throw("You can't mirror this duck") else
  if (asset1Gen[5] == "S" || asset1Gen[5] == "T" ) then  throw("you already attached a artefact") else{

    let char = if artefact == "ART-XHAT" then "T" else if artefact=="ART-POMP" then "S" else throw("No char defined")
    let oldDuckGen = nftInfo.name
    strict oldFarmGen = invoke(getBreederAddress(),"getGenFromName",[oldDuckGen],[]).asString()
    let duckGen = manipulateName(oldDuckGen,6,char)
    strict call = invoke(getBreederAddress(), "createDuckSpecialGenes", [i.caller.bytes, duckGen,children], [])
    strict callReduce = invoke(getBreederAddress(), "reduceRarity", [firstAssetId,oldFarmGen], [])
    [
      Burn(firstPayment.assetId.value(),1),
      Burn(secondPayment.assetId.value(),1)
    ]++validPayment
  }
}

@Callable(i)
func preInit() = {
  [
    IntegerEntry("static_ART-LAKE_farmingSlots", 200),
    IntegerEntry("static_ART-LAKE_farmingBoost", 2),
    IntegerEntry("static_ART-HOUSE_farmingSlots", 4),
    IntegerEntry("static_ART-HOUSE_farmingBoost", 30),
    IntegerEntry("static_ART-BIGHOUSE_farmingSlots", 10),
    IntegerEntry("static_ART-BIGHOUSE_farmingBoost", 15)
  ]
}

@Callable(i)
func issueArtefact(type: String, receiver: String) = {

  if (i.caller != this && i.caller != getRebirthAddress() && i.caller != getTurtleRebirthAddress() && i.caller != getHuntDistroAddress()&& i.callerPublicKey != getWarsPKey()) then throw("admin only") else 
     if ((i.caller == getHuntDistroAddress()|| i.callerPublicKey == getWarsPKey()) && !type.contains("ART-FIRE_") && type != "ART-FREEGENE") then throw("FIRE ITEM ONLY!") else
    let txIdStr = i.transactionId.toBase58String()
    let address = Address(fromBase58String(receiver))

    let artefact = Issue(type, "NFT artefact of Waves Ducks game. Drop #2.", 1, 0, false, unit, 0)
    let artefactId = artefact.calculateAssetId()

    ([
      artefact,
      StringEntry("artefact_" + artefactId.toBase58String() + "_type", type),
      ScriptTransfer(address, 1, artefactId)
    ],artefactId.toBase58String())
  
}

@Callable(i)
func setLock(n: Int) = {
  if (i.caller == this) then {
  [
    IntegerEntry("global_locked", n)
  ]
  } else {
    throw("admin only")
  }
}

@Callable(i)
func buyArtefact() = {
  if (lastBlock.timestamp > 1639742400000) then throw("There are no active sales now... ") else 
  if (tryGetInteger("global_locked") > 0) then {
    throw("contract is temporarily locked")
  } else if (tryGetInteger("global_artAmount") >= artefactsLimit) then {
    throw("SOLDOUT!!! Hurray!")
  } else if(lastBlock.timestamp < 1639605600000 && i.caller != Address(devAddress)) then throw("Too early...") else {

    let firstPayment = i.payments[0].value()
    if (firstPayment.assetId != getEggAssetId()) then throw("You can attach only EGG tokens with the following asset id: " + getEggAssetId().toBase58String())
    else if (firstPayment.amount < eggsNeeded)  then throw("To hatch a duck you currently need the following amount of EGGlets: " + eggsNeeded.toString())
    else {
      [
        StringEntry(i.caller.toString() + "_" + i.transactionId.toBase58String() + "_status", "started"),
        IntegerEntry(i.caller.toString() + "_" + i.transactionId.toBase58String() + "_finishHeight", height + 2),
        IntegerEntry("global_artAmount", tryGetInteger("global_artAmount") + 1)
      ]
    }
  }
}


@Callable(i)
func addItemToStore(price: Int, item: String,maxSales: Int, sale:Boolean,pricesset:String,growthPercentage: Int,startTs:Int,endTs: Int)={
if i.caller != addressFromStringValue(tryGetStringExternal(getOracle(),staticKey_pipelineUser())) then throw("IAITS: Only for trusted users!") else

[
  IntegerEntry(key_priceCosmetic(item),price),
  IntegerEntry(key_maxSalesCosmetic(item),maxSales),
  BooleanEntry(key_saleCosmetic(item),sale),
  StringEntry(key_priceAssetCosmetic(item),pricesset),
  IntegerEntry(key_growPercentageCosmetic(item),growthPercentage),
  IntegerEntry(key_startTsCosmetic(item),startTs),
  IntegerEntry(key_endTsCosmetic(item),endTs)
]

}

@Callable(i)
func setGlobalArtAmount(newAmount: Int) = {
  if (i.caller == this || i.caller == Address(devAddress)) then {
    [IntegerEntry("global_artAmount", newAmount)]
  }else throw("Permission denied")
}

@Callable(i)
func claimArtefact(boxIdStr: String) = {
  let txId = fromBase58String(boxIdStr)
  let statusKey = i.caller.toString() + "_" + boxIdStr + "_status"
  let heightKey = i.caller.toString() + "_" + boxIdStr + "_finishHeight"

  if (getStringValue(statusKey) != "started") then {throw("claimed already")} 
  else if (getIntegerValue(heightKey) > height) then {throw("you cannot claim yet")}
  else {
    let artType = getRandomArtefact(txId, getIntegerValue(heightKey))

    let asset = Issue(artType, "Artefact of Waves Ducks metaverse.", 1, 0, false, unit, getIntegerValue(heightKey))
    let assetId = asset.calculateAssetId()

    [
      StringEntry(statusKey, artType),
      StringEntry(i.caller.toString() + "_" + boxIdStr + "_artefactId", assetId.toBase58String()),
      StringEntry(assetId.toBase58String() + "_type", artType),
      asset,
      ScriptTransfer(i.caller, 1, assetId)
    ]
  }
}

@Verifier(tx)
func verify() = {
  if isTestEnv() then 
      sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
  else
    let firstUser = base58'6TdaXEfhnjYquvPf3yV7MFxt2CbgFmaqsvGwkKfXtKi4'
    let secondUser = base58'E23yUg8eun5nXB1nZRDf7RTyRADKxQhGNXdpTYonEvtU'
    let thirdUser = base58'Ga8WEBTPXbHuoXRD355mQ6ms8PsM2RFYKeA1mEP32CFe'

    let firstUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], firstUser)) then 1
        else 0
    let secondUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], secondUser)) then 1
        else 0
    let thirdUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], thirdUser)) then 1
        else 0
    let signaturesCount = firstUserSigned + secondUserSigned + thirdUserSigned

    match (tx) {
        case _ => signaturesCount >= 2
    }
}


