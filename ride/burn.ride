{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func tryGetString(key: String) = {
    match getString(this, key) {
        case a:String => a
        case _ => ""
    }
}

func tryGetInteger(key: String) = {
    match getInteger(this, key) {
        case a:Int => a
        case _ => 0
    }
}

func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}

func getOracle() = Address(tryGetString("static_oracleAddress").fromBase58String())

func static_eggAssetId() = "static_eggAssetId"
func static_babyDuckAddress() = "static_babyDuckAddress"
func static_couponsAddress() = "static_couponsAddress"

func getEggAssetId() = tryGetStringExternal(getOracle(), static_eggAssetId()).fromBase58String() #base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'
func getBabyduckAddress() = Address(tryGetStringExternal(getOracle(), static_babyDuckAddress()).fromBase58String())
func getCouponsAddress() = Address(tryGetStringExternal(getOracle(), static_couponsAddress()).fromBase58String())

func getTotalBurnKey() = "BURN_TOTAL_AMOUNT_NEW"
func getTotalBurnKeyOld() = "BURN_TOTAL_AMOUNT_OLD"
func getLastBurnKey() = "BURN_LAST_AMOUNT"
func getUserBurnKey(address: String) = "BURN_"+address+"_AMOUNT_NEW"
func getUserBurnKeyOld(address: String) = "BURN_"+address+"_AMOUNT_OLD"

func getBurnByDapp(address: String) = "BURN_DAPP_"+address+"_AMOUNT"

func totalDucklingsBurned() = "BURN_TOTAL_AMOUNT_DUCKLING_NEW"
func totalDucklingsBurnedOld() = "BURN_TOTAL_AMOUNT_DUCKLING_OLD"
func getUserBurnDucklingKey(address: String) = "BURN_"+address+"_AMOUNT_DUCKLING_NEW"
func getUserBurnDucklingKeyOld(address: String) = "BURN_"+address+"_AMOUNT_DUCKLING_OLD"

func getBool(key: String) = {
  match getBoolean(this, key) {
      case b:Boolean => b
      case _ => false
  }
}

func isTestEnv()={
  getBool("TESTENV")
}


@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("admin only") else 
  [
    StringEntry("static_oracleAddress",oracle)
  ]

}

@Callable(i)
func burnAttachedPayments()={
    let payments = i.payments
    if size(payments) != 1 then throw("BAP: Please make sure to attach only 1 payment!") else
    let paymentEgg = payments[0].value()
    if paymentEgg.assetId != getEggAssetId() then throw("BAP: You can only burn $EGG!") else
    let burner = i.originCaller.toString()
    let amount = paymentEgg.amount
    let totalBurnTillDate = tryGetInteger(getTotalBurnKey())
    let totalBurnTillDateByUser = tryGetInteger(getUserBurnKey(burner))
    let burnByDapp = tryGetInteger(getBurnByDapp(i.caller.toString()))
    [
        Burn(getEggAssetId(),amount),
        IntegerEntry(getTotalBurnKeyOld(),totalBurnTillDate),
        IntegerEntry(getUserBurnKeyOld(burner), totalBurnTillDateByUser),
        IntegerEntry(getTotalBurnKey(), totalBurnTillDate+amount),
        IntegerEntry(getUserBurnKey(burner), totalBurnTillDateByUser+amount),
        IntegerEntry(getLastBurnKey(), amount),
        IntegerEntry(getBurnByDapp(i.caller.toString()),burnByDapp+amount)

    ]
}

@Callable(i)
func burnDuckling(user: String)={
    let payments = i.payments
    if size(payments) != 1 then throw("BBD: Please make sure to attach only 1 payment!") else
    let payment = payments[0].value()
    if payment.amount != 1 then throw("BBD: Please make sure to attach the NFT!") else
    if (assetInfo(payment.assetId.value()).value().issuer != getBabyduckAddress()) then throw("BBD: This is no duckling!") else
    let totalBurnTillDate = tryGetInteger(getTotalBurnKey())
    let totalBurnTillDateByUser = tryGetInteger(getUserBurnKey(user))
    let totalDucklingBurned = tryGetInteger(totalDucklingsBurned())
    let totalDucklingBurnedByUser = tryGetInteger(getUserBurnDucklingKey(user))

    [
        Burn(payment.assetId.value(), payment.amount),
        IntegerEntry(getTotalBurnKeyOld(),totalBurnTillDate),
        IntegerEntry(getUserBurnKeyOld(user), totalBurnTillDateByUser),
        IntegerEntry(totalDucklingsBurnedOld(),totalDucklingBurned ),
        IntegerEntry(getUserBurnDucklingKeyOld(user),totalDucklingBurnedByUser ),
        IntegerEntry(totalDucklingsBurned(),totalDucklingBurned ),
        IntegerEntry(getUserBurnDucklingKey(user),totalDucklingBurnedByUser )


    ]
}

@Callable(i)
func burnByInvoke(amount: Int)={
    if (i.caller != this && i.caller != getCouponsAddress() ) then throw("BBI: Admin feature only!") else
    let burner = i.originCaller.toString()
    let totalBurnTillDate = tryGetInteger(getTotalBurnKey())
    let totalBurnTillDateByUser = tryGetInteger(getUserBurnKey(burner))
    let burnByDapp = tryGetInteger(getBurnByDapp(i.caller.toString()))
    [
        Burn(getEggAssetId(),amount),
        IntegerEntry(getTotalBurnKeyOld(),totalBurnTillDate),
        IntegerEntry(getUserBurnKeyOld(burner), totalBurnTillDateByUser),
        IntegerEntry(getTotalBurnKey(), totalBurnTillDate+amount),
        IntegerEntry(getUserBurnKey(burner), totalBurnTillDateByUser+amount),
        IntegerEntry(getLastBurnKey(), amount),
        IntegerEntry(getBurnByDapp(i.caller.toString()),burnByDapp+amount)

    ]
}


@Verifier(tx)
func verify() = {
  if isTestEnv() then 
      sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
  else
    let firstUser = base58'6TdaXEfhnjYquvPf3yV7MFxt2CbgFmaqsvGwkKfXtKi4'
    let secondUser = base58'7DsP2WaMLocbHuUxux7pbXRjTrrZ1TFQPsi5QumS3gr8'
    let thirdUser = base58'BpFWP3p3JgYrrP45xfrKzeMcWMEXoinj4FVPPkUiA8D3'

    let firstUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], firstUser)) then 1
        else 0
    let secondUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], secondUser)) then 1
        else 0
    let thirdUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], thirdUser)) then 1
        else 0
    let signaturesCount = firstUserSigned + secondUserSigned + thirdUserSigned

    match (tx) {
        case _ => signaturesCount >= 2
    }
}   