{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let delayForHatching = 2

let HatchingStarted = "BREEDING_STARTED"
let HatchingFinished = "BREEDING_FINISHED"


func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}

func tryGetIntegerExternal(address: Address, key: String) = {
    match getInteger(address, key) {
        case b:Int => b
        case _ => 0
    }

}


func tryGetString(key: String) = {
    tryGetStringExternal(this,key)
}

func staticKey_oracleAddress() = "static_oracleAddress"
func staticKey_incubatorAddress() = "static_incubatorAddress"
func staticKey_rebirthAddress() = "static_rebirthAddress"
func staticKey_itemsAddress() = "static_itemsAddress"
func staticKey_eggAssetId() = "static_eggAssetId"
func staticKey_babyDuckBreedingAddress() = "static_babyDuckBreedingAddress"
func staticKey_ducklingPrice() = "static_ducklingPrice"
func staticKey_couponsAddress() = "static_couponsAddress"
func staticKey_burnAddress() = "static_burnAddress"
func staticKey_refContractAddress() = "static_refContractAddress"
func staticKey_extraFee() = "static_extraFee"
func staticKey_feeAggregator() = "static_feeAggregator"

func getOracle() = Address(tryGetString(staticKey_oracleAddress()).fromBase58String())
func getIncubatorAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_incubatorAddress()).fromBase58String())
func getRebirthAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_rebirthAddress()).fromBase58String())
func getItemsAddress() = Address(tryGetStringExternal(getOracle(),staticKey_itemsAddress()).fromBase58String())
func getEggAssetId() = tryGetStringExternal(getOracle(),staticKey_eggAssetId()).fromBase58String() #base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'
func getBabyDuckBreedingAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_babyDuckBreedingAddress()).fromBase58String()) #base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
func getDucklingPrice() = tryGetIntegerExternal(getOracle(),staticKey_ducklingPrice())
func getCouponsAddress() = Address(tryGetStringExternal(getOracle(),staticKey_couponsAddress()).fromBase58String()) 
func getBurnAddress() = Address(tryGetStringExternal(getOracle(),staticKey_burnAddress()).fromBase58String())
func getRefContractAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_refContractAddress()).fromBase58String()) #base58'3P8ejTkfRpz9WqCwCuihesNXU5k3zmFFfVe'
func getFeeAggregator() = Address(tryGetStringExternal(getOracle(),staticKey_feeAggregator()).fromBase58String())

func checkAdditionalPayment(payment: AttachedPayment)= {
  if isDefined(payment.assetId) then throw("BCAP: Please attach waves") else
  let feeAmount = getIntegerValue(getOracle(),staticKey_extraFee())
  if payment.amount != feeAmount then throw("BCAP: Please attach exactly "+feeAmount.toString()+" amount of wavelets") else
  [ScriptTransfer(getFeeAggregator(), feeAmount, unit)]

}

let MaxGeneration = 7
let Generations = ["G", "H", "I", "K", "L", "M", "N", "O"]

func getProcessStatusKey(address: String, txId: ByteVector) = {
  # stores the fact of hatching, 
  # if key exists = hatching started 
  # if false = not claimed
  # if true = claimed and nft id will be in the key of getDuckIdKey
  address + "_" + txId.toBase58String() +  "_status"
}

func getDucklingKey(address: String, txId: ByteVector) = {
  address + "_" + txId.toBase58String() +  "_duckling"
}

func getProcessFinishHeightKey(address: String, txId: ByteVector) = {
  address + "_" + txId.toBase58String() +  "_fh"
}

func getDuckParentKey(txId: ByteVector, parentNum: Int) = {
  "inittx_" + txId.toBase58String() + "_parent" + parentNum.toString()
}

func getDuckIdKey(address: String, txId: ByteVector) = {
  address + "_" + txId.toBase58String() +  "_di"
}

func getDuckStatsKey(genString: String) = {
  "stats_" + genString + "_amount"
}

func tryGetInteger(key: String) = {
    let val = match getInteger(this, key) {
        case b:Int => b
        case _ => 0
    }
    val
}


func determineGeneration(g1: String, g2: String) = {
  let gIndex = max([Generations.indexOf(g1).value(), Generations.indexOf(g2).value()])
  Generations[gIndex + 1]
}

func getRandomNumber(variants: Int, txId: ByteVector, hatchingFinishHeight: Int, offset: Int) = {
  let randomSeedBlock = blockInfoByHeight(hatchingFinishHeight-1).value()
  let randomHash = sha256_16Kb(txId + randomSeedBlock.vrf.value())
  randomHash.toInt(offset) % variants
}

func getRandomGen(gen1: String, gen2: String, step: Int, txId: ByteVector, hatchingFinishHeight: Int, 
geneFromParent: Int, genePostion: Int,
specifiqueGene: String, specifiqueGenePosition: Int) = {
  if geneFromParent != 0 && genePostion==step then{ 
    if geneFromParent == 1 then gen1 else 
    if geneFromParent == 2 then gen2 else throw("Parent either needs to be 1 or 2")
  }else if specifiqueGene != "" && specifiqueGenePosition==step then{
    specifiqueGene
  }else
  let randomNum = getRandomNumber(2, txId, hatchingFinishHeight, step)
  let gen = if (randomNum == 0) then gen1 else gen2
  gen
}



func checkAssetInIncubator(assetId: String) = {
  let result = match getString(getIncubatorAddress(), assetId) {
    case b:String => true
    case _ => false
  }
  let result2 = match getString(this, assetId) {
    case c:String => true
    case _ => false
  }
  result || result2
}

func canBeBreeded(asset1Id: ByteVector, asset2Id: ByteVector) = {
  let asset1Gen = assetInfo(asset1Id).value().name.split("")
  let asset2Gen = assetInfo(asset2Id).value().name.split("")
  
  if (Generations.indexOf(asset1Gen[14]).value() >= MaxGeneration) then {
    "you can only breed ducks with generation " + Generations[MaxGeneration] + " and lower"
  } else {
    if (Generations.indexOf(asset2Gen[14]).value() >= MaxGeneration) then {
      "you can only breed ducks with generation " + Generations[MaxGeneration] + " and lower"
    } else {
      "true"
    }
  }
}

func isSymbolA(accumulated: Int, sym: String) = { if (sym == "A") then {accumulated+1} else {accumulated+0} }
func isSymbolB(accumulated: Int, sym: String) = { if (sym == "B") then {accumulated+1} else {accumulated+0} }
func isSymbolC(accumulated: Int, sym: String) = { if (sym == "C") then {accumulated+1} else {accumulated+0} }
func isSymbolD(accumulated: Int, sym: String) = { if (sym == "D") then {accumulated+1} else {accumulated+0} }
func isSymbolE(accumulated: Int, sym: String) = { if (sym == "E") then {accumulated+1} else {accumulated+0} }
func isSymbolF(accumulated: Int, sym: String) = { if (sym == "F") then {accumulated+1} else {accumulated+0} }
func isSymbolG(accumulated: Int, sym: String) = { if (sym == "G") then {accumulated+1} else {accumulated+0} }
func isSymbolH(accumulated: Int, sym: String) = { if (sym == "H") then {accumulated+1} else {accumulated+0} }
func isSymbolI(accumulated: Int, sym: String) = { if (sym == "I") then {accumulated+1} else {accumulated+0} }
func isSymbolK(accumulated: Int, sym: String) = { if (sym == "K") then {accumulated+1} else {accumulated+0} }
func isSymbolL(accumulated: Int, sym: String) = { if (sym == "L") then {accumulated+1} else {accumulated+0} }
func isSymbolM(accumulated: Int, sym: String) = { if (sym == "M") then {accumulated+1} else {accumulated+0} }
func isSymbolN(accumulated: Int, sym: String) = { if (sym == "N") then {accumulated+1} else {accumulated+0} }
func isSymbolO(accumulated: Int, sym: String) = { if (sym == "O") then {accumulated+1} else {accumulated+0} }
func isSymbolS(accumulated: Int, sym: String) = { if (sym == "S") then {accumulated+1} else {accumulated+0} }
func isSymbolT(accumulated: Int, sym: String) = { if (sym == "T") then {accumulated+1} else {accumulated+0} }
func isSymbolZ(accumulated: Int, sym: String) = { if (sym == "Z") then {accumulated+1} else {accumulated+0} }

func getAmountOrClear(amount: String) = {
  if (amount.contains("0")) then {""} else {amount}
}




func asString(value: Any) = match value {
  case string: String => string
  case _ => throw("wrong type, expected: String")
}

func asInt(value: Any) = match value {
  case int: Int => int
  case _ => throw("wrong type, expected: Int")
}

func asBoolean(value: Any) = match value {
  case boolean: Boolean => boolean
  case _ => throw("BDA: wrong type, expected: Boolean")
}

func composeGenericData(duckGen: String, duckIdKey: String, assetId: ByteVector, asset: Issue)= {
  strict farmGen = invoke(this,"getGenFromName",[duckGen],[]).asString()
  let amount = tryGetInteger(getDuckStatsKey(duckGen))
  let quantity = tryGetInteger("stats_"+farmGen+"_quantity")
  [
    StringEntry(duckIdKey, assetId.toBase58String()),
    StringEntry(assetId.toBase58String(), duckIdKey),
    IntegerEntry(getDuckStatsKey(duckGen), amount + 1),
    IntegerEntry("stats_"+farmGen+"_quantity", quantity+1),
    asset
    ]
}

func finishDuckHatch(txIdStr: String, owner: String, duckGenesString: String) = {
  let txId = fromBase58String(txIdStr)
  let processStatusKey = getProcessStatusKey(owner, txId)
  let duckIdKey = getDuckIdKey(owner, txId)

  let processTxStatus = getStringValue(this, processStatusKey)
  let finishHeightKey = getProcessFinishHeightKey(owner, txId)
  let processFinishHeight = getIntegerValue(this, finishHeightKey)
  
  if (processTxStatus == HatchingFinished) then {
    let duckId = getStringValue(this, getDuckIdKey(owner, txId))
    throw("The duck was breeded and claimed already, here is the folowing: " + duckId)
  } else 
    if (processFinishHeight > height) then throw("Breeding is not finished yet " + (processFinishHeight - height).toString() + " blocks remaining, it will take around " +  (processFinishHeight - height).toString() + " minutes")
    else {

      strict duckGen = if duckGenesString=="" then invoke(this,"generateDuck",[txId, processFinishHeight,0,0,"",0],[]).asString() else duckGenesString
      
      let description = "{\"genotype\": \"" + duckGen + "\", \"crossbreeding\": true}"

      let asset = Issue(duckGen, description, 1, 0, false, unit, processFinishHeight)
      let assetId = asset.calculateAssetId()

      composeGenericData(duckGen,duckIdKey,assetId,asset)++
      [
        StringEntry(processStatusKey, HatchingFinished),
        ScriptTransfer(addressFromStringValue(owner), 1, assetId)
      ]
    }
}

func getBool(key: String) = {
  match getBoolean(this, key) {
      case b:Boolean => b
      case _ => false
  }
}

func isTestEnv()={
  getBool("TESTENV")
}


@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("admin only") else 
  [
    StringEntry("static_oracleAddress",oracle)
  ]

}

@Callable(i)
func generateDuck(txId: ByteVector, hatchingFinishHeight: Int, 
geneFromParent: Int, genePostion: Int, 
specifiqueGene: String, specifiqueGenePosition: Int) = {
  let colorRandom = getRandomNumber(4, txId, hatchingFinishHeight, 11)
  let color = if (colorRandom == 0) then "Y"
    else if (colorRandom == 1) then "G" 
    else if (colorRandom == 2) then "B" 
    else "R"

  let parent1Id = tryGetString(getDuckParentKey(txId, 1)).fromBase58String()
  let parent2Id = tryGetString(getDuckParentKey(txId, 2)).fromBase58String()

  let parent1Gen = assetInfo(parent1Id).value().name.split("")
  let parent2Gen = assetInfo(parent2Id).value().name.split("")

  let gen = "DUCK-" 
            + getRandomGen(parent1Gen[5], parent2Gen[5], 0, txId, hatchingFinishHeight, geneFromParent, genePostion, specifiqueGene, specifiqueGenePosition)
            + getRandomGen(parent1Gen[6], parent2Gen[6], 1, txId, hatchingFinishHeight, geneFromParent, genePostion, specifiqueGene, specifiqueGenePosition)
            + getRandomGen(parent1Gen[7], parent2Gen[7], 2, txId, hatchingFinishHeight, geneFromParent, genePostion, specifiqueGene, specifiqueGenePosition)
            + getRandomGen(parent1Gen[8], parent2Gen[8], 3, txId, hatchingFinishHeight, geneFromParent, genePostion, specifiqueGene, specifiqueGenePosition)
            + getRandomGen(parent1Gen[9], parent2Gen[9], 4, txId, hatchingFinishHeight, geneFromParent, genePostion, specifiqueGene, specifiqueGenePosition)
            + getRandomGen(parent1Gen[10], parent2Gen[10], 5, txId, hatchingFinishHeight, geneFromParent, genePostion, specifiqueGene, specifiqueGenePosition)
            + getRandomGen(parent1Gen[11], parent2Gen[11], 6, txId, hatchingFinishHeight, geneFromParent, genePostion, specifiqueGene, specifiqueGenePosition)
            + getRandomGen(parent1Gen[12], parent2Gen[12], 7, txId, hatchingFinishHeight, geneFromParent, genePostion, specifiqueGene, specifiqueGenePosition)
            + "-" + determineGeneration(parent1Gen[14], parent2Gen[14]) + color
    (
      [],
      gen
    )
  
}

@Callable(i)
func getGenFromName(assetName: String) = {
    let genotype = assetName.drop(5).dropRight(3).split("")
    let generation = assetName.split("")[14]
    let gen = getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolA)) + "A") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolB)) + "B") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolC)) + "C") +
    getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolD)) + "D") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolE)) + "E") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolF)) + "F") +
    getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolG)) + "G") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolH)) + "H") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolI)) + "I") +
    getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolK)) + "K") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolL)) + "L") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolM)) + "M") +
    getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolN)) + "N") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolO)) + "O") +
    getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolS)) + "S") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolT)) + "T") + 
    getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolZ)) + "Z") +"-" + generation
    (
    [],
    gen
    )
  }

@Callable(i)
func validateAndGetChildren(assetId: String) = {
  if (!checkAssetInIncubator(assetId)) then throw("You need to attach a valid NFT-duck. "+assetId+" is invalid!") else
  let children = tryGetInteger("asset_" + assetId + "_children")
  (
    []
    ,
    children
  )

}

@Callable(i)
func createDuckSpecialGenes(address: ByteVector, duckGen: String, children: Int)= {
  if (i.caller != getItemsAddress() && i.caller != this) then throw("admin or items only") else
  let txId = i.transactionId
  let description = "{\"genotype\": \"" + duckGen + "\", \"crossbreeding\": true}"
  let asset = Issue(duckGen, description, 1, 0, false)
  let assetId = asset.calculateAssetId()
  let duckIdKey = getDuckIdKey(i.caller.toString(), txId)

  #TODO: work around for known issue dapp to dapp
  strict farmGen = invoke(this,"getGenFromName",[duckGen],[]).asString()
  composeGenericData(duckGen,duckIdKey,assetId,asset)++
  [
    IntegerEntry("asset_" + assetId.toBase58String() + "_children", children),
    ScriptTransfer(Address(address), 1, assetId)
  ]
  
 }

@Callable(i)
func startDuckBreeding(refererAddress: String) = {

  let firstPayment = i.payments[0].value()
  let secondPayment = i.payments[1].value()
  strict validPayment = checkAdditionalPayment(i.payments[2])


  let firstAssetId = firstPayment.assetId.value().toBase58String()
  let secondAssetId = secondPayment.assetId.value().toBase58String()

  if (firstPayment.amount != 1 || secondPayment.amount != 1) then throw("NFT is not attached") else
  strict amountPaidByCoupons = invoke(getCouponsAddress(),"useCoupons",[getDucklingPrice()],[]).asInt()

    let leftToPay = getDucklingPrice()-amountPaidByCoupons

  strict payment = if leftToPay!=0 then {
    let thirdPayment = i.payments[3].value()

    if (thirdPayment.assetId != getEggAssetId()) then throw("BSDB: You can attach only EGG tokens with the following asset id: " + getEggAssetId().toBase58String()) else 
    if (thirdPayment.amount != leftToPay) then throw("BSDB: To breed you currently need the following amount of EGGlets: " + leftToPay.toString()) else
    let refererRewardForPerch = fraction(leftToPay, 5, 100)
        strict refCall = invoke(getRefContractAddress(), "refPayment",
        [refererAddress], [AttachedPayment(getEggAssetId(), refererRewardForPerch)]).asBoolean()

        let toBurn = if refCall then leftToPay-refererRewardForPerch else leftToPay

        strict burnCall = invoke(getBurnAddress(), "burnAttachedPayments", [],[AttachedPayment(getEggAssetId(),toBurn)])
        
        leftToPay
    }else 0

  strict children1 = invoke(this,"validateAndGetChildren",[firstAssetId],[]).asInt()
  strict children2 = invoke(this,"validateAndGetChildren",[secondAssetId],[]).asInt()
    if ( children1 > 0 || children2 > 0) then throw("One duck can be used for breeding only once in its lifetime.") else 
      let breededStatus = canBeBreeded(firstAssetId.fromBase58String(), secondAssetId.fromBase58String())
      if (breededStatus != "true") then throw("These ducks cannot be breeded: " + breededStatus) else
        let parent1Gen = assetInfo(firstPayment.assetId.value()).value().name.split("")
        let parent2Gen = assetInfo(secondPayment.assetId.value()).value().name.split("")
        let newG = determineGeneration(parent1Gen[14], parent2Gen[14])
        
        let spiceAmount = (Generations.indexOf(newG).value()+1)*10
        strict ducklingGen = invoke(getBabyDuckBreedingAddress(),"issueDuckling",[i.caller.toString(),i.transactionId.toBase58String(), spiceAmount, newG],[]).asString()
        [
          StringEntry(getDuckParentKey(i.transactionId, 1), firstAssetId),
          StringEntry(getDuckParentKey(i.transactionId, 2), secondAssetId),
          StringEntry(getProcessStatusKey(i.caller.toString(), i.transactionId), HatchingStarted),
          IntegerEntry(getProcessFinishHeightKey(i.caller.toString(), i.transactionId), height + delayForHatching),
          StringEntry(getDucklingKey(i.caller.toString(), i.transactionId),ducklingGen),

          IntegerEntry("asset_" + firstAssetId + "_children", 1),
          IntegerEntry("asset_" + secondAssetId + "_children", 1),
          ScriptTransfer(i.caller, 1, firstPayment.assetId.value()),
          ScriptTransfer(i.caller, 1, secondPayment.assetId.value())
        ]++validPayment
      
      
    
}

@Callable(i)
func finishDuckHatchingItems(txIdStr: String, duckGenesString: String) = {
  if (i.caller != getItemsAddress() && duckGenesString != "" ) then throw("Only items can create fixed genes") else 
  let owner = i.originCaller.toString()
  strict ducklingFinish = invoke(getBabyDuckBreedingAddress(),"turnDucklingIntoDuck",[],i.payments).asString()
  let ducklingLinked = tryGetString(getDucklingKey(owner, txIdStr.fromBase58String()))
  if ducklingLinked != ducklingFinish then throw("Please attach the correct duckling!") else 
  finishDuckHatch(txIdStr, owner, duckGenesString)
}

@Callable(i)
func finishDuckHatching(txIdStr: String) = {
  let owner = i.caller.toString()
  strict ducklingFinish = invoke(getBabyDuckBreedingAddress(),"turnDucklingIntoDuck",[],i.payments).asString()
  let ducklingLinked = tryGetString(getDucklingKey(owner, txIdStr.fromBase58String()))
  if ducklingLinked != ducklingFinish then throw("Please attach the correct duckling!") else
  finishDuckHatch(txIdStr, owner, "") 
}

@Callable(i)
func finishDuckHatchingAdmin(txIdStr: String, owner: String) = {
  if i.caller != this then throw("BFDH: Only admins can run this!") else 
      finishDuckHatch(txIdStr, owner, "") 
}

@Callable(i)
func reduceRarity(assetId: String, farmGen: String) = {
  let asset = assetId.fromBase58String()
  if (i.caller != getItemsAddress() && i.caller != getRebirthAddress() && i.caller != this) then {
    throw("admin, items or rebirth only")
  } else {
    let duckGen = assetInfo(asset).value().name
    [
      IntegerEntry(getDuckStatsKey(duckGen), tryGetInteger(getDuckStatsKey(duckGen)) - 1),
      IntegerEntry("stats_"+farmGen+"_quantity", tryGetInteger("stats_"+farmGen+"_quantity") - 1)
    ]
  }
}
        
@Verifier(tx)
func verify() = {
  if isTestEnv() then 
      sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
  else
    let firstUser = base58'6TdaXEfhnjYquvPf3yV7MFxt2CbgFmaqsvGwkKfXtKi4'
    let secondUser = base58'E23yUg8eun5nXB1nZRDf7RTyRADKxQhGNXdpTYonEvtU'
    let thirdUser = base58'Ga8WEBTPXbHuoXRD355mQ6ms8PsM2RFYKeA1mEP32CFe'

    let firstUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], firstUser)) then 1
        else 0
    let secondUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], secondUser)) then 1
        else 0
    let thirdUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], thirdUser)) then 1
        else 0
    let signaturesCount = firstUserSigned + secondUserSigned + thirdUserSigned

    match (tx) {
        case _ => signaturesCount >= 2
    }
}