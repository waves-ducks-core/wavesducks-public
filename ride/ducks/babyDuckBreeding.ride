{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func staticKey_oracleAddress() = "static_oracleAddress"
func staticKey_extraFee() = "static_extraFee"
func staticKey_spiceAssetId() = "static_spiceAssetId"
func staticKey_breederAddress() = "static_breederAddress"
func staticKey_feeAggregator() = "static_feeAggregator"
func staticKey_turtleStakingAddress() = "static_turtleStakingAddress"


func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}

func keyBlacklisted(ducklingId: String) ={
  "duckling_" + ducklingId + "_blacklisted"
}

func tryGetIntegerExternal(address: Address, key: String) = {
    match getInteger(address, key) {
        case b:Int => b
        case _ => 0
    }

}

func tryGetString(key: String) = {
    tryGetStringExternal(this,key)
}

func getOracle() = Address(tryGetString(staticKey_oracleAddress()).fromBase58String())
func getSpiceAssetId() = tryGetStringExternal(getOracle(),staticKey_spiceAssetId()).fromBase58String() #base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'
func getBreederAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_breederAddress()).fromBase58String()) #base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
func getFeeAggregator() = Address(tryGetStringExternal(getOracle(),staticKey_feeAggregator()).fromBase58String())
func getTurtleStakingAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_turtleStakingAddress()).fromBase58String()) #base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'


func checkAdditionalPayment(payment: AttachedPayment)= {
  if isDefined(payment.assetId) then throw("BDCAP: Please attach waves") else
  let feeAmount = getIntegerValue(getOracle(),staticKey_extraFee())
  if payment.amount != feeAmount then throw("BDCAP: Please attach exactly "+feeAmount.toString()+" amount of wavelets") else
  [ScriptTransfer(getFeeAggregator(), feeAmount, unit)]

}

let KGlobalIssuedTimestamp = "global_issued_timestamp"

func keyTotalFeed(ducklingId: String) = {
  "duckling_" + ducklingId + "_feed"
}

func keyGen(ducklingId: String) = {
  "duckling_" + ducklingId + "_gen"
}

func keyFeedNeeded(ducklingId: String) ={
  "duckling_"+ducklingId+"_feedNeeded"
}

func getDucklingPrice(ducklingId: String) = {
  let key = keyFeedNeeded(ducklingId)
      match getInteger(this, key) {
        case b:Int => b*1_0000_0000
        case _ => 80_0000_0000
    }
}

func keyDucklingFedLastTimestamp(ducklingId: String) = {
  "duckling_" + ducklingId + "_fedLastTs"
}

func keyDucklingLevel(ducklingId: String) = {
  "duckling_" + ducklingId + "_level"
}


func keyDucklingGrown(ducklingId: String) = {
  "duckling_" + ducklingId + "_grown"
}


func keyStartPercentage(ducklingId: String) = {
  "duckling_" + ducklingId + "_startPercentage"
}

func keyOwner(ducklingId: String) ={
  "duckling_" + ducklingId + "_owner"
}

func tryGetInteger(key: String) = {
    let val = match getInteger(this, key) {
        case b:Int => b
        case _ => 0
    }
    val
}

func getBool(key: String) = {
  match getBoolean(this, key) {
      case b:Boolean => b
      case _ => false
  }
}

func getCurrentLevelInt(ducklingId: String) = {
  let kDuckLevel = keyDucklingLevel(ducklingId)
  match (getString(kDuckLevel)){
    case s: String => s.parseIntValue()
    case u: Unit => 0
    case _ => throw("BGCLBI: Weird value detected!")
    
  }
}

func getLastFedTimestamp(ducklingId: String) = {
  let lastFedTimestamp = tryGetInteger(keyDucklingFedLastTimestamp(ducklingId))
  if lastFedTimestamp > 0 then lastFedTimestamp else lastBlock.timestamp
}

func calculateNewDucklingLevel(ducklingId: String, paymentAmount: Int) = {

  let currentTs = lastBlock.timestamp
  let lastFedTimestampChecked = getLastFedTimestamp(ducklingId)
  let fedDiff = currentTs - lastFedTimestampChecked

  let growth = paymentAmount

  let currentLevel = getCurrentLevelInt(ducklingId)
  let newLevel = (currentLevel+ paymentAmount)
  if newLevel > getDucklingPrice(ducklingId) then throw("BCNDL: You are feeding your duckling to much! Only "+ (getDucklingPrice(ducklingId)-currentLevel).toString()+ "needed!") else
  let result = newLevel.toString()
  (result, ["currentLevel=" + currentLevel.toString(), "newLevel=" + newLevel.toString(), "growth=" + growth.toString(), "lastFedTs=" + lastFedTimestampChecked.toString(), "fedDiff=" + fedDiff.toString()])
}

func asInt(value: Any) = match value {
  case int: Int => int
  case _ => throw("BAI: wrong type, expected: Int")
}

func tryGetBoolean(key: String) = {
    match getBoolean(key) {
        case b:Boolean => b
        case _ => false
    }

}

func isTestEnv()={
  getBool("TESTENV")
}

@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("BCO: admin only") else 
  [
    StringEntry("static_oracleAddress",oracle)
  ]

}

@Callable(i)
func issueDuckling(address: String, txIdStr: String, spiceAmount: Int, gen: String) = {
  if i.caller != getBreederAddress() then throw("BID: You can't issue free duckling") else
  let asset = Issue("BABY-11111111-HZ", "", 1, 0, false, unit, height)
    let assetId = asset.calculateAssetId()
    ([
      StringEntry(address + "_" + txIdStr + "_di", assetId.toBase58String()),
      IntegerEntry("stats_amount", tryGetInteger("stats_amount") + 1),
      BooleanEntry("duckling_" + assetId.toBase58String() + "_issuedByFeedCall", i.caller == this),
      IntegerEntry(keyStartPercentage(assetId.toBase58String()), 0),
      StringEntry(keyOwner(assetId.toBase58String()),address ),
      StringEntry(keyGen(assetId.toBase58String()), gen),
      IntegerEntry(keyFeedNeeded(assetId.toBase58String()),spiceAmount),
      asset,
      ScriptTransfer(addressFromString(address).value(), 1, assetId)
    ], assetId.toBase58String())
}


@Callable(i)
func feedDuckling(ducklingId: String) = {
  let addressString = i.caller.toString()
  let realDucklingId = if (i.payments.size() != 2 || i.payments[0].value().assetId != getSpiceAssetId()) then throw("BFD: Bad payment attached (asset[s] or amount)") else

    let blackListed = tryGetBoolean(keyBlacklisted(ducklingId))
    if blackListed then throw("BFD: Can not feed blacklisted duckling!") else  
    if (getBool(keyDucklingGrown(ducklingId))) then throw("BFD: Duckling is already grown") else 
      if (ducklingId == "") then throw("BFD: Please hatch a duckling first!") else {
        let ducklingOwner = tryGetString(keyOwner(ducklingId))
        let ducklingIdCheck = assetInfo(ducklingId.fromBase58String()).value()
        if (assetBalance(i.caller, ducklingIdCheck.id) != 1) then throw("BFD: You're not the owner of the duckling") else
        if ducklingOwner != i.caller.toString() then throw("BFD: You can only feed ducklings that you won/bought yourself!") else
        if (ducklingIdCheck.issuer != this) then throw("BFD: Cant find duckling with such id") 
        else {
          let ducklingIdString = ducklingIdCheck.id.toBase58String()
          ducklingIdString
        }
      }

  let kDucklingLastFedTs = keyDucklingFedLastTimestamp(ducklingId)
  let currentPayment = i.payments[0].value().amount
  let kNewLevel = keyDucklingLevel(realDucklingId)
  let kTotalFeed = keyTotalFeed(realDucklingId)
  let totalFeed = tryGetInteger(kTotalFeed)
  let kFeedTxStats = "duckling_" + realDucklingId + "_stat_" + lastBlock.timestamp.toString()
  strict validPayments = checkAdditionalPayment(i.payments[1])

    let calculateResults = calculateNewDucklingLevel(realDucklingId, currentPayment)
        strict topup = invoke(getTurtleStakingAddress(), "topUpReward",
        [], [AttachedPayment(getSpiceAssetId(), currentPayment/2)])
    [
      IntegerEntry(kDucklingLastFedTs, lastBlock.timestamp),
      IntegerEntry(kTotalFeed, totalFeed + currentPayment),
      IntegerEntry(kFeedTxStats, currentPayment),
      StringEntry(kNewLevel, calculateResults._1),
      StringEntry(kFeedTxStats + "_debug", calculateResults._2.makeString(";")),
      Burn(getSpiceAssetId(), currentPayment/2)

    ]++validPayments
  
}


@Callable(i)
func turnDucklingIntoDuck() = {
  strict validPayments = checkAdditionalPayment(i.payments[1])
  if i.caller != getBreederAddress() then throw("BTDIT: You can't turn duckling") else
  let address = i.caller.toString()
  let txId = i.transactionId.toBase58String()
  let lastIssuedDucklingTs = tryGetInteger(KGlobalIssuedTimestamp)
  let fiveMinInMs = 1 * 60 * 1000
  let timeDiff = lastBlock.timestamp - (lastIssuedDucklingTs+fiveMinInMs);
  if (lastIssuedDucklingTs > 0 && timeDiff < 0) then throw("BTDIT: Can issue ducklings only once per 1 minutes, please wait for " + fraction(timeDiff, 1, 1000).toString() + " sec.") else 
  if (i.payments.size() != 2) then throw("BTDIT: Bad payment attached (asset[s] or amount)") else {
  if (i.payments[0].amount != 1) then throw("BTDIT: Please attach a nft!") else 
    let pmt = assetInfo(i.payments[0].value().assetId.value()).value()
    let price = getDucklingPrice(pmt.id.toBase58String())
    if (getCurrentLevelInt(pmt.id.toBase58String()) <  price) 
    then throw("BTDIT: Duckling is not grown yet..."+getCurrentLevelInt(pmt.id.toBase58String()).toString()+" "+ price.toString()) else
    if (pmt.issuer != this) then throw("BTDIT: Can use only ducklings from this dApp") else {
      let kDucklingGrown = keyDucklingGrown(pmt.id.toBase58String())
      ([
        BooleanEntry(kDucklingGrown, true),
        IntegerEntry(KGlobalIssuedTimestamp, lastBlock.timestamp)
      ]++validPayments,pmt.id.toBase58String())
    }
  }
}


@Verifier(tx)
func verify() = {
  if isTestEnv() then 
      sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
  else
    let firstUser = base58'6TdaXEfhnjYquvPf3yV7MFxt2CbgFmaqsvGwkKfXtKi4'
    let secondUser = base58'E23yUg8eun5nXB1nZRDf7RTyRADKxQhGNXdpTYonEvtU'
    let thirdUser = base58'Ga8WEBTPXbHuoXRD355mQ6ms8PsM2RFYKeA1mEP32CFe'

    let firstUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], firstUser)) then 1
        else 0
    let secondUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], secondUser)) then 1
        else 0
    let thirdUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], thirdUser)) then 1
        else 0
    let signaturesCount = firstUserSigned + secondUserSigned + thirdUserSigned

    match (tx) {
        case _ => signaturesCount >= 2
    }
}
