{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}


func tryGetString(key: String) = {
    tryGetStringExternal(this,key)
}

func staticKey_turtleRebirthAddress() = "static_turtleRebirthAddress"


func getOracle() = Address(tryGetString("static_oracleAddress").fromBase58String())
func getEggAssetId() = tryGetStringExternal(getOracle(),"static_eggAssetId").fromBase58String() #base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'
func getRebirthAddress() =  Address(tryGetStringExternal(getOracle(),"static_rebirthAddress").fromBase58String()) #base58'3PCC6fVHNa6289DTDmcUo3RuLaFmteZZsmQ'
func getBabyDuckAddress() =  Address(tryGetStringExternal(getOracle(),"static_babyDuckAddress").fromBase58String()) #base58'3P6s9C39Ak5FAQ3F5VapYJ3ULxgbsAReXlet babyDucksAddress = base58'3PKmLiGEfqLWMC1H9xhzqvAZKUXfFm8uoeg'
func getRefContractAddress() =  Address(tryGetStringExternal(getOracle(),"static_refContractAddress").fromBase58String()) #base58'3P8ejTkfRpz9WqCwCuihesNXU5k3zmFFfVe'
func getCouponsAddress() = Address(tryGetStringExternal(getOracle(),"static_couponsAddress").fromBase58String()) 
func getBurnAddress() = Address(tryGetStringExternal(getOracle(),"static_burnAddress").fromBase58String())
func getTurtleRebirthAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_turtleRebirthAddress()).fromBase58String()) #base58'3PCC6fVHNa6289DTDmcUo3RuLaFmteZZsmQ'


let delayForHatching = 2

let typesAmount = 10

let RefererReward = 5 #percentage

let HatchingStarted = "HATCHING_STARTED"
let HatchingFinished = "HATCHING_FINISHED"


func isLocked() = {
  let masterAddress = Address(base58'3PEPftf2kWZDmAaWBjs6BUJa9957kiA2PkU')
  match getInteger(masterAddress, "egglock") {
        case b:Int => b
        case _ => 0
    }
}

func getHatchingStatusKey(address: String, txId: ByteVector) = {
  # stores the fact of hatching, 
  # if key exists = hatching started 
  # if false = not claimed
  # if true = claimed and nft id will be in the key of getDuckIdKey
  address + "_" + txId.toBase58String() +  "_status"
}

func getHatchingFinishHeightKey(address: String, txId: ByteVector) = {
  address + "_" + txId.toBase58String() +  "_fh"
}

func getDuckIdKey(address: String, txId: ByteVector) = {
  address + "_" + txId.toBase58String() +  "_di"
}

func getDuckStatsKey(genString: String) = {
  "stats_" + genString + "_amount"
}

func tryGetInteger(key: String) = {
    let val = match getInteger(this, key) {
        case b:Int => b
        case _ => 0
    }
    val
}

let discountCoefficient = tryGetInteger("discountCoefficient")	

let saleCoefficient = tryGetInteger("saleCoefficient")	

func getRandomNumber(variants: Int, txId: ByteVector, hatchingFinishHeight: Int, offset: Int) = {
  let randomSeedBlock = blockInfoByHeight(hatchingFinishHeight-1).value()
  let randomHash = sha256(base58'incubator' + txId + randomSeedBlock.vrf.value())
  randomHash.toInt(offset) % variants
}

func wasUniqueBorn(gen: String) = {
  tryGetInteger(getDuckStatsKey(gen))
}

func getRandomName(txId: ByteVector, hatchingFinishHeight: Int) = {
  let jackpotRandom = getRandomNumber(500, txId, hatchingFinishHeight, 4)
  let entry = IntegerEntry("last_jackpot_random", jackpotRandom)
  if (jackpotRandom == 1) then {
    ("DUCK-WWWWXMAS-JU", "1A1M1S4W1X-J", entry)
  }else {
    let typeRandom = getRandomNumber(4, txId, hatchingFinishHeight, 5)
    let colorRandom = getRandomNumber(4,  txId, hatchingFinishHeight, 6)
    let color = if (colorRandom == 0) then "Y"
      else if (colorRandom == 1) then "G" 
      else if (colorRandom == 2) then "B" 
      else "R"

    if (typeRandom == 0) then ("DUCK-LLLLLLLL-G" + color, "8L-G", entry)
      else if (typeRandom == 1) then ("DUCK-MMMMMMMM-G" + color, "8M-G", entry)
      else if (typeRandom == 2) then ("DUCK-NNNNNNNN-G" + color, "8N-G", entry)
      else ("DUCK-OOOOOOOO-G" + color, "8O-G", entry)
  }
}

func countEggsNeededAmount(totalDucksAmount: Int) = {
  let n = totalDucksAmount
  let g = discountCoefficient
  let s = saleCoefficient
  let t = typesAmount
  let price = pow((100 + (n*g)/(10*t)), 2, 5, 1, 2, DOWN)
  if saleCoefficient  == 0
  then
    price * 1000000
  else
    price *1000000 /100*(100-saleCoefficient)
}

func asInt(value: Any) = match value {
  case int: Int => int
  case _ => throw("IAI: wrong type, expected: Int")
}


func finishHatchingInternal(txIdStr: String, owner: String)={
  let txId = fromBase58String(txIdStr)
  let hatchingStatusKey = getHatchingStatusKey(owner, txId)
  let finishHeightKey = getHatchingFinishHeightKey(owner, txId)
  let duckIdKey = getDuckIdKey(owner, txId)

  let duckFromBaby = match (getBoolean("hatching_" + txIdStr + "_babyDuck")) {
      case t:Boolean => t
      case _ => false
    }

  let hatchingTxStatus = getStringValue(this, hatchingStatusKey)
  let hatchingFinishHeight = getIntegerValue(this, finishHeightKey)
  
  if (hatchingTxStatus == HatchingFinished) then {
    let duckId = getStringValue(this, getDuckIdKey(owner, txId))
    throw("IFDH: The duck was hatched and claimed already, here is the folowing: " + duckId)
  } else 
    if (hatchingFinishHeight > height) then throw("Hatching is not finished yet " + (hatchingFinishHeight - height).toString() + " blocks remaining, it will take around " +  (hatchingFinishHeight - height).toString() + " minutes")
    else {
      let (duckGen, farmGen, jackpotRandomEntry) = getRandomName(txId, hatchingFinishHeight)
      let description = "{\"genotype\": \"" + duckGen + "\", \"crossbreeding\": true}"

      let asset = Issue(duckGen, description, 1, 0, false, unit, hatchingFinishHeight)
      let assetId = asset.calculateAssetId()

      let amount = tryGetInteger(getDuckStatsKey(duckGen)) + 1

      [
        StringEntry(hatchingStatusKey, HatchingFinished),
        StringEntry(duckIdKey, assetId.toBase58String()),
        StringEntry(assetId.toBase58String(), duckIdKey),
        BooleanEntry("duck_" + assetId.toBase58String() + "_grown", duckFromBaby),
        IntegerEntry(getDuckStatsKey(duckGen), amount),
        jackpotRandomEntry,
        IntegerEntry("stats_"+farmGen+"_quantity", tryGetInteger("stats_"+farmGen+"_quantity") + 1),
        asset,
        ScriptTransfer(Address(owner.fromBase58String()), 1, assetId)
      ]
    }
}

func getBool(key: String) = {
  match getBoolean(this, key) {
      case b:Boolean => b
      case _ => false
  }
}

func isTestEnv()={
  getBool("TESTENV")
}

@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("ICU: admin only") else 
  [
    StringEntry("static_oracleAddress",oracle)
  ]

}
		
@Callable(i)	
func setDiscount(val: Int) = {	
  if (i.caller != this) then {	
    throw("ISD: admin_only")	
  } else {	
    [IntegerEntry("discountCoefficient", val)]	
  }	
}

@Callable(i)	
func setSale(val: Int) = {	
  if (i.caller != this) then {	
    throw("ISS: admin_only")	
  } else {	
    [IntegerEntry("saleCoefficient", val)]	
  }	
}

@Callable(i)
func startDuckHatching(refererAddress: String) = {
  if getBabyDuckAddress() != i.caller then throw("ISDHFA: From now on this is only possible through ducklings!") else
  if (isLocked() > 0) then {
    throw("ISDH: EGG operations are temporarily locked")
  } else {
    let totalDucksAmount = tryGetInteger("ducks_amount")
    let eggsNeeded = countEggsNeededAmount(totalDucksAmount)
      [
        StringEntry(getHatchingStatusKey(i.originCaller.toString(), i.transactionId), HatchingStarted),
        IntegerEntry(getHatchingFinishHeightKey(i.originCaller.toString(), i.transactionId), height + delayForHatching),
        IntegerEntry("ducks_amount", totalDucksAmount + 1),
        IntegerEntry("ducks_last_price", eggsNeeded / 1000000),
        BooleanEntry("hatching_" + i.transactionId.toBase58String() + "_babyDuck", true)
      ]
  }
}



@Callable(i)
func startDuckHatchingForAddress(address: String) = {
  if (isLocked() > 0) then 
    throw("ISDHFA: EGG operations are temporarily locked")
   else if (i.caller!= this) then throw("ISDHFA: Permission denied") else {
    let totalDucksAmount = tryGetInteger("ducks_amount")
    let eggsNeeded = countEggsNeededAmount(totalDucksAmount)


      [
        StringEntry(getHatchingStatusKey(address, i.transactionId), HatchingStarted),
        IntegerEntry(getHatchingFinishHeightKey(address, i.transactionId), height + delayForHatching),
        IntegerEntry("ducks_amount", totalDucksAmount + 1),
        IntegerEntry("ducks_last_price", eggsNeeded / 1000000),
        BooleanEntry("hatching_" + i.transactionId.toBase58String() + "_promo", true)
      ]
  }
}

@Callable(i)
func finishDuckHatching(txIdStr: String) = {
  let owner = i.originCaller.toString()
  finishHatchingInternal(txIdStr,owner)


}

@Callable(i)
func issueFreeDuck(address: String, txIdStr: String) = {
  if (i.caller != getRebirthAddress()) then {
    throw("ISFD: rebirth only")
  } else {
    let txId = fromBase58String(txIdStr)
    let hatchingStatusKey = getHatchingStatusKey(address, txId)
    let finishHeightKey = getHatchingFinishHeightKey(address, txId)

    let totalDucksAmount = tryGetInteger("ducks_amount")
    let eggsNeeded = countEggsNeededAmount(totalDucksAmount)

    let (duckGen, farmGen, jackpotRandomEntry) = getRandomName(txId, valueOrErrorMessage(transactionHeightById(txId),txIdStr+ " not found "+toBase58String(txId)) + 1)
    let description = "{\"genotype\": \"" + duckGen + "\", \"crossbreeding\": true}"

    let asset = Issue(duckGen, description, 1, 0, false, unit, height)
    let assetId = asset.calculateAssetId()

    let amount = tryGetInteger(getDuckStatsKey(duckGen)) + 1

    let duckIdKey = getDuckIdKey(address, txId)
    ([
      IntegerEntry(getHatchingFinishHeightKey(address, txId), height),
      IntegerEntry("ducks_amount", totalDucksAmount + 1),
      IntegerEntry("ducks_last_price", eggsNeeded / 1000000),
      jackpotRandomEntry,
      StringEntry(hatchingStatusKey, HatchingFinished),
      StringEntry(duckIdKey, assetId.toBase58String()),
      StringEntry(assetId.toBase58String(), duckIdKey),
      IntegerEntry(getDuckStatsKey(duckGen), amount),
      IntegerEntry("stats_"+farmGen+"_quantity", tryGetInteger("stats_"+farmGen+"_quantity") + 1),
      asset,
      ScriptTransfer(addressFromString(address).value(), 1, assetId)
    ], assetId.toBase58String())
  }
}

@Callable(i)
func issueFreeDuckDefinedGenes(address: String, txIdStr: String, genes:String) = {
  if (i.caller != this && i.caller != getTurtleRebirthAddress()) then {
    throw("IIFDDG: Admin only!")
  } else {
    let txId = fromBase58String(txIdStr)
    let hatchingStatusKey = getHatchingStatusKey(address, txId)
    let finishHeightKey = getHatchingFinishHeightKey(address, txId)

    let totalDucksAmount = tryGetInteger("ducks_amount")
    let eggsNeeded = countEggsNeededAmount(totalDucksAmount)

    let colorRandom = getRandomNumber(4,  txId, height, 6)
     let color = if (colorRandom == 0) then "Y"
      else if (colorRandom == 1) then "G" 
      else if (colorRandom == 2) then "B" 
      else "R"

    let (duckGen, farmGen) = ("DUCK-"+genes+"-G" + color, "8"+take(genes,1)+"-G")
    let description = "{\"genotype\": \"" + duckGen + "\", \"crossbreeding\": true}"

    let asset = Issue(duckGen, description, 1, 0, false, unit, height)
    let assetId = asset.calculateAssetId()

    let amount = tryGetInteger(getDuckStatsKey(duckGen)) + 1

    let duckIdKey = getDuckIdKey(address, txId)
    ([
      IntegerEntry(getHatchingFinishHeightKey(address, txId), height),
      IntegerEntry("ducks_amount", totalDucksAmount + 1),
      IntegerEntry("ducks_last_price", eggsNeeded / 1000000),
      StringEntry(hatchingStatusKey, HatchingFinished),
      StringEntry(duckIdKey, assetId.toBase58String()),
      StringEntry(assetId.toBase58String(), duckIdKey),
      IntegerEntry(getDuckStatsKey(duckGen), amount),
      IntegerEntry("stats_"+farmGen+"_quantity", tryGetInteger("stats_"+farmGen+"_quantity") + 1),
      asset,
      ScriptTransfer(addressFromString(address).value(), 1, assetId)
    ], assetId.toBase58String())
  }
}

@Callable(i)
func issueJackpot(address: String, txIdStr: String, gen: String) = {
  if (i.caller != getRebirthAddress() && i.caller != this) then {
    throw("ISJ: admin or rebirth only")
  } else {
    let txId = fromBase58String(txIdStr)
    let hatchingStatusKey = getHatchingStatusKey(address, txId)
    let finishHeightKey = getHatchingFinishHeightKey(address, txId)

    let totalDucksAmount = tryGetInteger("ducks_amount")
    let eggsNeeded = countEggsNeededAmount(totalDucksAmount)

    let (duckGen, farmGen) = ("DUCK-"+gen+"-JU", "8W-J")
    let description = "{\"genotype\": \"" + duckGen + "\", \"crossbreeding\": true}"

    let asset = Issue(duckGen, description, 1, 0, false, unit, height)
    let assetId = asset.calculateAssetId()

    let duckIdKey = getDuckIdKey(address, txId)
    let valueDuckIdKeyExits = tryGetString(duckIdKey)
    if valueDuckIdKeyExits != "" then throw("ISJ: You will override following duckId :"+duckIdKey+" make sure that your txId is unique!") else
    ([
      IntegerEntry(getHatchingFinishHeightKey(address, txId), height),
      IntegerEntry("ducks_amount", totalDucksAmount + 1),
      IntegerEntry("ducks_last_price", eggsNeeded / 1000000),
    
      StringEntry(hatchingStatusKey, HatchingFinished),
      StringEntry(duckIdKey, assetId.toBase58String()),
      StringEntry(assetId.toBase58String(), duckIdKey),
      IntegerEntry(getDuckStatsKey(duckGen), tryGetInteger(getDuckStatsKey(duckGen)) + 1),
      IntegerEntry("stats_"+farmGen+"_quantity", tryGetInteger("stats_"+farmGen+"_quantity") + 1),
      asset,
      ScriptTransfer(addressFromString(address).value(), 1, assetId)
    ], assetId.toBase58String())
  }
}

@Callable(i)
func reduceRarity(assetId: String, fGen: String) = {
  let asset = assetId.fromBase58String()
  if (i.caller != getRebirthAddress() && i.caller != this) then {
    throw("IRR: admin or rebirth only")
  } else {
    let duckGen = assetInfo(asset).value().name
    let letter = duckGen.take(6).takeRight(1)
    let farmGen = "8"+letter+"-G"
    [
      IntegerEntry(getDuckStatsKey(duckGen), tryGetInteger(getDuckStatsKey(duckGen)) - 1),
      IntegerEntry("stats_"+farmGen+"_quantity", tryGetInteger("stats_"+farmGen+"_quantity") - 1)
    ]
  }
}

@Callable(i)
func finishDuckHatchingAdmin(txIdStr: String, owner: String) = {
  if i.caller != this then throw("IFDHA: Only admins can run this!") else 
      finishHatchingInternal(txIdStr, owner) 
}

@Verifier(tx)
func verify() = {
  if isTestEnv() then 
      sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
  else
    let firstUser = base58'6TdaXEfhnjYquvPf3yV7MFxt2CbgFmaqsvGwkKfXtKi4'
    let secondUser = base58'E23yUg8eun5nXB1nZRDf7RTyRADKxQhGNXdpTYonEvtU'
    let thirdUser = base58'Ga8WEBTPXbHuoXRD355mQ6ms8PsM2RFYKeA1mEP32CFe'

    let firstUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], firstUser)) then 1
        else 0
    let secondUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], secondUser)) then 1
        else 0
    let thirdUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], thirdUser)) then 1
        else 0
    let signaturesCount = firstUserSigned + secondUserSigned + thirdUserSigned

    match (tx) {
        case _ => signaturesCount >= 2
    }
}

        
