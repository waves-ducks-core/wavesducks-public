{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
func isTestEnv()={
    let testenv =  match getBoolean(this, "TESTENV") {
      case x: Boolean => x
      case _ => false
    }
    testenv
}

@Callable(i)
func makePayment() = {
  let eggAssetId = base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'
  let farmingContractAddress = base58'3PEpQ4LaeZA6DVMyrgU3PTFBprAF4tRziBD'
  let nodeDappAddress = base58'3PGZMJGVbWM8taptaK8sbxE2Ja7k54HKUJS'
  let klastRefillHeight = "lastRefillHeight"

  let lastRefillHeight = match getInteger(klastRefillHeight) {
    case int: Int => int
    case _ => 0
  }
  let amount = 1_6700_0000
  let timeFrame = 60
  
  if (height - lastRefillHeight < timeFrame) then throw("Cannot refill yet, needs " + (timeFrame - (height - lastRefillHeight)).toString() + " blocks")
  else {
    strict burnCall = invoke(Address(farmingContractAddress), "topUpReward", [],[AttachedPayment(eggAssetId,amount)])
    strict nodeCall = invoke(Address(nodeDappAddress), "transferRewardsToCanineStaking", [],[])
    [
      IntegerEntry(klastRefillHeight, height),
      ScriptTransfer(i.caller, 1_000_000, eggAssetId)

    ]
  }
}

@Verifier(tx)
func verify() = {
  if isTestEnv() then 
      sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
  else
    let firstUser = base58'6TdaXEfhnjYquvPf3yV7MFxt2CbgFmaqsvGwkKfXtKi4'
    let secondUser = base58'7DsP2WaMLocbHuUxux7pbXRjTrrZ1TFQPsi5QumS3gr8'
    let thirdUser = base58'BpFWP3p3JgYrrP45xfrKzeMcWMEXoinj4FVPPkUiA8D3'

    let firstUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], firstUser)) then 1
        else 0
    let secondUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], secondUser)) then 1
        else 0
    let thirdUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], thirdUser)) then 1
        else 0
    let signaturesCount = firstUserSigned + secondUserSigned + thirdUserSigned

    match (tx) {
        case _ => signaturesCount >= 2
    }
}   