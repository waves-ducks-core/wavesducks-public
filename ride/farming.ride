{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}


let perchPrice = 100 * 1000000
let scale = 10000
let scale2 = 1000000


func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}


func tryGetString(key: String) = {
    tryGetStringExternal(this,key)
}

func staticKey_oracleAddress() = "static_oracleAddress"
func staticKey_eggAssetId() = "static_eggAssetId"
func staticKey_incubatorAddress() = "static_incubatorAddress"
func staticKey_breederAddress() = "static_breederAddress"
func staticKey_itemsAddress() = "static_itemsAddress"
func staticKey_metaRaceAddress() = "static_metaRaceAddress"
func staticKey_accBoosterAddress() = "static_accBoosterAddress"
func staticKey_proxyStakingContracts() = "static_proxyStakingContracts"
func staticKey_maintenance() = "static_maintenance"
#TODO add last 4 also here
func staticKey_cfMasterAddress() = "static_cfMasterAddress"
func staticKey_extraFee() = "static_extraFee"
func staticKey_feeAggregator() = "static_feeAggregator"

func getOracle() = Address(tryGetString(staticKey_oracleAddress()).fromBase58String())
func getEggAssetId() = tryGetStringExternal(getOracle(),staticKey_eggAssetId()).fromBase58String() #base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'
func getIncubatorAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_incubatorAddress()).fromBase58String()) #base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
func getBreederAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_breederAddress()).fromBase58String()) #base58'3PDVuU45H7Eh5dmtNbnRNRStGwULA7NY6Hb'
func getItemsAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_itemsAddress()).fromBase58String())
func getMetaraceAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_metaRaceAddress()).fromBase58String())
func getAccBoosterAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_accBoosterAddress()).fromBase58String())
func getProxyStaking() =  tryGetStringExternal(getOracle(),staticKey_proxyStakingContracts())
func getMaintenance() =  tryGetStringExternal(getOracle(),staticKey_maintenance())
func getCfMasterAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_cfMasterAddress()).fromBase58String())
func getFeeAggregator() = Address(tryGetStringExternal(getOracle(),staticKey_feeAggregator()).fromBase58String())

let RefererReward = 5 #percentage

func checkAdditionalPayment(payment: AttachedPayment)= {
  if isDefined(payment.assetId) then throw("FCAP: Please attach waves") else
  let feeAmount = getIntegerValue(getOracle(),staticKey_extraFee())
  if payment.amount != feeAmount then throw("FCAP: Please attach exactly "+feeAmount.toString()+" amount of wavelets") else
  [ScriptTransfer(getFeeAggregator(), feeAmount, unit)]

}

func getRewardPerBlock() = {
  0 # 0.0684 EGGs per block
}

func isLocked() = {
    if getMaintenance() != "" then throw(getMaintenance()) else 0
}

func tryGetInteger(key: String) = {
    match getInteger(this, key) {
        case b:Int => b
        case _ => 0
    }
}

func tryGetBoolean(key: String) = {
    match getBoolean(this, key) {
        case b:Boolean => b
        case _ => false
    }
}

func tryGetBooleanExternal(address:Address, key: String) = {
    match getBoolean(address, key) {
        case b:Boolean => b
        case _ => false
    }
}


func getAssetOrigin(generation: String) = {
  if (generation == "G") then {getIncubatorAddress()} else {getBreederAddress()}
}

#TODO: count in items in calculating staking power
func getAssetRarity(genotype: String, generation: String) = {
  let quantity = valueOrErrorMessage(getInteger(getAssetOrigin(generation), "stats_"+genotype+"_quantity"),"stats_"+genotype+"_quantity not found")
  let power = pow(10000 / quantity, 4, 5, 1, 2, FLOOR)
  if (power > 0) then {power} else {2}
}

func asString(value: Any) = match value {
  case string: String => string
  case _ => throw("FAS: wrong type, expected: String")
}

func asInt(value: Any) = match value {
  case int: Int => int
  case _ => throw("FAI: wrong type, expected: Int")
}

func asBoolean(value: Any) = match value {
  case boolean: Boolean => boolean
  case _ => throw("FAB: wrong type, expected: Boolean")
}

func getAssetFarmingPower(assetId: ByteVector, address: String) = {
  if (assetInfo(assetId).value().issuer == getBreederAddress() || assetInfo(assetId).value().issuer == getIncubatorAddress()) then {  
    strict farmBoost = invoke(getItemsAddress(),"calculateFarmingPowerBoost",[assetId.toBase58String(),address],[]).asInt()
    let assetName = assetInfo(assetId).value().name
    let isJackpot = assetName.value().takeRight(1) == "U"

    strict farmGen = if isJackpot then "" else invoke(getBreederAddress(),"getGenFromName",[assetName],[]).asString()
    let rarity = if isJackpot then 100 else{
      
      let generation = assetName.takeRight(2).take(1)
    
      getAssetRarity(farmGen, generation)
    }


    let totalFarmingPower = rarity + fraction(rarity,farmBoost,100)
    (farmGen, totalFarmingPower )
  } else {
    throw("not valid NFT")
  }
}

func getLastKnownAssetFarmingPower(address: String, assetId: String) = {
  tryGetInteger("address_"+address+"_asset_"+assetId+"_farmingPower")
}

func calcInterest(previousInterest: Int, previousInterestHeight: Int, totalFarmingPower: Int) = {
  # interest = amount of EGGlets you would earn if staked 1 percent of farming power since the very first block of farming
  previousInterest + scale * getRewardPerBlock() * (height-previousInterestHeight) / totalFarmingPower
}

func getCurrentInterest() = {
  if (tryGetInteger("total_farmingPower") > 0) then {
    let previousInterest = tryGetInteger("total_lastCheckInterest")
    let previousInterestHeight = tryGetInteger("total_lastCheckInterestHeight")
    let totalFarmingPower = tryGetInteger("total_farmingPower")

    calcInterest(previousInterest, previousInterestHeight, totalFarmingPower)
  } else if (tryGetInteger("total_startHeight") != 0) then { tryGetInteger("total_lastCheckInterest") } else { throw("farming is not launched, yet") }
}


func calcAssetRewardDelta(address: String, assetId: String, assetFarmingPower: Int) = {
  let lastCheckAssetInterest = tryGetInteger("address_"+address+"_asset_"+assetId+"_lastCheckInterest")
  let currentInterest = getCurrentInterest()

  assetFarmingPower * (currentInterest - lastCheckAssetInterest)
}


func addAssetIdToGenEntry(assetId: String, assetGen: String) = {
  let currentValue = tryGetString("assets_"+assetGen+"_locked")
  if (currentValue == "") then {assetId} else {currentValue+","+assetId}
}


func getStakeResult(address: String, assetId: ByteVector, assetFarmingPower: Int, unstaker: String) = {
  let asset = assetId.toBase58String()
  [
    IntegerEntry("total_farmingPower", tryGetInteger("total_farmingPower") + assetFarmingPower),
    IntegerEntry("total_lastCheckInterest", getCurrentInterest()),
    IntegerEntry("total_lastCheckInterestHeight", height),
    StringEntry("asset_"+asset+"_owner", address),
    IntegerEntry("address_"+address+"_asset_"+asset+"_farmingPower", assetFarmingPower),
    IntegerEntry("address_"+address+"_asset_"+asset+"_lastCheckInterest", getCurrentInterest()),
    StringEntry("address_"+address+"_asset_"+asset+"_unstaker",unstaker)
  ]
}

func getUnstakeResult(address: String, assetId: ByteVector, color: String, caller: Address, realCaller: String, claimEggs: Boolean) = {
  strict locked = isLocked()

  let asset = assetId.toBase58String()
    
  let unstaker = tryGetString("address_"+address+"_asset_"+asset+"_unstaker")
  if unstaker != "" &&  unstaker != realCaller then throw("FUN: It seems duck was staked throuh a dapp, not directly, please unstake through dapp!") else 

  let assetFarmingPower = getLastKnownAssetFarmingPower(address, asset)
  if !(assetFarmingPower > 0) then throw("FGU: Asset farming power not bigger then 0") else

  let assetRewardDelta = calcAssetRewardDelta(address, asset, assetFarmingPower)

  let farmedAmount = assetRewardDelta + tryGetInteger("address_"+address+"_asset_"+asset+"_lastCheckFarmedAmount")
  let withdrawnAmount = tryGetInteger("address_"+address+"_asset_"+asset+"_withdrawnAmount")
  

  let reward = (farmedAmount - withdrawnAmount) / (scale * 100)

  let isWithoutPerch = tryGetBoolean("address_"+address+"_asset_"+asset+"_without_perch")
  let rewardAfterSickNess = reward
  let appendPerches = if isWithoutPerch then [DeleteEntry("address_"+address+"_asset_"+asset+"_without_perch")] else [IntegerEntry("address_"+address+"_perchesAvailable_"+color, tryGetInteger("address_"+address+"_perchesAvailable_"+color) + 1)]
  let sendTx = if claimEggs then ([
            ScriptTransfer(caller, rewardAfterSickNess * 1000000, getEggAssetId())
          ],rewardAfterSickNess * 1000000) else ([],0)
    ([
      IntegerEntry("total_farmingPower", tryGetInteger("total_farmingPower") - assetFarmingPower),
      IntegerEntry("total_lastCheckInterest", getCurrentInterest()),
      IntegerEntry("total_lastCheckInterestHeight", height),
      DeleteEntry("asset_"+asset+"_owner"),
      DeleteEntry("address_"+address+"_asset_"+asset+"_unstaker"),
      IntegerEntry("address_"+address+"_asset_"+asset+"_farmingPower", 0),
      IntegerEntry("address_"+address+"_asset_"+asset+"_lastCheckInterest", getCurrentInterest()),
      IntegerEntry("address_"+address+"_asset_"+asset+"_withdrawnAmount", withdrawnAmount + rewardAfterSickNess * scale2),
      IntegerEntry("address_"+address+"_asset_"+asset+"_lastCheckFarmedAmount", tryGetInteger("address_"+address+"_asset_"+asset+"_lastCheckFarmedAmount") + assetRewardDelta)
    ]++appendPerches ++ [
            ScriptTransfer(caller, 1, assetId)
          ]++sendTx._1, sendTx._2)
}

func calculatePerchPrice(address: String)= {
  let hasArtefactStaked = tryGetStringExternal(getAccBoosterAddress(),"ART-XMISTL_" + address + "_owner")
  if hasArtefactStaked == ""
  then
    perchPrice
  else
    perchPrice/10*9

}

func isProxyStakingSc(address: String)={
  let allowedContracts = getProxyStaking()
  let allowedContractsList = allowedContracts.split(";")
  allowedContractsList.indexOf(address) !=unit
}

func unstakeNFTInternal(asset: String, i: Invocation, claimEgg: Boolean) = {

    let assetId = asset.fromBase58String()
    let realCaller = i.caller.toString()
    let address = if isProxyStakingSc(i.caller.toString())  then i.originCaller.toString() else realCaller

    
    let color = assetInfo(assetId).value().name.takeRight(1)

      if (color == "U") then {
        throw("FUN: use another function to unstake Jackpot NFT")
      } else {
        let result = getUnstakeResult(address, assetId, color,i.caller, realCaller,claimEgg)

        result

      }
    
  
}

func unstakeJackpotInternal(asset: String, i: Invocation, claimEgg: Boolean) = {
  
  let assetId = asset.fromBase58String()
  let realCaller = i.caller.toString()
  let address = if isProxyStakingSc(i.caller.toString())  then i.originCaller.toString() else realCaller

    
    let color = tryGetString("address_"+address+"_asset_"+asset+"_perchColor")

    if (assetInfo(assetId).value().name.value().takeRight(1) != "U") then throw("jackpot only") else 
        let result = getUnstakeResult(address, assetId, color,i.caller,realCaller,claimEgg)

        result
    
  
}

func getBool(key: String) = {
  match getBoolean(this, key) {
      case b:Boolean => b
      case _ => false
  }
}

func isTestEnv()={
  getBool("TESTENV")
}

@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("FCO: admin only") else 
  [
    StringEntry(staticKey_oracleAddress(),oracle)
  ]

}

@Callable(i)
func init() = {
  if (i.caller != this) then throw("FI: admin only") else {
    [ IntegerEntry("total_startHeight", height) ]
  }
}

@Callable(i)
func buyPerch(colorI: String, refererAddress: String) = {
    throw("FBN: function is disabled, migration to new sc ongoing")
  
}

@Callable(i)
func addFreePerch(address: String, color: String) = {
    throw("FBN: function is disabled, migration to new sc ongoing")
}

@Callable(i)
func stakeNFT() = {
    throw("FBN: function is disabled, migration to new sc ongoing")
    
}

@Callable(i)
func stakeNFTWithoutPerch() = {
    throw("FBN: function is disabled, migration to new sc ongoing")
  
}

@Callable(i)
func unstakeNFT(asset: String) = {
  strict validPayment = if i.caller == getMetaraceAddress() then [] else checkAdditionalPayment(i.payments[0])
  let result = unstakeNFTInternal(asset,i,true)
  (result._1++validPayment,result._2)
  
}

@Callable(i)
func unstakeNFTWithoutClaim(asset: String) = {

  unstakeNFTInternal(asset,i,false)
  
}



@Callable(i)
func stakeJackpot(color: String) = {
    throw("FBN: function is disabled, migration to new sc ongoing")
  
}

@Callable(i)
func unstakeJackpot(asset: String) = {
  strict validPayment = checkAdditionalPayment(i.payments[0])
  let result = unstakeJackpotInternal(asset,i,true)
  (result._1++validPayment,result._2)
  

  
}

@Callable(i)
func unstakeJackpotWithoutClaimEgg(asset: String) = {
  
  unstakeJackpotInternal(asset,i,false)

  
}

@Callable(i)
func claimReward(asset: String) = {
  strict locked = isLocked()
  strict validPayment = if i.originCaller == getCfMasterAddress() then [] else checkAdditionalPayment(i.payments[0])
  let address = if i.originCaller == getCfMasterAddress() then i.caller.toString() else i.originCaller.toString()


    let assetId = asset.fromBase58String()

    let assetFarmingPower = getLastKnownAssetFarmingPower(address, asset)
    let assetRewardDelta = calcAssetRewardDelta(address, asset, assetFarmingPower)
    

    let farmedAmount = assetRewardDelta + tryGetInteger("address_"+address+"_asset_"+asset+"_lastCheckFarmedAmount")
    let withdrawnAmount = tryGetInteger("address_"+address+"_asset_"+asset+"_withdrawnAmount")

    let reward = (farmedAmount - withdrawnAmount) / (scale * 100)

    if (reward <= 0) then throw("FCR: you have no EGGs to withdraw") else 
      (
        [
        IntegerEntry("address_"+address+"_asset_"+asset+"_withdrawnAmount", tryGetInteger("address_"+address+"_asset_"+asset+"_withdrawnAmount") + reward * scale2),
        ScriptTransfer(Address(address.fromBase58String()), reward * 1000000, getEggAssetId())
        ]++validPayment,
        reward * 1000000
      )
    
  
}


@Verifier(tx)
func verify() = {
  if isTestEnv() then 
      sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
  else
    let firstUser = base58'6TdaXEfhnjYquvPf3yV7MFxt2CbgFmaqsvGwkKfXtKi4'
    let secondUser = base58'E23yUg8eun5nXB1nZRDf7RTyRADKxQhGNXdpTYonEvtU'
    let thirdUser = base58'Ga8WEBTPXbHuoXRD355mQ6ms8PsM2RFYKeA1mEP32CFe'

    let firstUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], firstUser)) then 1
        else 0
    let secondUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], secondUser)) then 1
        else 0
    let thirdUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], thirdUser)) then 1
        else 0
    let signaturesCount = firstUserSigned + secondUserSigned + thirdUserSigned

    match (tx) {
        case _ => signaturesCount >= 2
    }
}
