{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}


func tryGetStringExternal(address: Address, key: String) = {
    match getString(address, key) {
        case a:String => a
        case _ => ""
    }
}

func tryGetIntExternal(address: Address, key: String) = {
    match getInteger(address, key) {
        case a:Int => a
        case _ => throw("RTGIE: Something went wrong")
    }
}

func asBoolean(value: Any) = match value {
  case boolean: Boolean => boolean
  case _ => throw("FAB: wrong type, expected: Boolean")
}

func tryGetString(key: String) = {
    tryGetStringExternal(this,key)
}
let delayForHatching = 2

func staticKey_oracleAddress() = "static_oracleAddress"
func staticKey_eggAssetId() = "static_eggAssetId"
func staticKey_incubatorAddress() = "static_incubatorAddress"
func staticKey_breederAddress() = "static_breederAddress"
func staticKey_farmingAddress() = "static_farmingAddress"
func staticKey_babyDuckAddress() = "static_babyDuckAddress"
func staticKey_gameDappAddress() = "static_gameDappAddress"
func staticKey_itemsAddress() = "static_itemsAddress"
func staticKey_couponsAddress() = "static_couponsAddress"
func staticKey_huntAddress() = "static_huntAddress"
func staticKey_burnAddress() = "static_burnAddress"
func staticKey_refContractAddress() = "static_refContractAddress"
func staticKey_extraFee() = "static_extraFee"
func staticKey_feeAggregator() = "static_feeAggregator"

func getOracle() = Address(tryGetString(staticKey_oracleAddress()).fromBase58String())
func getEggAssetId() = tryGetStringExternal(getOracle(),staticKey_eggAssetId()).fromBase58String() #base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'
func getIncubatorAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_incubatorAddress()).fromBase58String()) #base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
func getBreederAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_breederAddress()).fromBase58String()) #base58'3PDVuU45H7Eh5dmtNbnRNRStGwULA7NY6Hb'
func getFarmingAddress() =  Address(tryGetStringExternal(getOracle(), staticKey_farmingAddress()).fromBase58String())
func getBabyDuckAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_babyDuckAddress()).fromBase58String()) #base58'3P6s9C39Ak5FAQ3F5VapYJ3ULxgbsAReXlet babyDucksAddress = base58'3PKmLiGEfqLWMC1H9xhzqvAZKUXfFm8uoeg'
func getGameDappAddress() = Address(tryGetStringExternal(getOracle(),staticKey_gameDappAddress()).fromBase58String())
func getItemsAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_itemsAddress()).fromBase58String())
func getCouponsAddress() = Address(tryGetStringExternal(getOracle(),staticKey_couponsAddress()).fromBase58String())
func getHuntAddress() = Address(tryGetStringExternal(getOracle(),staticKey_huntAddress()).fromBase58String())
func getBurnAddress() = Address(tryGetStringExternal(getOracle(),staticKey_burnAddress()).fromBase58String())
func getRefContractAddress() =  Address(tryGetStringExternal(getOracle(),staticKey_refContractAddress()).fromBase58String()) #base58'3P8ejTkfRpz9WqCwCuihesNXU5k3zmFFfVe'
func getFeeAggregator() = Address(tryGetStringExternal(getOracle(),staticKey_feeAggregator()).fromBase58String())

func checkAdditionalPayment(payment: AttachedPayment)= {
  if isDefined(payment.assetId) then throw("RCAP: Please attach waves") else
  let feeAmount = getIntegerValue(getOracle(),staticKey_extraFee())
  if payment.amount != feeAmount then throw("RCAP: Please attach exactly "+feeAmount.toString()+" amount of wavelets") else
  [ScriptTransfer(getFeeAggregator(), feeAmount, unit)]

}

let PHOENIXBASEOPTIONS = 1000  # base chance to get a phoenix: 1 / (1000 - 1000/2 * rarity)


func tryGetInteger(key: String) = {
    match getInteger(this, key) {
        case b:Int => b
        case _ => 0
    }
}

func asString(value: Any) = match value {
  case s: String => s
  case s: Int => throw("wrong type, expected: String, got: Int")
  case s: Unit => throw("wrong type, expected: String, got: Unit")
  case _ => throw("wrong type, expected: String")
}

let feeAmount = tryGetInteger("currentPrice")

func getAmountOrClear(amount: String) = {
  if (amount.contains("0")) then {""} else {amount}
}

func getAssetOrigin(generation: String) = {
  if (generation == "G") then {getIncubatorAddress()} else {getBreederAddress()}
}

func getAssetRarity(genotype: String, generation: String) = {
  let quantity = getIntegerValue(getAssetOrigin(generation), "stats_"+genotype+"_quantity")
  let power = pow(10000 / quantity, 4, 5, 1, 2, FLOOR)
  if (power > 0) then {power} else {2}
}

func getAssetFarmingPower(assetId: ByteVector) = {
  if (assetInfo(assetId).value().issuer == getBreederAddress() || assetInfo(assetId).value().issuer ==getIncubatorAddress()) then {
    let assetName = assetInfo(assetId).value().name
    let generation = assetName.takeRight(2).take(1)
    strict farmGen = invoke(getBreederAddress(),"getGenFromName",[assetName],[]).asString()
    (farmGen, getAssetRarity(farmGen, generation))
  } else {
    throw("not valid NFT")
  }
}

func getRandomNumber(options: Int, txId: ByteVector, hatchingFinishHeight: Int, offset: Int) = {
  let randomSeedBlock = blockInfoByHeight(hatchingFinishHeight-1).value()
  let randomHash = sha256(txId + randomSeedBlock.vrf.value())
  randomHash.toInt(offset*8) % options
}

func getRandomWin(tx: ByteVector, finishHeight: Int, assetRarity: Int) = {
  let phoenixOptions = PHOENIXBASEOPTIONS - fraction(PHOENIXBASEOPTIONS / 2, assetRarity, 100)  # chance = 0.1% + 0.1% * rarity (from 0.02 to 1)

  let jackpotRandom = getRandomNumber(phoenixOptions, tx, finishHeight, 1)

  if (jackpotRandom == 1) then { "phoenix" } else 
    #Every % means 10 numbers
    let n = getRandomNumber(1000, tx, finishHeight, 0)
    if (n<10) then {"item!ART-FREEGENE"} else
    if (n<126) then { "ar" } else
    if (n<186) then { "item!ART-FIRE_ARMOUR" } else
    if (n<206) then { "item!ART-FEED5" } else    
    if (n<226) then { "item!ART-FEED10" } else    
    if (n<246) then { "item!ART-FEED15" } else    
    if (n<266) then { "item!ART-FEED20" } else    
    if (n<286) then { "item!ART-FEED25" } else    
    if (n<296) then { "item!ART-FEED50" } else   
    if (n<300) then { "item!ART-FEED100" } else
    if (n<310) then { "item!ART-CROWN" } else
    if (n<350) then { "incubator" } else
    if (n<460) then { "item!ART-BUILTBODY" } else
    if (n<480) then { "item!ART-SNAKE" } else
    if (n<530) then { "item!ART-ROBODUCK" } else
    if (n<640) then { "item!ART-KATANA" } else
    if (n<740) then { "item!ART-SCEPTER" } else

    if (n<910) then { "duckling_10" } else 
    if (n<980) then { "duckling_20" } else
    { "duckling_40" }

}


func getOrigin(assetId: ByteVector) = {
  let assetName = assetInfo(assetId).value().name
  let generation = assetName.takeRight(2).take(1)
  if (generation == "G" || generation == "J") then {
    getIncubatorAddress()
  } else {
    getBreederAddress()
  }
}

func asInt(value: Any) = match value {
  case int: Int => int
  case string: String => throw("RAI: wrong type, expected: Int, but got: "+string)
  case _ => throw("RAI: wrong type, expected: Int")
}

func getBool(key: String) = {
  match getBoolean(this, key) {
      case b:Boolean => b
      case _ => false
  }
}

func isTestEnv()={
  getBool("TESTENV")
}


func finishRebirthInternal(initTx: String, address: String, payment: AttachedPayment, double: Boolean) = {
  let finishBlock = tryGetInteger("address_" + address + "_initTx_" + initTx + "_finishBlock")
  let assetRarity = tryGetInteger("address_" + address + "_initTx_" + initTx + "_assetRarity")
  let status = tryGetString("address_" + address + "_initTx_" + initTx + "_status")
  strict validPayment = checkAdditionalPayment(payment)
  strict recordAction = invoke(getCouponsAddress(),"recordAction",["REBIRTH"],[])
  func getAccessItemAssetId(address: Address) = tryGetStringExternal(address,"static_accessItemAssetId").fromBase58String()
  func getAccessItemPrice(address: Address) = tryGetIntExternal(address,"static_accessItemPrice")

  if (status != "open") then {
    throw("rebirth is finished or not open")
  } else {
    if (height < finishBlock) then {
      throw("you cannot finish rebirth, yet")
    } else {
      let win = getRandomWin(initTx.fromBase58String(), finishBlock, assetRarity)  

      let txId = initTx

      let result = if (win.indexOf("perch") != unit) then {
        let color = win.takeRight(1)
        strict result = if !double then 
				strict first = invoke(getFarmingAddress(), "addFreePerch", [address, color], [])
                [
					StringEntry("address_" + address + "_initTx_" + initTx + "_result", first.asString())
				]
            else  
				strict first = invoke(getFarmingAddress(), "addFreePerch", [address, color], [])
                strict second = invoke(getFarmingAddress(), "addFreePerch", [address, color], [])
                [
					StringEntry("address_" + address + "_initTx_" + initTx + "_result", first.asString()),
                    StringEntry("address_" + address + "_initTx_" + initTx + "_result1", second.asString()),
					StringEntry("address_" + address + "_initTx_" + initTx + "_win1", win)
                ]
				
        result
      } else if (win == "incubator") then {
        strict result = if !double then 
				strict first = invoke(getIncubatorAddress(), "issueFreeDuck", [address, txId], [])
                [
					StringEntry("address_" + address + "_initTx_" + initTx + "_result", first.asString())
				]
			else
				strict first = invoke(getIncubatorAddress(), "issueFreeDuck", [address, txId], [])
				strict second = invoke(getBabyDuckAddress(), "issueFreeDuckling", [address, txId,100], [])
				[
					StringEntry("address_" + address + "_initTx_" + initTx + "_result", first.asString()),
					StringEntry("address_" + address + "_initTx_" + initTx + "_result1", second.asString()),
					StringEntry("address_" + address + "_initTx_" + initTx + "_win1", "duckling_100")
				] 
        
        result

      } else if (win == "ar") then {
		let assetId = getAccessItemAssetId(getHuntAddress())
        let price = getAccessItemPrice(getHuntAddress())
        strict call = invoke(getHuntAddress(), "buyAccessItemOther", [address], [AttachedPayment(assetId,price)])
        [
			StringEntry("address_" + address + "_initTx_" + initTx + "_result", call.asString())
		]

      }else if (win == "phoenix") then {
        strict call = invoke(getIncubatorAddress(), "issueJackpot", [address, txId, valueOrElse(getString("JACKPOT_NAME"),"WWWWWWWP")], []) 
        [
			StringEntry("address_" + address + "_initTx_" + initTx + "_result", call.asString())
		]

      } else if (win.indexOf("duckling") !=unit) then {
        let level = parseIntValue(win.split("_")[1])
        let levelFinal = if double then 2* level else level
        strict call = invoke(getBabyDuckAddress(), "issueFreeDuckling", [address, txId,levelFinal], []) 
        [
			StringEntry("address_" + address + "_initTx_" + initTx + "_result", call.asString())
		]

      } else if (win.indexOf("item") !=unit) then {
        let itemName = win.split("!")[1]
        strict result = if !double then 
			strict first = invoke(getItemsAddress(), "issueArtefactIndex", [itemName, address,0], [])
			[
				StringEntry("address_" + address + "_initTx_" + initTx + "_result", first.asString())
			]
        else 
			strict first = invoke(getItemsAddress(), "issueArtefactIndex", [itemName, address,0], [])
            strict second = invoke(getItemsAddress(), "issueArtefactIndex", [itemName, address,1], [])
            [
				StringEntry("address_" + address + "_initTx_" + initTx + "_result", first.asString()),
                StringEntry("address_" + address + "_initTx_" + initTx + "_result", second.asString()),
				StringEntry("address_" + address + "_initTx_" + initTx + "_win1", win)
			]
        
        result
      }else{
        throw("RFB: Some error occured, please contact the admins!")
      }

      result ++ [
        StringEntry("address_" + address + "_initTx_" + initTx + "_win", win),
        StringEntry("address_" + address + "_initTx_" + initTx + "_status", "finish")
      ]++validPayment
    }
  }
}

@Callable(i)
func configureOracle(oracle: String) = {
  if i.caller != this then throw("RCU: admin only") else 
  [
    StringEntry("static_oracleAddress",oracle)
  ]

}

@Callable(i)
func initRebirth(refererAddress: String) = {
  let pmt = i.payments[0]
  let assetId = pmt.assetId.value()
  let initTx = i.transactionId.toBase58String()
  let address = i.caller.toString()
  if (pmt.amount != 1) then throw("NFT is not attached") else


  strict amountPaidByCoupons = invoke(getCouponsAddress(),"useCoupons",[feeAmount],[]).asInt()
  let leftToPay = feeAmount-amountPaidByCoupons

  strict validPayment = checkAdditionalPayment(i.payments[1])

  strict payment = if leftToPay!=0 then {
    let feePayment = i.payments[2].value()
    if (feePayment.assetId != getEggAssetId()) then throw("You need to attach EGG tokens as fee") else 
    if (feePayment.amount < leftToPay)  then throw("You need to attach the following amount of EGG tokens as fee: 0." + leftToPay.toString()) else
        let refererRewardForPerch = fraction(leftToPay, 5, 100)
        strict refCall = invoke(getRefContractAddress(), "refPayment",
        [refererAddress], [AttachedPayment(getEggAssetId(), refererRewardForPerch)]).asBoolean()

        let toBurn = if refCall then leftToPay-refererRewardForPerch else leftToPay

        strict burnCall = invoke(getBurnAddress(), "burnAttachedPayments", [],[AttachedPayment(getEggAssetId(),toBurn)])
        
        leftToPay
  } else 0
   
  let (gen, rarity) = getAssetFarmingPower(assetId)

  strict call = invoke(getOrigin(assetId), "reduceRarity", [assetId.toBase58String(), gen], [])
  
  [
    IntegerEntry("address_" + address + "_initTx_" + initTx + "_finishBlock", height+delayForHatching),
    StringEntry("address_" + address + "_initTx_" + initTx + "_status", "open"),
    IntegerEntry("address_" + address + "_initTx_" + initTx + "_assetRarity", rarity),
    StringEntry("address_" + address + "_initTx_" + initTx + "_assetId", assetId.toBase58String())
  ]++validPayment

  
}


@Callable(i)
func finishRebirth(initTx: String) = {
 finishRebirthInternal(initTx, i.caller.toString(),i.payments[0], false)
}

@Callable(i)
func finishRebirthDouble(initTx: String) = {
  #TODO CHECK IF ITEM IS ATTACHED, CHECK IT IN SC, AND THEN BURN ITEM
  if !(size(i.payments) == 2 && i.payments[0].amount==1) then throw("Invalid payment") else 
    let assetId = i.payments[0].assetId.value()
    strict boosterType = invoke(getItemsAddress(),"checkArtefactDetails",[assetId.toBase58String()],[]).asString()
    if boosterType == "ART-GIFT_DOUBL" then 
      [
        Burn(assetId,1)
      ]++
      finishRebirthInternal(initTx, i.caller.toString(),i.payments[1], true)
    else
      throw("Error! Wrong item attached to double rewards!")
}

@Verifier(tx)
func verify() = {
  if isTestEnv() then 
      sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
  else
    let firstUser = base58'6TdaXEfhnjYquvPf3yV7MFxt2CbgFmaqsvGwkKfXtKi4'
    let secondUser = base58'E23yUg8eun5nXB1nZRDf7RTyRADKxQhGNXdpTYonEvtU'
    let thirdUser = base58'Ga8WEBTPXbHuoXRD355mQ6ms8PsM2RFYKeA1mEP32CFe'

    let firstUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], firstUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], firstUser)) then 1
        else 0
    let secondUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], secondUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], secondUser)) then 1
        else 0
    let thirdUserSigned = if (sigVerify(tx.bodyBytes, tx.proofs[0], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[1], thirdUser)) then 1
        else if (sigVerify(tx.bodyBytes, tx.proofs[2], thirdUser)) then 1
        else 0
    let signaturesCount = firstUserSigned + secondUserSigned + thirdUserSigned

    match (tx) {
        case _ => signaturesCount >= 2
    }
}
